/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},o=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=a[s]||0,f="".concat(s," ").concat(c);a[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var m=l(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:m,references:1})}o.push(f)}return o}function l(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,l){var a=r(e=e||[],l=l||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var i=n(a[o]);t[i].references--}for(var u=r(e,l),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=u}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},221:(e,t,n)=>{var r=n(540);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var o={d:{f:a,r:function(){throw Error(l(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(l(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin),l="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:a}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=s(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=s(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=s(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.0.0"},247:(e,t,n)=>{var r=n(982),l=n(540),a=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}var u=Symbol.for("react.element"),s=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),f=Symbol.for("react.fragment"),d=Symbol.for("react.strict_mode"),p=Symbol.for("react.profiler"),m=Symbol.for("react.provider"),h=Symbol.for("react.consumer"),g=Symbol.for("react.context"),y=Symbol.for("react.forward_ref"),v=Symbol.for("react.suspense"),b=Symbol.for("react.suspense_list"),k=Symbol.for("react.memo"),w=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var S=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var E=Symbol.for("react.memo_cache_sentinel"),A=Symbol.iterator;function C(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=A&&e[A]||e["@@iterator"])?e:null}var x=Symbol.for("react.client.reference");function _(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===x?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case f:return"Fragment";case c:return"Portal";case p:return"Profiler";case d:return"StrictMode";case v:return"Suspense";case b:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case g:return(e.displayName||"Context")+".Provider";case h:return(e._context.displayName||"Context")+".Consumer";case y:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case k:return null!==(t=e.displayName||null)?t:_(e.type)||"Memo";case w:t=e._payload,e=e._init;try{return _(e(t))}catch(e){}}return null}var P,z,N=l.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,T=Object.assign;function L(e){if(void 0===P)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);P=t&&t[1]||"",z=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+P+e+z}var O=!1;function I(e,t){if(!e||O)return"";O=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var l=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");l&&l.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),o=a[0],i=a[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(l=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;l<s.length&&!s[l].includes("DetermineComponentFrameRoot");)l++;if(r===u.length||l===s.length)for(r=u.length-1,l=s.length-1;1<=r&&0<=l&&u[r]!==s[l];)l--;for(;1<=r&&0<=l;r--,l--)if(u[r]!==s[l]){if(1!==r||1!==l)do{if(r--,0>--l||u[r]!==s[l]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=l);break}}}finally{O=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?L(n):""}function R(e){switch(e.tag){case 26:case 27:case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 15:return I(e.type,!1);case 11:return I(e.type.render,!1);case 1:return I(e.type,!0);default:return""}}function D(e){try{var t="";do{t+=R(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function F(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function M(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function B(e){if(F(e)!==e)throw Error(o(188))}function U(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=U(e)))return t;e=e.sibling}return null}var j=Array.isArray,H=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,V={pending:!1,data:null,method:null,action:null},$=[],W=-1;function Q(e){return{current:e}}function q(e){0>W||(e.current=$[W],$[W]=null,W--)}function Y(e,t){W++,$[W]=e.current,e.current=t}var K=Q(null),X=Q(null),G=Q(null),Z=Q(null);function J(e,t){switch(Y(G,t),Y(X,e),Y(K,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Xc(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Gc(e=Xc(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}q(K),Y(K,t)}function ee(){q(K),q(X),q(G)}function te(e){null!==e.memoizedState&&Y(Z,e);var t=K.current,n=Gc(t,e.type);t!==n&&(Y(X,e),Y(K,n))}function ne(e){X.current===e&&(q(K),q(X)),Z.current===e&&(q(Z),Ff._currentValue=V)}var re=Object.prototype.hasOwnProperty,le=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,oe=r.unstable_shouldYield,ie=r.unstable_requestPaint,ue=r.unstable_now,se=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,fe=r.unstable_UserBlockingPriority,de=r.unstable_NormalPriority,pe=r.unstable_LowPriority,me=r.unstable_IdlePriority,he=r.log,ge=r.unstable_setDisableYieldValue,ye=null,ve=null;function be(e){if("function"==typeof he&&ge(e),ve&&"function"==typeof ve.setStrictMode)try{ve.setStrictMode(ye,e)}catch(e){}}var ke=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(we(e)/Se|0)|0},we=Math.log,Se=Math.LN2,Ee=128,Ae=4194304;function Ce(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function xe(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,l=e.suspendedLanes,a=e.pingedLanes,o=e.warmLanes;e=0!==e.finishedLanes;var i=134217727&n;return 0!==i?0!=(n=i&~l)?r=Ce(n):0!=(a&=i)?r=Ce(a):e||0!=(o=i&~o)&&(r=Ce(o)):0!=(i=n&~l)?r=Ce(i):0!==a?r=Ce(a):e||0!=(o=n&~o)&&(r=Ce(o)),0===r?0:0===t||t===r||t&l||!((l=r&-r)>=(o=t&-t)||32===l&&4194176&o)?r:t}function _e(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Pe(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ze(){var e=Ee;return!(4194176&(Ee<<=1))&&(Ee=128),e}function Ne(){var e=Ae;return!(62914560&(Ae<<=1))&&(Ae=4194304),e}function Te(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Le(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Oe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-ke(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Ie(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ke(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}function Re(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function De(){var e=H.p;return 0!==e?e:void 0===(e=window.event)?32:Zf(e.type)}var Fe=Math.random().toString(36).slice(2),Me="__reactFiber$"+Fe,Be="__reactProps$"+Fe,Ue="__reactContainer$"+Fe,je="__reactEvents$"+Fe,He="__reactListeners$"+Fe,Ve="__reactHandles$"+Fe,$e="__reactResources$"+Fe,We="__reactMarker$"+Fe;function Qe(e){delete e[Me],delete e[Be],delete e[je],delete e[He],delete e[Ve]}function qe(e){var t=e[Me];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ue]||n[Me]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sf(e);null!==e;){if(n=e[Me])return n;e=sf(e)}return t}n=(e=n).parentNode}return null}function Ye(e){if(e=e[Me]||e[Ue]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ke(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Xe(e){var t=e[$e];return t||(t=e[$e]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ge(e){e[We]=!0}var Ze=new Set,Je={};function et(e,t){tt(e,t),tt(e+"Capture",t)}function tt(e,t){for(Je[e]=t,e=0;e<t.length;e++)Ze.add(t[e])}var nt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),rt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),lt={},at={};function ot(e,t,n){if(l=t,re.call(at,l)||!re.call(lt,l)&&(rt.test(l)?at[l]=!0:(lt[l]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var l}function it(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function ut(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ft(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var l=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function pt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var mt=/[\n"\\]/g;function ht(e){return e.replace(mt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function gt(e,t,n,r,l,a,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?vt(e,o,st(t)):null!=n?vt(e,o,st(n)):null!=r&&e.removeAttribute("value"),null==l&&null!=a&&(e.defaultChecked=!!a),null!=l&&(e.checked=l&&"function"!=typeof l&&"symbol"!=typeof l),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+st(i):e.removeAttribute("name")}function yt(e,t,n,r,l,a,o,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:l)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function vt(e,t,n){"number"===t&&pt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function bt(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,l=0;l<e.length;l++){if(e[l].value===n)return e[l].selected=!0,void(r&&(e[l].defaultSelected=!0));null!==t||e[l].disabled||(t=e[l])}null!==t&&(t.selected=!0)}}function kt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(j(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function St(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Et=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function At(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||Et.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Ct(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var l in t)r=t[l],t.hasOwnProperty(l)&&n[l]!==r&&At(e,l,r)}else for(var a in t)t.hasOwnProperty(a)&&At(e,a,t[a])}function xt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _t=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Pt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function zt(e){return Pt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Nt=null;function Tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Lt=null,Ot=null;function It(e){var t=Ye(e);if(t&&(e=t.stateNode)){var n=e[Be]||null;e:switch(e=t.stateNode,t.type){case"input":if(gt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=r[Be]||null;if(!l)throw Error(o(90));gt(r,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":kt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&bt(e,!!n.multiple,t,!1)}}}var Rt=!1;function Dt(e,t,n){if(Rt)return e(t,n);Rt=!0;try{return e(t)}finally{if(Rt=!1,(null!==Lt||null!==Ot)&&(Ms(),Lt&&(t=Lt,e=Ot,Ot=Lt=null,It(t),e)))for(t=0;t<e.length;t++)It(e[t])}}function Ft(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Be]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Mt=!1;if(nt)try{var Bt={};Object.defineProperty(Bt,"passive",{get:function(){Mt=!0}}),window.addEventListener("test",Bt,Bt),window.removeEventListener("test",Bt,Bt)}catch(e){Mt=!1}var Ut=null,jt=null,Ht=null;function Vt(){if(Ht)return Ht;var e,t,n=jt,r=n.length,l="value"in Ut?Ut.value:Ut.textContent,a=l.length;for(e=0;e<r&&n[e]===l[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===l[a-t];t++);return Ht=l.slice(e,1<t?1-t:void 0)}function $t(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Wt(){return!0}function Qt(){return!1}function qt(e){function t(t,n,r,l,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?Wt:Qt,this.isPropagationStopped=Qt,this}return T(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wt)},persist:function(){},isPersistent:Wt}),t}var Yt,Kt,Xt,Gt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zt=qt(Gt),Jt=T({},Gt,{view:0,detail:0}),en=qt(Jt),tn=T({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Yt=e.screenX-Xt.screenX,Kt=e.screenY-Xt.screenY):Kt=Yt=0,Xt=e),Yt)},movementY:function(e){return"movementY"in e?e.movementY:Kt}}),nn=qt(tn),rn=qt(T({},tn,{dataTransfer:0})),ln=qt(T({},Jt,{relatedTarget:0})),an=qt(T({},Gt,{animationName:0,elapsedTime:0,pseudoElement:0})),on=qt(T({},Gt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),un=qt(T({},Gt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=fn[e])&&!!t[e]}function pn(){return dn}var mn=qt(T({},Jt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=$t(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pn,charCode:function(e){return"keypress"===e.type?$t(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?$t(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),hn=qt(T({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=qt(T({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pn})),yn=qt(T({},Gt,{propertyName:0,elapsedTime:0,pseudoElement:0})),vn=qt(T({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bn=qt(T({},Gt,{newState:0,oldState:0})),kn=[9,13,27,32],wn=nt&&"CompositionEvent"in window,Sn=null;nt&&"documentMode"in document&&(Sn=document.documentMode);var En=nt&&"TextEvent"in window&&!Sn,An=nt&&(!wn||Sn&&8<Sn&&11>=Sn),Cn=String.fromCharCode(32),xn=!1;function _n(e,t){switch(e){case"keyup":return-1!==kn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Nn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Tn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Nn[e.type]:"textarea"===t}function Ln(e,t,n,r){Lt?Ot?Ot.push(r):Ot=[r]:Lt=r,0<(t=Dc(t,"onChange")).length&&(n=new Zt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var On=null,In=null;function Rn(e){Pc(e,0)}function Dn(e){if(dt(Ke(e)))return e}function Fn(e,t){if("change"===e)return t}var Mn=!1;if(nt){var Bn;if(nt){var Un="oninput"in document;if(!Un){var jn=document.createElement("div");jn.setAttribute("oninput","return;"),Un="function"==typeof jn.oninput}Bn=Un}else Bn=!1;Mn=Bn&&(!document.documentMode||9<document.documentMode)}function Hn(){On&&(On.detachEvent("onpropertychange",Vn),In=On=null)}function Vn(e){if("value"===e.propertyName&&Dn(In)){var t=[];Ln(t,In,e,Tt(e)),Dt(Rn,t)}}function $n(e,t,n){"focusin"===e?(Hn(),In=n,(On=t).attachEvent("onpropertychange",Vn)):"focusout"===e&&Hn()}function Wn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dn(In)}function Qn(e,t){if("click"===e)return Dn(t)}function qn(e,t){if("input"===e||"change"===e)return Dn(t)}var Yn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Kn(e,t){if(Yn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!re.call(t,l)||!Yn(e[l],t[l]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Zn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Zn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=pt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=pt((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function tr(e,t){var n=Jn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Zn(t.ownerDocument.documentElement,t)){if(null!==r&&er(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var l=t.textContent.length,a=Math.min(r.start,l);r=void 0===r.end?a:Math.min(r.end,l),!n.extend&&a>r&&(l=r,r=a,a=l),l=Gn(t,a);var o=Gn(t,r);l&&o&&(1!==n.rangeCount||n.anchorNode!==l.node||n.anchorOffset!==l.offset||n.focusNode!==o.node||n.focusOffset!==o.offset)&&((e=e.createRange()).setStart(l.node,l.offset),n.removeAllRanges(),a>r?(n.addRange(e),n.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var nr=nt&&"documentMode"in document&&11>=document.documentMode,rr=null,lr=null,ar=null,or=!1;function ir(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;or||null==rr||rr!==pt(r)||(r="selectionStart"in(r=rr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Kn(ar,r)||(ar=r,0<(r=Dc(lr,"onSelect")).length&&(t=new Zt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=rr)))}function ur(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:ur("Animation","AnimationEnd"),animationiteration:ur("Animation","AnimationIteration"),animationstart:ur("Animation","AnimationStart"),transitionrun:ur("Transition","TransitionRun"),transitionstart:ur("Transition","TransitionStart"),transitioncancel:ur("Transition","TransitionCancel"),transitionend:ur("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in fr)return cr[e]=n[t];return e}nt&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var pr=dr("animationend"),mr=dr("animationiteration"),hr=dr("animationstart"),gr=dr("transitionrun"),yr=dr("transitionstart"),vr=dr("transitioncancel"),br=dr("transitionend"),kr=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function Sr(e,t){kr.set(e,t),et(t,[e])}var Er=[],Ar=0,Cr=0;function xr(){for(var e=Ar,t=Cr=Ar=0;t<e;){var n=Er[t];Er[t++]=null;var r=Er[t];Er[t++]=null;var l=Er[t];Er[t++]=null;var a=Er[t];if(Er[t++]=null,null!==r&&null!==l){var o=r.pending;null===o?l.next=l:(l.next=o.next,o.next=l),r.pending=l}0!==a&&Nr(n,l,a)}}function _r(e,t,n,r){Er[Ar++]=e,Er[Ar++]=t,Er[Ar++]=n,Er[Ar++]=r,Cr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Pr(e,t,n,r){return _r(e,t,n,r),Tr(e)}function zr(e,t){return _r(e,null,null,t),Tr(e)}function Nr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var l=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(l=!0)),e=a,a=a.return;l&&null!==t&&3===e.tag&&(a=e.stateNode,l=31-ke(n),null===(e=(a=a.hiddenUpdates)[l])?a[l]=[t]:e.push(t),t.lane=536870912|n)}function Tr(e){if(50<Ps)throw Ps=0,zs=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Lr={},Or=new WeakMap;function Ir(e,t){if("object"==typeof e&&null!==e){var n=Or.get(e);return void 0!==n?n:(t={value:e,source:t,stack:D(t)},Or.set(e,t),t)}return{value:e,source:t,stack:D(t)}}var Rr=[],Dr=0,Fr=null,Mr=0,Br=[],Ur=0,jr=null,Hr=1,Vr="";function $r(e,t){Rr[Dr++]=Mr,Rr[Dr++]=Fr,Fr=e,Mr=t}function Wr(e,t,n){Br[Ur++]=Hr,Br[Ur++]=Vr,Br[Ur++]=jr,jr=e;var r=Hr;e=Vr;var l=32-ke(r)-1;r&=~(1<<l),n+=1;var a=32-ke(t)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,Hr=1<<32-ke(t)+l|n<<l|r,Vr=a+e}else Hr=1<<a|n<<l|r,Vr=e}function Qr(e){null!==e.return&&($r(e,1),Wr(e,1,0))}function qr(e){for(;e===Fr;)Fr=Rr[--Dr],Rr[Dr]=null,Mr=Rr[--Dr],Rr[Dr]=null;for(;e===jr;)jr=Br[--Ur],Br[Ur]=null,Vr=Br[--Ur],Br[Ur]=null,Hr=Br[--Ur],Br[Ur]=null}var Yr=null,Kr=null,Xr=!1,Gr=null,Zr=!1,Jr=Error(o(519));function el(e){throw al(Ir(Error(o(418,"")),e)),Jr}function tl(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Me]=e,t[Be]=r,n){case"dialog":zc("cancel",t),zc("close",t);break;case"iframe":case"object":case"embed":zc("load",t);break;case"video":case"audio":for(n=0;n<xc.length;n++)zc(xc[n],t);break;case"source":zc("error",t);break;case"img":case"image":case"link":zc("error",t),zc("load",t);break;case"details":zc("toggle",t);break;case"input":zc("invalid",t),yt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ft(t);break;case"select":zc("invalid",t);break;case"textarea":zc("invalid",t),wt(t,r.value,r.defaultValue,r.children),ft(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Hc(t.textContent,n)?(null!=r.popover&&(zc("beforetoggle",t),zc("toggle",t)),null!=r.onScroll&&zc("scroll",t),null!=r.onScrollEnd&&zc("scrollend",t),null!=r.onClick&&(t.onclick=Vc),t=!0):t=!1,t||el(e)}function nl(e){for(Yr=e.return;Yr;)switch(Yr.tag){case 3:case 27:return void(Zr=!0);case 5:case 13:return void(Zr=!1);default:Yr=Yr.return}}function rl(e){if(e!==Yr)return!1;if(!Xr)return nl(e),Xr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Zc(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Kr&&el(e),nl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Kr=uf(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Kr=null}}else Kr=Yr?uf(e.stateNode.nextSibling):null;return!0}function ll(){Kr=Yr=null,Xr=!1}function al(e){null===Gr?Gr=[e]:Gr.push(e)}var ol=Error(o(460)),il=Error(o(474)),ul={then:function(){}};function sl(e){return"fulfilled"===(e=e.status)||"rejected"===e}function cl(){}function fl(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(cl,cl),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===ol)throw Error(o(483));throw e;default:if("string"==typeof t.status)t.then(cl,cl);else{if(null!==(e=ts)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===ol)throw Error(o(483));throw e}throw dl=t,ol}}var dl=null;function pl(){if(null===dl)throw Error(o(459));var e=dl;return dl=null,e}var ml=null,hl=0;function gl(e){var t=hl;return hl+=1,null===ml&&(ml=[]),fl(ml,e,t)}function yl(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function vl(e,t){if(t.$$typeof===u)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bl(e){return(0,e._init)(e._payload)}function kl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function l(e,t){return(e=Fu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Hu(n,e.mode,r)).return=e,t):((t=l(t,n)).return=e,t)}function d(e,t,n,r){var a=n.type;return a===f?m(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===w&&bl(a)===t.type)?(yl(t=l(t,n.props),n),t.return=e,t):(yl(t=Bu(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vu(n,e.mode,r)).return=e,t):((t=l(t,n.children||[])).return=e,t)}function m(e,t,n,r,a){return null===t||7!==t.tag?((t=Uu(n,e.mode,r,a)).return=e,t):((t=l(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Hu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case s:return yl(n=Bu(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case c:return(t=Vu(t,e.mode,n)).return=e,t;case w:return h(e,t=(0,t._init)(t._payload),n)}if(j(t)||C(t))return(t=Uu(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return h(e,gl(t),n);if(t.$$typeof===g)return h(e,xi(e,t),n);vl(e,t)}return null}function y(e,t,n,r){var l=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==l?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case s:return n.key===l?d(e,t,n,r):null;case c:return n.key===l?p(e,t,n,r):null;case w:return y(e,t,n=(l=n._init)(n._payload),r)}if(j(n)||C(n))return null!==l?null:m(e,t,n,r,null);if("function"==typeof n.then)return y(e,t,gl(n),r);if(n.$$typeof===g)return y(e,t,xi(e,n),r);vl(e,n)}return null}function v(e,t,n,r,l){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case s:return d(t,e=e.get(null===r.key?n:r.key)||null,r,l);case c:return p(t,e=e.get(null===r.key?n:r.key)||null,r,l);case w:return v(e,t,n,r=(0,r._init)(r._payload),l)}if(j(r)||C(r))return m(t,e=e.get(n)||null,r,l,null);if("function"==typeof r.then)return v(e,t,n,gl(r),l);if(r.$$typeof===g)return v(e,t,n,xi(t,r),l);vl(t,r)}return null}function b(u,d,p,m){if("object"==typeof p&&null!==p&&p.type===f&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case s:e:{for(var k=p.key;null!==d;){if(d.key===k){if((k=p.type)===f){if(7===d.tag){n(u,d.sibling),(m=l(d,p.props.children)).return=u,u=m;break e}}else if(d.elementType===k||"object"==typeof k&&null!==k&&k.$$typeof===w&&bl(k)===d.type){n(u,d.sibling),yl(m=l(d,p.props),p),m.return=u,u=m;break e}n(u,d);break}t(u,d),d=d.sibling}p.type===f?((m=Uu(p.props.children,u.mode,m,p.key)).return=u,u=m):(yl(m=Bu(p.type,p.key,p.props,null,u.mode,m),p),m.return=u,u=m)}return i(u);case c:e:{for(k=p.key;null!==d;){if(d.key===k){if(4===d.tag&&d.stateNode.containerInfo===p.containerInfo&&d.stateNode.implementation===p.implementation){n(u,d.sibling),(m=l(d,p.children||[])).return=u,u=m;break e}n(u,d);break}t(u,d),d=d.sibling}(m=Vu(p,u.mode,m)).return=u,u=m}return i(u);case w:return b(u,d,p=(k=p._init)(p._payload),m)}if(j(p))return function(l,o,i,u){for(var s=null,c=null,f=o,d=o=0,p=null;null!==f&&d<i.length;d++){f.index>d?(p=f,f=null):p=f.sibling;var m=y(l,f,i[d],u);if(null===m){null===f&&(f=p);break}e&&f&&null===m.alternate&&t(l,f),o=a(m,o,d),null===c?s=m:c.sibling=m,c=m,f=p}if(d===i.length)return n(l,f),Xr&&$r(l,d),s;if(null===f){for(;d<i.length;d++)null!==(f=h(l,i[d],u))&&(o=a(f,o,d),null===c?s=f:c.sibling=f,c=f);return Xr&&$r(l,d),s}for(f=r(f);d<i.length;d++)null!==(p=v(f,l,d,i[d],u))&&(e&&null!==p.alternate&&f.delete(null===p.key?d:p.key),o=a(p,o,d),null===c?s=p:c.sibling=p,c=p);return e&&f.forEach((function(e){return t(l,e)})),Xr&&$r(l,d),s}(u,d,p,m);if(C(p)){if("function"!=typeof(k=C(p)))throw Error(o(150));return function(l,i,u,s){if(null==u)throw Error(o(151));for(var c=null,f=null,d=i,p=i=0,m=null,g=u.next();null!==d&&!g.done;p++,g=u.next()){d.index>p?(m=d,d=null):m=d.sibling;var b=y(l,d,g.value,s);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(l,d),i=a(b,i,p),null===f?c=b:f.sibling=b,f=b,d=m}if(g.done)return n(l,d),Xr&&$r(l,p),c;if(null===d){for(;!g.done;p++,g=u.next())null!==(g=h(l,g.value,s))&&(i=a(g,i,p),null===f?c=g:f.sibling=g,f=g);return Xr&&$r(l,p),c}for(d=r(d);!g.done;p++,g=u.next())null!==(g=v(d,l,p,g.value,s))&&(e&&null!==g.alternate&&d.delete(null===g.key?p:g.key),i=a(g,i,p),null===f?c=g:f.sibling=g,f=g);return e&&d.forEach((function(e){return t(l,e)})),Xr&&$r(l,p),c}(u,d,p=k.call(p),m)}if("function"==typeof p.then)return b(u,d,gl(p),m);if(p.$$typeof===g)return b(u,d,xi(u,p),m);vl(u,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==d&&6===d.tag?(n(u,d.sibling),(m=l(d,p)).return=u,u=m):(n(u,d),(m=Hu(p,u.mode,m)).return=u,u=m),i(u)):n(u,d)}return function(e,t,n,r){try{hl=0;var l=b(e,t,n,r);return ml=null,l}catch(t){if(t===ol)throw t;var a=Ru(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var wl=kl(!0),Sl=kl(!1),El=Q(null),Al=Q(0);function Cl(e,t){Y(Al,e=ss),Y(El,t),ss=e|t.baseLanes}function xl(){Y(Al,ss),Y(El,El.current)}function _l(){ss=Al.current,q(El),q(Al)}var Pl=Q(null),zl=null;function Nl(e){var t=e.alternate;Y(Il,1&Il.current),Y(Pl,e),null===zl&&(null===t||null!==El.current||null!==t.memoizedState)&&(zl=e)}function Tl(e){if(22===e.tag){if(Y(Il,Il.current),Y(Pl,e),null===zl){var t=e.alternate;null!==t&&null!==t.memoizedState&&(zl=e)}}else Ll()}function Ll(){Y(Il,Il.current),Y(Pl,Pl.current)}function Ol(e){q(Pl),zl===e&&(zl=null),q(Il)}var Il=Q(0);function Rl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Dl="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Fl=r.unstable_scheduleCallback,Ml=r.unstable_NormalPriority,Bl={$$typeof:g,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Ul(){return{controller:new Dl,data:new Map,refCount:0}}function jl(e){e.refCount--,0===e.refCount&&Fl(Ml,(function(){e.controller.abort()}))}var Hl=null,Vl=0,$l=0,Wl=null;function Ql(){if(0==--Vl&&null!==Hl){null!==Wl&&(Wl.status="fulfilled");var e=Hl;Hl=null,$l=0,Wl=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var ql=N.S;N.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Hl){var n=Hl=[];Vl=0,$l=wc(),Wl={status:"pending",value:void 0,then:function(e){n.push(e)}}}Vl++,t.then(Ql,Ql)}(0,t),null!==ql&&ql(e,t)};var Yl=Q(null);function Kl(){var e=Yl.current;return null!==e?e:ts.pooledCache}function Xl(e,t){Y(Yl,null===t?Yl.current:t.pool)}function Gl(){var e=Kl();return null===e?null:{parent:Bl._currentValue,pool:e}}var Zl=0,Jl=null,ea=null,ta=null,na=!1,ra=!1,la=!1,aa=0,oa=0,ia=null,ua=0;function sa(){throw Error(o(321))}function ca(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yn(e[n],t[n]))return!1;return!0}function fa(e,t,n,r,l,a){return Zl=a,Jl=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,N.H=null===e||null===e.memoizedState?xo:_o,la=!1,a=n(r,l),la=!1,ra&&(a=pa(t,n,r,l)),da(e),a}function da(e){N.H=Co;var t=null!==ea&&null!==ea.next;if(Zl=0,ta=ea=Jl=null,na=!1,oa=0,ia=null,t)throw Error(o(300));null===e||$o||null!==(e=e.dependencies)&&Ei(e)&&($o=!0)}function pa(e,t,n,r){Jl=e;var l=0;do{if(ra&&(ia=null),oa=0,ra=!1,25<=l)throw Error(o(301));if(l+=1,ta=ea=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}N.H=Po,a=t(n,r)}while(ra);return a}function ma(){var e=N.H,t=e.useState()[0];return t="function"==typeof t.then?ka(t):t,e=e.useState()[0],(null!==ea?ea.memoizedState:null)!==e&&(Jl.flags|=1024),t}function ha(){var e=0!==aa;return aa=0,e}function ga(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function ya(e){if(na){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}na=!1}Zl=0,ta=ea=Jl=null,ra=!1,oa=aa=0,ia=null}function va(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Jl.memoizedState=ta=e:ta=ta.next=e,ta}function ba(){if(null===ea){var e=Jl.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Jl.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e){if(null===Jl.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Jl.memoizedState=ta=e:ta=ta.next=e}return ta}function ka(e){var t=oa;return oa+=1,null===ia&&(ia=[]),e=fl(ia,e,t),t=Jl,null===(null===ta?t.memoizedState:ta.next)&&(t=t.alternate,N.H=null===t||null===t.memoizedState?xo:_o),e}function wa(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return ka(e);if(e.$$typeof===g)return Ci(e)}throw Error(o(438,String(e)))}function Sa(e){var t=null,n=Jl.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Jl.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Jl.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=E;return t.index++,n}function Ea(e,t){return"function"==typeof t?t(e):t}function Aa(e){return Ca(ba(),ea,e)}function Ca(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var l=e.baseQueue,a=r.pending;if(null!==a){if(null!==l){var i=l.next;l.next=a.next,a.next=i}t.baseQueue=l=a,r.pending=null}if(a=e.baseState,null===l)e.memoizedState=a;else{var u=i=null,s=null,c=t=l.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(rs&d)===d:(Zl&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===$l&&(f=!0);else{if((Zl&p)===p){c=c.next,p===$l&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=a):s=s.next=d,Jl.lanes|=p,fs|=p}d=c.action,la&&n(a,d),a=c.hasEagerState?c.eagerState:n(a,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=a):s=s.next=p,Jl.lanes|=d,fs|=d;c=c.next}while(null!==c&&c!==t);if(null===s?i=a:s.next=u,!Yn(a,e.memoizedState)&&($o=!0,f&&null!==(n=Wl)))throw n;e.memoizedState=a,e.baseState=i,e.baseQueue=s,r.lastRenderedState=a}return null===l&&(r.lanes=0),[e.memoizedState,r.dispatch]}function xa(e){var t=ba(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,a=t.memoizedState;if(null!==l){n.pending=null;var i=l=l.next;do{a=e(a,i.action),i=i.next}while(i!==l);Yn(a,t.memoizedState)||($o=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function _a(e,t,n){var r=Jl,l=ba(),a=Xr;if(a){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!Yn((ea||l).memoizedState,n);if(i&&(l.memoizedState=n,$o=!0),l=l.queue,Za(Na.bind(null,r,l,e),[e]),l.getSnapshot!==t||i||null!==ta&&1&ta.memoizedState.tag){if(r.flags|=2048,qa(9,za.bind(null,r,l,n,t),{destroy:void 0},null),null===ts)throw Error(o(349));a||60&Zl||Pa(r,t,n)}return n}function Pa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Jl.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Jl.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function za(e,t,n,r){t.value=n,t.getSnapshot=r,Ta(t)&&La(e)}function Na(e,t,n){return n((function(){Ta(t)&&La(e)}))}function Ta(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Yn(e,n)}catch(e){return!0}}function La(e){var t=zr(e,2);null!==t&&Ls(t,0,2)}function Oa(e){var t=va();if("function"==typeof e){var n=e;if(e=n(),la){be(!0);try{n()}finally{be(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ea,lastRenderedState:e},t}function Ia(e,t,n,r){return e.baseState=n,Ca(e,ea,"function"==typeof r?r:Ea)}function Ra(e,t,n,r,l){if(So(e))throw Error(o(485));if(null!==(e=t.action)){var a={payload:l,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==N.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,Da(t,a)):(a.next=n.next,t.pending=n.next=a)}}function Da(e,t){var n=t.action,r=t.payload,l=e.state;if(t.isTransition){var a=N.T,o={};N.T=o;try{var i=n(l,r),u=N.S;null!==u&&u(o,i),Fa(e,t,i)}catch(n){Ba(e,t,n)}finally{N.T=a}}else try{Fa(e,t,a=n(l,r))}catch(n){Ba(e,t,n)}}function Fa(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Ma(e,t,n)}),(function(n){return Ba(e,t,n)})):Ma(e,t,n)}function Ma(e,t,n){t.status="fulfilled",t.value=n,Ua(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Da(e,n)))}function Ba(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Ua(t),t=t.next}while(t!==r)}e.action=null}function Ua(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function ja(e,t){return t}function Ha(e,t){if(Xr){var n=ts.formState;if(null!==n){e:{var r=Jl;if(Xr){if(Kr){t:{for(var l=Kr,a=Zr;8!==l.nodeType;){if(!a){l=null;break t}if(null===(l=uf(l.nextSibling))){l=null;break t}}l="F!"===(a=l.data)||"F"===a?l:null}if(l){Kr=uf(l.nextSibling),r="F!"===l.data;break e}}el(r)}r=!1}r&&(t=n[0])}}return(n=va()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ja,lastRenderedState:t},n.queue=r,n=bo.bind(null,Jl,r),r.dispatch=n,r=Oa(!1),a=wo.bind(null,Jl,!1,r.queue),l={state:t,dispatch:null,action:e,pending:null},(r=va()).queue=l,n=Ra.bind(null,Jl,l,a,n),l.dispatch=n,r.memoizedState=e,[t,n,!1]}function Va(e){return $a(ba(),ea,e)}function $a(e,t,n){t=Ca(e,t,ja)[0],e=Aa(Ea)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?ka(t):t;var r=ba(),l=r.queue,a=l.dispatch;return n!==r.memoizedState&&(Jl.flags|=2048,qa(9,Wa.bind(null,l,n),{destroy:void 0},null)),[t,a,e]}function Wa(e,t){e.action=t}function Qa(e){var t=ba(),n=ea;if(null!==n)return $a(t,n,e);ba(),t=t.memoizedState;var r=(n=ba()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function qa(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Jl.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Jl.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ya(){return ba().memoizedState}function Ka(e,t,n,r){var l=va();Jl.flags|=e,l.memoizedState=qa(1|t,n,{destroy:void 0},void 0===r?null:r)}function Xa(e,t,n,r){var l=ba();r=void 0===r?null:r;var a=l.memoizedState.inst;null!==ea&&null!==r&&ca(r,ea.memoizedState.deps)?l.memoizedState=qa(t,n,a,r):(Jl.flags|=e,l.memoizedState=qa(1|t,n,a,r))}function Ga(e,t){Ka(8390656,8,e,t)}function Za(e,t){Xa(2048,8,e,t)}function Ja(e,t){return Xa(4,2,e,t)}function eo(e,t){return Xa(4,4,e,t)}function to(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function no(e,t,n){n=null!=n?n.concat([e]):null,Xa(4,4,to.bind(null,t,e),n)}function ro(){}function lo(e,t){var n=ba();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&ca(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ao(e,t){var n=ba();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&ca(t,r[1]))return r[0];if(r=e(),la){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r}function oo(e,t,n){return void 0===n||1073741824&Zl?e.memoizedState=t:(e.memoizedState=n,e=Ts(),Jl.lanes|=e,fs|=e,n)}function io(e,t,n,r){return Yn(n,t)?n:null!==El.current?(e=oo(e,n,r),Yn(e,t)||($o=!0),e):42&Zl?(e=Ts(),Jl.lanes|=e,fs|=e,t):($o=!0,e.memoizedState=n)}function uo(e,t,n,r,l){var a=H.p;H.p=0!==a&&8>a?a:8;var o,i,u,s=N.T,c={};N.T=c,wo(e,!1,t,n);try{var f=l(),d=N.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?ko(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Ns()):ko(e,t,r,Ns())}catch(n){ko(e,t,{then:function(){},status:"rejected",reason:n},Ns())}finally{H.p=a,N.T=s}}function so(){}function co(e,t,n,r){if(5!==e.tag)throw Error(o(476));var l=fo(e).queue;uo(e,l,t,V,null===n?so:function(){return po(e),n(r)})}function fo(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:V,baseState:V,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ea,lastRenderedState:V},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ea,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function po(e){ko(e,fo(e).next.queue,{},Ns())}function mo(){return Ci(Ff)}function ho(){return ba().memoizedState}function go(){return ba().memoizedState}function yo(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Ns(),r=Li(t,e=Ti(n),n);return null!==r&&(Ls(r,0,n),Oi(r,t,n)),t={cache:Ul()},void(e.payload=t)}t=t.return}}function vo(e,t,n){var r=Ns();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},So(e)?Eo(t,n):null!==(n=Pr(e,t,n,r))&&(Ls(n,0,r),Ao(n,t,r))}function bo(e,t,n){ko(e,t,n,Ns())}function ko(e,t,n,r){var l={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(So(e))Eo(t,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=a(o,n);if(l.hasEagerState=!0,l.eagerState=i,Yn(i,o))return _r(e,t,l,0),null===ts&&xr(),!1}catch(e){}if(null!==(n=Pr(e,t,l,r)))return Ls(n,0,r),Ao(n,t,r),!0}return!1}function wo(e,t,n,r){if(r={lane:2,revertLane:wc(),action:r,hasEagerState:!1,eagerState:null,next:null},So(e)){if(t)throw Error(o(479))}else null!==(t=Pr(e,n,r,2))&&Ls(t,0,2)}function So(e){var t=e.alternate;return e===Jl||null!==t&&t===Jl}function Eo(e,t){ra=na=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ao(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Ie(e,n)}}var Co={readContext:Ci,use:wa,useCallback:sa,useContext:sa,useEffect:sa,useImperativeHandle:sa,useLayoutEffect:sa,useInsertionEffect:sa,useMemo:sa,useReducer:sa,useRef:sa,useState:sa,useDebugValue:sa,useDeferredValue:sa,useTransition:sa,useSyncExternalStore:sa,useId:sa};Co.useCacheRefresh=sa,Co.useMemoCache=sa,Co.useHostTransitionStatus=sa,Co.useFormState=sa,Co.useActionState=sa,Co.useOptimistic=sa;var xo={readContext:Ci,use:wa,useCallback:function(e,t){return va().memoizedState=[e,void 0===t?null:t],e},useContext:Ci,useEffect:Ga,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Ka(4194308,4,to.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ka(4194308,4,e,t)},useInsertionEffect:function(e,t){Ka(4,2,e,t)},useMemo:function(e,t){var n=va();t=void 0===t?null:t;var r=e();if(la){be(!0);try{e()}finally{be(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=va();if(void 0!==n){var l=n(t);if(la){be(!0);try{n(t)}finally{be(!1)}}}else l=t;return r.memoizedState=r.baseState=l,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:l},r.queue=e,e=e.dispatch=vo.bind(null,Jl,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},va().memoizedState=e},useState:function(e){var t=(e=Oa(e)).queue,n=bo.bind(null,Jl,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:ro,useDeferredValue:function(e,t){return oo(va(),e,t)},useTransition:function(){var e=Oa(!1);return e=uo.bind(null,Jl,e.queue,!0,!1),va().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Jl,l=va();if(Xr){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===ts)throw Error(o(349));60&rs||Pa(r,t,n)}l.memoizedState=n;var a={value:n,getSnapshot:t};return l.queue=a,Ga(Na.bind(null,r,a,e),[e]),r.flags|=2048,qa(9,za.bind(null,r,a,n,t),{destroy:void 0},null),n},useId:function(){var e=va(),t=ts.identifierPrefix;if(Xr){var n=Vr;t=":"+t+"R"+(n=(Hr&~(1<<32-ke(Hr)-1)).toString(32)+n),0<(n=aa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ua++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return va().memoizedState=yo.bind(null,Jl)}};xo.useMemoCache=Sa,xo.useHostTransitionStatus=mo,xo.useFormState=Ha,xo.useActionState=Ha,xo.useOptimistic=function(e){var t=va();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=wo.bind(null,Jl,!0,n),n.dispatch=t,[e,t]};var _o={readContext:Ci,use:wa,useCallback:lo,useContext:Ci,useEffect:Za,useImperativeHandle:no,useInsertionEffect:Ja,useLayoutEffect:eo,useMemo:ao,useReducer:Aa,useRef:Ya,useState:function(){return Aa(Ea)},useDebugValue:ro,useDeferredValue:function(e,t){return io(ba(),ea.memoizedState,e,t)},useTransition:function(){var e=Aa(Ea)[0],t=ba().memoizedState;return["boolean"==typeof e?e:ka(e),t]},useSyncExternalStore:_a,useId:ho};_o.useCacheRefresh=go,_o.useMemoCache=Sa,_o.useHostTransitionStatus=mo,_o.useFormState=Va,_o.useActionState=Va,_o.useOptimistic=function(e,t){return Ia(ba(),0,e,t)};var Po={readContext:Ci,use:wa,useCallback:lo,useContext:Ci,useEffect:Za,useImperativeHandle:no,useInsertionEffect:Ja,useLayoutEffect:eo,useMemo:ao,useReducer:xa,useRef:Ya,useState:function(){return xa(Ea)},useDebugValue:ro,useDeferredValue:function(e,t){var n=ba();return null===ea?oo(n,e,t):io(n,ea.memoizedState,e,t)},useTransition:function(){var e=xa(Ea)[0],t=ba().memoizedState;return["boolean"==typeof e?e:ka(e),t]},useSyncExternalStore:_a,useId:ho};function zo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:T({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Po.useCacheRefresh=go,Po.useMemoCache=Sa,Po.useHostTransitionStatus=mo,Po.useFormState=Qa,Po.useActionState=Qa,Po.useOptimistic=function(e,t){var n=ba();return null!==ea?Ia(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var No={isMounted:function(e){return!!(e=e._reactInternals)&&F(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ns(),l=Ti(r);l.payload=t,null!=n&&(l.callback=n),null!==(t=Li(e,l,r))&&(Ls(t,0,r),Oi(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ns(),l=Ti(r);l.tag=1,l.payload=t,null!=n&&(l.callback=n),null!==(t=Li(e,l,r))&&(Ls(t,0,r),Oi(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ns(),r=Ti(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Li(e,r,n))&&(Ls(t,0,n),Oi(t,e,n))}};function To(e,t,n,r,l,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&Kn(n,r)&&Kn(l,a))}function Lo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&No.enqueueReplaceState(t,t.state,null)}function Oo(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var l in n===t&&(n=T({},n)),e)void 0===n[l]&&(n[l]=e[l]);return n}var Io="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ro(e){Io(e)}function Do(e){console.error(e)}function Fo(e){Io(e)}function Mo(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Bo(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Uo(e,t,n){return(n=Ti(n)).tag=3,n.payload={element:null},n.callback=function(){Mo(e,t)},n}function jo(e){return(e=Ti(e)).tag=3,e}function Ho(e,t,n,r){var l=n.type.getDerivedStateFromError;if("function"==typeof l){var a=r.value;e.payload=function(){return l(a)},e.callback=function(){Bo(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){Bo(t,n,r),"function"!=typeof l&&(null===Ss?Ss=new Set([this]):Ss.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Vo=Error(o(461)),$o=!1;function Wo(e,t,n,r){t.child=null===e?Sl(t,null,n,r):wl(t,e.child,n,r)}function Qo(e,t,n,r,l){n=n.render;var a=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return Ai(t),r=fa(e,t,n,o,a,l),i=ha(),null===e||$o?(Xr&&i&&Qr(t),t.flags|=1,Wo(e,t,r,l),t.child):(ga(e,t,l),di(e,t,l))}function qo(e,t,n,r,l){if(null===e){var a=n.type;return"function"!=typeof a||Du(a)||void 0!==a.defaultProps||null!==n.compare?((e=Bu(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Yo(e,t,a,r,l))}if(a=e.child,!pi(e,l)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:Kn)(o,r)&&e.ref===t.ref)return di(e,t,l)}return t.flags|=1,(e=Fu(a,r)).ref=t.ref,e.return=t,t.child=e}function Yo(e,t,n,r,l){if(null!==e){var a=e.memoizedProps;if(Kn(a,r)&&e.ref===t.ref){if($o=!1,t.pendingProps=r=a,!pi(e,l))return t.lanes=e.lanes,di(e,t,l);131072&e.flags&&($o=!0)}}return Zo(e,t,n,r,l)}function Ko(e,t,n){var r=t.pendingProps,l=r.children,a=!!(2&t.stateNode._pendingVisibility),o=null!==e?e.memoizedState:null;if(Go(e,t),"hidden"===r.mode||a){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(l=t.child=e.child,a=0;null!==l;)a=a|l.lanes|l.childLanes,l=l.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Xo(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Xo(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Xl(0,null!==o?o.cachePool:null),null!==o?Cl(t,o):xl(),Tl(t)}else null!==o?(Xl(0,o.cachePool),Cl(t,o),Ll(),t.memoizedState=null):(null!==e&&Xl(0,null),xl(),Ll());return Wo(e,t,l,n),t.child}function Xo(e,t,n,r){var l=Kl();return l=null===l?null:{parent:Bl._currentValue,pool:l},t.memoizedState={baseLanes:n,cachePool:l},null!==e&&Xl(0,null),xl(),Tl(t),null!==e&&Si(e,t,r,!0),null}function Go(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Zo(e,t,n,r,l){return Ai(t),n=fa(e,t,n,r,void 0,l),r=ha(),null===e||$o?(Xr&&r&&Qr(t),t.flags|=1,Wo(e,t,n,l),t.child):(ga(e,t,l),di(e,t,l))}function Jo(e,t,n,r,l,a){return Ai(t),t.updateQueue=null,n=pa(t,r,n,l),da(e),r=ha(),null===e||$o?(Xr&&r&&Qr(t),t.flags|=1,Wo(e,t,n,a),t.child):(ga(e,t,a),di(e,t,a))}function ei(e,t,n,r,l){if(Ai(t),null===t.stateNode){var a=Lr,o=n.contextType;"object"==typeof o&&null!==o&&(a=Ci(o)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=No,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},zi(t),o=n.contextType,a.context="object"==typeof o&&null!==o?Ci(o):Lr,a.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(zo(t,n,o,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(o=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),o!==a.state&&No.enqueueReplaceState(a,a.state,null),Fi(t,r,a,l),Di(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var i=t.memoizedProps,u=Oo(n,i);a.props=u;var s=a.context,c=n.contextType;o=Lr,"object"==typeof c&&null!==c&&(o=Ci(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i||s!==o)&&Lo(t,a,r,o),Pi=!1;var d=t.memoizedState;a.state=d,Fi(t,r,a,l),Di(),s=t.memoizedState,i||d!==s||Pi?("function"==typeof f&&(zo(t,n,f,r),s=t.memoizedState),(u=Pi||To(t,n,u,r,d,s,o))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=o,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ni(e,t),c=Oo(n,o=t.memoizedProps),a.props=c,f=t.pendingProps,d=a.context,s=n.contextType,u=Lr,"object"==typeof s&&null!==s&&(u=Ci(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(o!==f||d!==u)&&Lo(t,a,r,u),Pi=!1,d=t.memoizedState,a.state=d,Fi(t,r,a,l),Di();var p=t.memoizedState;o!==f||d!==p||Pi||null!==e&&null!==e.dependencies&&Ei(e.dependencies)?("function"==typeof i&&(zo(t,n,i,r),p=t.memoizedState),(c=Pi||To(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&Ei(e.dependencies))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Go(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=wl(t,e.child,null,l),t.child=wl(t,null,n,l)):Wo(e,t,n,l),t.memoizedState=a.state,e=t.child):e=di(e,t,l),e}function ti(e,t,n,r){return ll(),t.flags|=256,Wo(e,t,n,r),t.child}var ni={dehydrated:null,treeContext:null,retryLane:0};function ri(e){return{baseLanes:e,cachePool:Gl()}}function li(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=ms),e}function ai(e,t,n){var r,l=t.pendingProps,a=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&Il.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Xr){if(a?Nl(t):Ll(),Xr){var u,s=Kr;if(u=s){e:{for(u=s,s=Zr;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=uf(u.nextSibling))){s=null;break e}}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==jr?{id:Hr,overflow:Vr}:null,retryLane:536870912},(u=Ru(18,null,null,0)).stateNode=s,u.return=t,t.child=u,Yr=t,Kr=null,u=!0):u=!1}u||el(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return"$!"===s.data?t.lanes=16:t.lanes=536870912,null;Ol(t)}return s=l.children,l=l.fallback,a?(Ll(),s=ii({mode:"hidden",children:s},a=t.mode),l=Uu(l,a,n,null),s.return=t,l.return=t,s.sibling=l,t.child=s,(a=t.child).memoizedState=ri(n),a.childLanes=li(e,r,n),t.memoizedState=ni,l):(Nl(t),oi(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&t.flags?(Nl(t),t.flags&=-257,t=ui(e,t,n)):null!==t.memoizedState?(Ll(),t.child=e.child,t.flags|=128,t=null):(Ll(),a=l.fallback,s=t.mode,l=ii({mode:"visible",children:l.children},s),(a=Uu(a,s,n,null)).flags|=2,l.return=t,a.return=t,l.sibling=a,t.child=l,wl(t,e.child,null,n),(l=t.child).memoizedState=ri(n),l.childLanes=li(e,r,n),t.memoizedState=ni,t=a);else if(Nl(t),"$!"===s.data){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(l=Error(o(419))).stack="",l.digest=r,al({value:l,source:null,stack:null}),t=ui(e,t,n)}else if($o||Si(e,t,n,!1),r=!!(n&e.childLanes),$o||r){if(null!==(r=ts)){if(42&(l=n&-n))l=1;else switch(l){case 2:l=1;break;case 8:l=4;break;case 32:l=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:l=64;break;case 268435456:l=134217728;break;default:l=0}if(0!==(l=l&(r.suspendedLanes|n)?0:l)&&l!==u.retryLane)throw u.retryLane=l,zr(e,l),Ls(r,0,l),Vo}"$?"===s.data||$s(),t=ui(e,t,n)}else"$?"===s.data?(t.flags|=128,t.child=e.child,t=ic.bind(null,e),s._reactRetry=t,t=null):(e=u.treeContext,Kr=uf(s.nextSibling),Yr=t,Xr=!0,Gr=null,Zr=!1,null!==e&&(Br[Ur++]=Hr,Br[Ur++]=Vr,Br[Ur++]=jr,Hr=e.id,Vr=e.overflow,jr=t),(t=oi(t,l.children)).flags|=4096);return t}return a?(Ll(),a=l.fallback,s=t.mode,c=(u=e.child).sibling,(l=Fu(u,{mode:"hidden",children:l.children})).subtreeFlags=31457280&u.subtreeFlags,null!==c?a=Fu(c,a):(a=Uu(a,s,n,null)).flags|=2,a.return=t,l.return=t,l.sibling=a,t.child=l,l=a,a=t.child,null===(s=e.child.memoizedState)?s=ri(n):(null!==(u=s.cachePool)?(c=Bl._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Gl(),s={baseLanes:s.baseLanes|n,cachePool:u}),a.memoizedState=s,a.childLanes=li(e,r,n),t.memoizedState=ni,l):(Nl(t),e=(n=e.child).sibling,(n=Fu(n,{mode:"visible",children:l.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function oi(e,t){return(t=ii({mode:"visible",children:t},e.mode)).return=e,e.child=t}function ii(e,t){return ju(e,t,0,null)}function ui(e,t,n){return wl(t,e.child,null,n),(e=oi(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function si(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ki(e.return,t,n)}function ci(e,t,n,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=l)}function fi(e,t,n){var r=t.pendingProps,l=r.revealOrder,a=r.tail;if(Wo(e,t,r.children,n),2&(r=Il.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&si(e,n,t);else if(19===e.tag)si(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(Y(Il,r),l){case"forwards":for(n=t.child,l=null;null!==n;)null!==(e=n.alternate)&&null===Rl(e)&&(l=n),n=n.sibling;null===(n=l)?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),ci(t,!1,l,n,a);break;case"backwards":for(n=null,l=t.child,t.child=null;null!==l;){if(null!==(e=l.alternate)&&null===Rl(e)){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}ci(t,!0,n,null,a);break;case"together":ci(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function di(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),fs|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Si(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Fu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function pi(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Ei(e))}function mi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)$o=!0;else{if(!(pi(e,n)||128&t.flags))return $o=!1,function(e,t,n){switch(t.tag){case 3:J(t,t.stateNode.containerInfo),vi(0,Bl,e.memoizedState.cache),ll();break;case 27:case 5:te(t);break;case 4:J(t,t.stateNode.containerInfo);break;case 10:vi(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(Nl(t),t.flags|=128,null):n&t.child.childLanes?ai(e,t,n):(Nl(t),null!==(e=di(e,t,n))?e.sibling:null);Nl(t);break;case 19:var l=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Si(e,t,n,!1),r=!!(n&t.childLanes)),l){if(r)return fi(e,t,n);t.flags|=128}if(null!==(l=t.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),Y(Il,Il.current),r)break;return null;case 22:case 23:return t.lanes=0,Ko(e,t,n);case 24:vi(0,Bl,e.memoizedState.cache)}return di(e,t,n)}(e,t,n);$o=!!(131072&e.flags)}else $o=!1,Xr&&1048576&t.flags&&Wr(t,Mr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,l=r._init;if(r=l(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((l=r.$$typeof)===y){t.tag=11,t=Qo(null,t,r,e,n);break e}if(l===k){t.tag=14,t=qo(null,t,r,e,n);break e}}throw t=_(r)||r,Error(o(306,t,""))}Du(r)?(e=Oo(r,e),t.tag=1,t=ei(null,t,r,e,n)):(t.tag=0,t=Zo(null,t,r,e,n))}return t;case 0:return Zo(e,t,t.type,t.pendingProps,n);case 1:return ei(e,t,r=t.type,l=Oo(r,t.pendingProps),n);case 3:e:{if(J(t,t.stateNode.containerInfo),null===e)throw Error(o(387));var a=t.pendingProps;r=(l=t.memoizedState).element,Ni(e,t),Fi(t,a,null,n);var i=t.memoizedState;if(a=i.cache,vi(0,Bl,a),a!==l.cache&&wi(t,[Bl],n,!0),Di(),a=i.element,l.isDehydrated){if(l={element:a,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=ti(e,t,a,n);break e}if(a!==r){al(r=Ir(Error(o(424)),t)),t=ti(e,t,a,n);break e}for(Kr=uf(t.stateNode.containerInfo.firstChild),Yr=t,Xr=!0,Gr=null,Zr=!0,n=Sl(t,null,a,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ll(),a===r){t=di(e,t,n);break e}Wo(e,t,a,n)}t=t.child}return t;case 26:return Go(e,t),null===e?(n=yf(t.type,null,t.pendingProps,null))?t.memoizedState=n:Xr||(n=t.type,e=t.pendingProps,(r=Kc(G.current).createElement(n))[Me]=t,r[Be]=e,Qc(r,n,e),Ge(r),t.stateNode=r):t.memoizedState=yf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return te(t),null===e&&Xr&&(r=t.stateNode=cf(t.type,t.pendingProps,G.current),Yr=t,Zr=!0,Kr=uf(r.firstChild)),r=t.pendingProps.children,null!==e||Xr?Wo(e,t,r,n):t.child=wl(t,null,r,n),Go(e,t),t.child;case 5:return null===e&&Xr&&((l=r=Kr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var l=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[We])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==l.rel||e.getAttribute("href")!==(null==l.href?null:l.href)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin)||e.getAttribute("title")!==(null==l.title?null:l.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==l.src?null:l.src)||e.getAttribute("type")!==(null==l.type?null:l.type)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==l.name?null:""+l.name;if("hidden"===l.type&&e.getAttribute("name")===a)return e}if(null===(e=uf(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Zr))?(t.stateNode=r,Yr=t,Kr=uf(r.firstChild),Zr=!1,l=!0):l=!1),l||el(t)),te(t),l=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,Zc(l,a)?r=null:null!==i&&Zc(l,i)&&(t.flags|=32),null!==t.memoizedState&&(l=fa(e,t,ma,null,null,n),Ff._currentValue=l),Go(e,t),Wo(e,t,r,n),t.child;case 6:return null===e&&Xr&&((e=n=Kr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=uf(e.nextSibling)))return null}return e}(n,t.pendingProps,Zr))?(t.stateNode=n,Yr=t,Kr=null,e=!0):e=!1),e||el(t)),null;case 13:return ai(e,t,n);case 4:return J(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wl(t,null,r,n):Wo(e,t,r,n),t.child;case 11:return Qo(e,t,t.type,t.pendingProps,n);case 7:return Wo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Wo(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,vi(0,t.type,r.value),Wo(e,t,r.children,n),t.child;case 9:return l=t.type._context,r=t.pendingProps.children,Ai(t),r=r(l=Ci(l)),t.flags|=1,Wo(e,t,r,n),t.child;case 14:return qo(e,t,t.type,t.pendingProps,n);case 15:return Yo(e,t,t.type,t.pendingProps,n);case 19:return fi(e,t,n);case 22:return Ko(e,t,n);case 24:return Ai(t),r=Ci(Bl),null===e?(null===(l=Kl())&&(l=ts,a=Ul(),l.pooledCache=a,a.refCount++,null!==a&&(l.pooledCacheLanes|=n),l=a),t.memoizedState={parent:r,cache:l},zi(t),vi(0,Bl,l)):(!!(e.lanes&n)&&(Ni(e,t),Fi(t,null,null,n),Di()),l=e.memoizedState,a=t.memoizedState,l.parent!==r?(l={parent:r,cache:r},t.memoizedState=l,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=l),vi(0,Bl,r)):(r=a.cache,vi(0,Bl,r),r!==l.cache&&wi(t,[Bl],n,!0))),Wo(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}var hi=Q(null),gi=null,yi=null;function vi(e,t,n){Y(hi,t._currentValue),t._currentValue=n}function bi(e){e._currentValue=hi.current,q(hi)}function ki(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wi(e,t,n,r){var l=e.child;for(null!==l&&(l.return=e);null!==l;){var a=l.dependencies;if(null!==a){var i=l.child;a=a.firstContext;e:for(;null!==a;){var u=a;a=l;for(var s=0;s<t.length;s++)if(u.context===t[s]){a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),ki(a.return,n,e),r||(i=null);break e}a=u.next}}else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=n,null!==(a=i.alternate)&&(a.lanes|=n),ki(i,n,e),i=null}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===e){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}}function Si(e,t,n,r){e=null;for(var l=t,a=!1;null!==l;){if(!a)if(524288&l.flags)a=!0;else if(262144&l.flags)break;if(10===l.tag){var i=l.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=l.type;Yn(l.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(l===Z.current){if(null===(i=l.alternate))throw Error(o(387));i.memoizedState.memoizedState!==l.memoizedState.memoizedState&&(null!==e?e.push(Ff):e=[Ff])}l=l.return}null!==e&&wi(t,e,n,r),t.flags|=262144}function Ei(e){for(e=e.firstContext;null!==e;){if(!Yn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ai(e){gi=e,yi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Ci(e){return _i(gi,e)}function xi(e,t){return null===gi&&Ai(e),_i(e,t)}function _i(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===yi){if(null===e)throw Error(o(308));yi=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else yi=yi.next=t;return n}var Pi=!1;function zi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Ni(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Ti(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Li(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&es){var l=r.pending;return null===l?t.next=t:(t.next=l.next,l.next=t),r.pending=t,t=Tr(e),Nr(e,null,n),t}return _r(e,r,t,n),Tr(e)}function Oi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Ie(e,n)}}function Ii(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var l=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?l=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?l=a=t:a=a.next=t}else l=a=t;return n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Ri=!1;function Di(){if(Ri&&null!==Wl)throw Wl}function Fi(e,t,n,r){Ri=!1;var l=e.updateQueue;Pi=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,i=l.shared.pending;if(null!==i){l.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?a=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=l.baseState;for(o=0,c=s=u=null,i=a;;){var d=-536870913&i.lane,p=d!==i.lane;if(p?(rs&d)===d:(r&d)===d){0!==d&&d===$l&&(Ri=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var m=e,h=i;d=t;var g=n;switch(h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(g,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d="function"==typeof(m=h.payload)?m.call(g,f,d):m))break e;f=T({},f,d);break e;case 2:Pi=!0}}null!==(d=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=l.callbacks)?l.callbacks=[d]:p.push(d))}else p={lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,o|=d;if(null===(i=i.next)){if(null===(i=l.shared.pending))break;i=(p=i).next,p.next=null,l.lastBaseUpdate=p,l.shared.pending=null}}null===c&&(u=f),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null===a&&(l.shared.lanes=0),fs|=o,e.lanes=o,e.memoizedState=f}}function Mi(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function Bi(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Mi(n[e],t)}function Ui(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var l=r.next;n=l;do{if((n.tag&e)===e){r=void 0;var a=n.create,o=n.inst;r=a(),o.destroy=r}n=n.next}while(n!==l)}}catch(e){rc(t,t.return,e)}}function ji(e,t,n){try{var r=t.updateQueue,l=null!==r?r.lastEffect:null;if(null!==l){var a=l.next;r=a;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,l=t;var u=n;try{i()}catch(e){rc(l,u,e)}}}r=r.next}while(r!==a)}}catch(e){rc(t,t.return,e)}}function Hi(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Bi(t,n)}catch(t){rc(e,e.return,t)}}}function Vi(e,t,n){n.props=Oo(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){rc(e,t,n)}}function $i(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var l=r;break;default:l=r}"function"==typeof n?e.refCleanup=n(l):n.current=l}}catch(n){rc(e,t,n)}}function Wi(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){rc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){rc(e,t,n)}else n.current=null}function Qi(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){rc(e,e.return,t)}}function qi(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var l=null,a=null,i=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||$c(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":a=m;break;case"name":l=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(o(137,t));break;default:m!==d&&$c(e,t,p,m,r,d)}}return void gt(e,i,u,s,c,f,a,l);case"select":for(a in m=i=u=p=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(a)||$c(e,t,a,null,r,s)}for(l in r)if(a=r[l],s=n[l],r.hasOwnProperty(l)&&(null!=a||null!=s))switch(l){case"value":p=a;break;case"defaultValue":u=a;break;case"multiple":i=a;default:a!==s&&$c(e,t,l,a,r,s)}return t=u,n=i,r=m,void(null!=p?bt(e,!!n,p,!1):!!r!=!!n&&(null!=t?bt(e,!!n,t,!0):bt(e,!!n,n?[]:"",!1)));case"textarea":for(u in m=p=null,n)if(l=n[u],n.hasOwnProperty(u)&&null!=l&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:$c(e,t,u,null,r,l)}for(i in r)if(l=r[i],a=n[i],r.hasOwnProperty(i)&&(null!=l||null!=a))switch(i){case"value":p=l;break;case"defaultValue":m=l;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=l)throw Error(o(91));break;default:l!==a&&$c(e,t,i,l,r,a)}return void kt(e,p,m);case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:$c(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:$c(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&$c(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:$c(e,t,c,p,r,m)}return;default:if(xt(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Wc(e,t,y,void 0,r,p);for(f in r)p=r[f],m=n[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Wc(e,t,f,p,r,m);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&$c(e,t,v,null,r,p);for(d in r)p=r[d],m=n[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||$c(e,t,d,p,r,m)}(r,e.type,n,t),r[Be]=t}catch(t){rc(e,e.return,t)}}function Yi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Ki(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Yi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Xi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Vc));else if(4!==r&&27!==r&&null!==(e=e.child))for(Xi(e,t,n),e=e.sibling;null!==e;)Xi(e,t,n),e=e.sibling}function Gi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Gi(e,t,n),e=e.sibling;null!==e;)Gi(e,t,n),e=e.sibling}var Zi=!1,Ji=!1,eu=!1,tu="function"==typeof WeakSet?WeakSet:Set,nu=null,ru=!1;function lu(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:yu(e,n),4&r&&Ui(5,n);break;case 1:if(yu(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){rc(n,n.return,e)}else{var l=Oo(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(l,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){rc(n,n.return,e)}}64&r&&Hi(n),512&r&&$i(n,n.return);break;case 3:if(yu(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Bi(r,e)}catch(e){rc(n,n.return,e)}}break;case 26:yu(e,n),512&r&&$i(n,n.return);break;case 27:case 5:yu(e,n),null===t&&4&r&&Qi(n),512&r&&$i(n,n.return);break;case 12:default:yu(e,n);break;case 13:yu(e,n),4&r&&cu(e,n);break;case 22:if(!(l=null!==n.memoizedState||Zi)){t=null!==t&&null!==t.memoizedState||Ji;var a=Zi,o=Ji;Zi=l,(Ji=t)&&!o?bu(e,n,!!(8772&n.subtreeFlags)):yu(e,n),Zi=a,Ji=o}512&r&&("manual"===n.memoizedProps.mode?$i(n,n.return):Wi(n,n.return))}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Qe(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var ou=null,iu=!1;function uu(e,t,n){for(n=n.child;null!==n;)su(e,t,n),n=n.sibling}function su(e,t,n){if(ve&&"function"==typeof ve.onCommitFiberUnmount)try{ve.onCommitFiberUnmount(ye,n)}catch(e){}switch(n.tag){case 26:Ji||Wi(n,t),uu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Ji||Wi(n,t);var r=ou,l=iu;for(ou=n.stateNode,uu(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Qe(n),ou=r,iu=l;break;case 5:Ji||Wi(n,t);case 6:l=ou;var a=iu;if(ou=null,uu(e,t,n),iu=a,null!==(ou=l))if(iu)try{e=ou,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){rc(n,t,e)}else try{ou.removeChild(n.stateNode)}catch(e){rc(n,t,e)}break;case 18:null!==ou&&(iu?(t=ou,n=n.stateNode,8===t.nodeType?af(t.parentNode,n):1===t.nodeType&&af(t,n),gd(t)):af(ou,n.stateNode));break;case 4:r=ou,l=iu,ou=n.stateNode.containerInfo,iu=!0,uu(e,t,n),ou=r,iu=l;break;case 0:case 11:case 14:case 15:Ji||ji(2,n,t),Ji||ji(4,n,t),uu(e,t,n);break;case 1:Ji||(Wi(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Vi(n,t,r)),uu(e,t,n);break;case 21:uu(e,t,n);break;case 22:Ji||Wi(n,t),Ji=(r=Ji)||null!==n.memoizedState,uu(e,t,n),Ji=r;break;default:uu(e,t,n)}}function cu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{gd(e)}catch(e){rc(t,t.return,e)}}function fu(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new tu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new tu),t;default:throw Error(o(435,e.tag))}}(e);t.forEach((function(t){var r=uc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function du(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var l=n[r],a=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:case 5:ou=u.stateNode,iu=!1;break e;case 3:case 4:ou=u.stateNode.containerInfo,iu=!0;break e}u=u.return}if(null===ou)throw Error(o(160));su(a,i,l),ou=null,iu=!1,null!==(a=l.alternate)&&(a.return=null),l.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)mu(t,e),t=t.sibling}var pu=null;function mu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:du(t,e),hu(e),4&r&&(ji(3,e,e.return),Ui(3,e),ji(5,e,e.return));break;case 1:du(t,e),hu(e),512&r&&(Ji||null===n||Wi(n,n.return)),64&r&&Zi&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var l=pu;if(du(t,e),hu(e),512&r&&(Ji||null===n||Wi(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,l=l.ownerDocument||l;t:switch(r){case"title":(!(a=l.getElementsByTagName("title")[0])||a[We]||a[Me]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=l.createElement(r),l.head.insertBefore(a,l.querySelector("head > title"))),Qc(a,r,n),a[Me]=e,Ge(a),r=a;break e;case"link":var i=Pf("link","href",l).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((a=i[u]).getAttribute("href")===(null==n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}Qc(a=l.createElement(r),r,n),l.head.appendChild(a);break;case"meta":if(i=Pf("meta","content",l).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((a=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}Qc(a=l.createElement(r),r,n),l.head.appendChild(a);break;default:throw Error(o(468,r))}a[Me]=e,Ge(a),r=a}e.stateNode=r}else zf(l,e.type,e.stateNode);else e.stateNode=Ef(l,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?zf(l,e.type,e.stateNode):Ef(l,r,e.memoizedProps)):null===r&&null!==e.stateNode&&qi(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){l=e.stateNode,a=e.memoizedProps;try{for(var s=l.firstChild;s;){var c=s.nextSibling,f=s.nodeName;s[We]||"HEAD"===f||"BODY"===f||"SCRIPT"===f||"STYLE"===f||"LINK"===f&&"stylesheet"===s.rel.toLowerCase()||l.removeChild(s),s=c}for(var d=e.type,p=l.attributes;p.length;)l.removeAttributeNode(p[0]);Qc(l,d,a),l[Me]=e,l[Be]=a}catch(t){rc(e,e.return,t)}}case 5:if(du(t,e),hu(e),512&r&&(Ji||null===n||Wi(n,n.return)),32&e.flags){l=e.stateNode;try{St(l,"")}catch(t){rc(e,e.return,t)}}4&r&&null!=e.stateNode&&qi(e,l=e.memoizedProps,null!==n?n.memoizedProps:l),1024&r&&(eu=!0);break;case 6:if(du(t,e),hu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){rc(e,e.return,t)}}break;case 3:if(_f=null,l=pu,pu=pf(t.containerInfo),du(t,e),pu=l,hu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{gd(t.containerInfo)}catch(t){rc(e,e.return,t)}eu&&(eu=!1,gu(e));break;case 4:r=pu,pu=pf(e.stateNode.containerInfo),du(t,e),hu(e),pu=r;break;case 12:du(t,e),hu(e);break;case 13:du(t,e),hu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(bs=ue()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,fu(e,r));break;case 22:if(512&r&&(Ji||null===n||Wi(n,n.return)),s=null!==e.memoizedState,c=null!==n&&null!==n.memoizedState,Zi=(f=Zi)||s,Ji=(d=Ji)||c,du(t,e),Ji=d,Zi=f,hu(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=s?-2&t._visibility:1|t._visibility,s&&(t=Zi||Ji,null===n||c||t||vu(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){c=n=t;try{if(l=c.stateNode,s)"function"==typeof(a=l.style).setProperty?a.setProperty("display","none","important"):a.display="none";else{i=c.stateNode;var m=null!=(u=c.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null;i.style.display=null==m||"boolean"==typeof m?"":(""+m).trim()}}catch(e){rc(c,c.return,e)}}}else if(6===t.tag){if(null===n){c=t;try{c.stateNode.nodeValue=s?"":c.memoizedProps}catch(e){rc(c,c.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,fu(e,n));break;case 19:du(t,e),hu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,fu(e,r));break;case 21:break;default:du(t,e),hu(e)}}function hu(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Yi(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 27:var l=r.stateNode;Gi(e,Ki(e),l);break;case 5:var a=r.stateNode;32&r.flags&&(St(a,""),r.flags&=-33),Gi(e,Ki(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;Xi(e,Ki(e),i);break;default:throw Error(o(161))}}}catch(t){rc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;gu(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function yu(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)lu(e,t.alternate,t),t=t.sibling}function vu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:ji(4,t,t.return),vu(t);break;case 1:Wi(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Vi(t,t.return,n),vu(t);break;case 26:case 27:case 5:Wi(t,t.return),vu(t);break;case 22:Wi(t,t.return),null===t.memoizedState&&vu(t);break;default:vu(t)}e=e.sibling}}function bu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,l=e,a=t,o=a.flags;switch(a.tag){case 0:case 11:case 15:bu(l,a,n),Ui(4,a);break;case 1:if(bu(l,a,n),"function"==typeof(l=(r=a).stateNode).componentDidMount)try{l.componentDidMount()}catch(e){rc(r,r.return,e)}if(null!==(l=(r=a).updateQueue)){var i=r.stateNode;try{var u=l.shared.hiddenCallbacks;if(null!==u)for(l.shared.hiddenCallbacks=null,l=0;l<u.length;l++)Mi(u[l],i)}catch(e){rc(r,r.return,e)}}n&&64&o&&Hi(a),$i(a,a.return);break;case 26:case 27:case 5:bu(l,a,n),n&&null===r&&4&o&&Qi(a),$i(a,a.return);break;case 12:default:bu(l,a,n);break;case 13:bu(l,a,n),n&&4&o&&cu(l,a);break;case 22:null===a.memoizedState&&bu(l,a,n),$i(a,a.return)}t=t.sibling}}function ku(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&jl(n))}function wu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&jl(e))}function Su(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Eu(e,t,n,r),t=t.sibling}function Eu(e,t,n,r){var l=t.flags;switch(t.tag){case 0:case 11:case 15:Su(e,t,n,r),2048&l&&Ui(9,t);break;case 3:Su(e,t,n,r),2048&l&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&jl(e)));break;case 12:if(2048&l){Su(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,o=a.id,i=a.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){rc(t,t.return,e)}}else Su(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,null!==t.memoizedState?4&a._visibility?Su(e,t,n,r):Cu(e,t):4&a._visibility?Su(e,t,n,r):(a._visibility|=4,Au(e,t,n,r,!!(10256&t.subtreeFlags))),2048&l&&ku(t.alternate,t);break;case 24:Su(e,t,n,r),2048&l&&wu(t.alternate,t);break;default:Su(e,t,n,r)}}function Au(e,t,n,r,l){for(l=l&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,o=t,i=n,u=r,s=o.flags;switch(o.tag){case 0:case 11:case 15:Au(a,o,i,u,l),Ui(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?4&c._visibility?Au(a,o,i,u,l):Cu(a,o):(c._visibility|=4,Au(a,o,i,u,l)),l&&2048&s&&ku(o.alternate,o);break;case 24:Au(a,o,i,u,l),l&&2048&s&&wu(o.alternate,o);break;default:Au(a,o,i,u,l)}t=t.sibling}}function Cu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,l=r.flags;switch(r.tag){case 22:Cu(n,r),2048&l&&ku(r.alternate,r);break;case 24:Cu(n,r),2048&l&&wu(r.alternate,r);break;default:Cu(n,r)}t=t.sibling}}var xu=8192;function _u(e){if(e.subtreeFlags&xu)for(e=e.child;null!==e;)Pu(e),e=e.sibling}function Pu(e){switch(e.tag){case 26:_u(e),e.flags&xu&&null!==e.memoizedState&&function(e,t,n){if(null===Tf)throw Error(o(475));var r=Tf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var l=vf(n.href),a=e.querySelector(bf(l));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Of.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Ge(a);a=e.ownerDocument||e,n=kf(n),(l=ff.get(l))&&Cf(n,l),Ge(a=a.createElement("link"));var i=a;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Qc(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Of.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(pu,e.memoizedState,e.memoizedProps);break;case 5:default:_u(e);break;case 3:case 4:var t=pu;pu=pf(e.stateNode.containerInfo),_u(e),pu=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=xu,xu=16777216,_u(e),xu=t):_u(e))}}function zu(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Nu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];nu=r,Ou(r,e)}zu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Tu(e),e=e.sibling}function Tu(e){switch(e.tag){case 0:case 11:case 15:Nu(e),2048&e.flags&&ji(9,e,e.return);break;case 3:case 12:default:Nu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Lu(e)):Nu(e)}}function Lu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];nu=r,Ou(r,e)}zu(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:ji(8,t,t.return),Lu(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Lu(t));break;default:Lu(t)}e=e.sibling}}function Ou(e,t){for(;null!==nu;){var n=nu;switch(n.tag){case 0:case 11:case 15:ji(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:jl(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,nu=r;else e:for(n=e;null!==nu;){var l=(r=nu).sibling,a=r.return;if(au(r),r===n){nu=null;break e}if(null!==l){l.return=a,nu=l;break e}nu=a}}}function Iu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ru(e,t,n,r){return new Iu(e,t,n,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fu(e,t){var n=e.alternate;return null===n?((n=Ru(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Mu(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Bu(e,t,n,r,l,a){var i=0;if(r=e,"function"==typeof e)Du(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,K.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case f:return Uu(n.children,l,a,t);case d:i=8,l|=24;break;case p:return(e=Ru(12,n,t,2|l)).elementType=p,e.lanes=a,e;case v:return(e=Ru(13,n,t,l)).elementType=v,e.lanes=a,e;case b:return(e=Ru(19,n,t,l)).elementType=b,e.lanes=a,e;case S:return ju(n,l,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case m:case g:i=10;break e;case h:i=9;break e;case y:i=11;break e;case k:i=14;break e;case w:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Ru(i,n,t,l)).elementType=e,t.type=r,t.lanes=a,t}function Uu(e,t,n,r){return(e=Ru(7,e,r,t)).lanes=n,e}function ju(e,t,n,r){(e=Ru(22,e,r,t)).elementType=S,e.lanes=n;var l={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=l._current;if(null===e)throw Error(o(456));if(!(2&l._pendingVisibility)){var t=zr(e,2);null!==t&&(l._pendingVisibility|=2,Ls(t,0,2))}},attach:function(){var e=l._current;if(null===e)throw Error(o(456));if(2&l._pendingVisibility){var t=zr(e,2);null!==t&&(l._pendingVisibility&=-3,Ls(t,0,2))}}};return e.stateNode=l,e}function Hu(e,t,n){return(e=Ru(6,e,null,t)).lanes=n,e}function Vu(e,t,n){return(t=Ru(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $u(e){e.flags|=4}function Wu(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Nf(t)){if(null!==(t=Pl.current)&&((4194176&rs)===rs?null!==zl:(62914560&rs)!==rs&&!(536870912&rs)||t!==zl))throw dl=ul,il;e.flags|=8192}}function Qu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Ne():536870912,e.lanes|=t,hs|=t)}function qu(e,t){if(!Xr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=31457280&l.subtreeFlags,r|=31457280&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ku(e,t,n){var r=t.pendingProps;switch(qr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Yu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),bi(Bl),ee(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(rl(t)?$u(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Gr&&(Is(Gr),Gr=null))),Yu(t),null;case 26:return n=t.memoizedState,null===e?($u(t),null!==n?(Yu(t),Wu(t,n)):(Yu(t),t.flags&=-16777217)):n?n!==e.memoizedState?($u(t),Yu(t),Wu(t,n)):(Yu(t),t.flags&=-16777217):(e.memoizedProps!==r&&$u(t),Yu(t),t.flags&=-16777217),null;case 27:ne(t),n=G.current;var l=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&$u(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Yu(t),null}e=K.current,rl(t)?tl(t):(e=cf(l,r,n),t.stateNode=e,$u(t))}return Yu(t),null;case 5:if(ne(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&$u(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Yu(t),null}if(e=K.current,rl(t))tl(t);else{switch(l=Kc(G.current),e){case 1:e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?l.createElement("select",{is:r.is}):l.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?l.createElement(n,{is:r.is}):l.createElement(n)}}e[Me]=t,e[Be]=r;e:for(l=t.child;null!==l;){if(5===l.tag||6===l.tag)e.appendChild(l.stateNode);else if(4!==l.tag&&27!==l.tag&&null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)break e;for(;null===l.sibling;){if(null===l.return||l.return===t)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}t.stateNode=e;e:switch(Qc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&$u(t)}}return Yu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&$u(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=G.current,rl(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(l=Yr))switch(l.tag){case 27:case 5:r=l.memoizedProps}e[Me]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Hc(e.nodeValue,n)))||el(t)}else(e=Kc(e).createTextNode(r))[Me]=t,t.stateNode=e}return Yu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(l=rl(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(o(317));l[Me]=t}else ll(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yu(t),l=!1}else null!==Gr&&(Is(Gr),Gr=null),l=!0;if(!l)return 256&t.flags?(Ol(t),t):(Ol(t),null)}if(Ol(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){l=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(l=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==l&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Qu(t,t.updateQueue),Yu(t),null;case 4:return ee(),null===e&&Lc(t.stateNode.containerInfo),Yu(t),null;case 10:return bi(t.type),Yu(t),null;case 19:if(q(Il),null===(l=t.memoizedState))return Yu(t),null;if(r=!!(128&t.flags),null===(a=l.rendering))if(r)qu(l,!1);else{if(0!==cs||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=Rl(e))){for(t.flags|=128,qu(l,!1),e=a.updateQueue,t.updateQueue=e,Qu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Mu(n,e),n=n.sibling;return Y(Il,1&Il.current|2),t.child}e=e.sibling}null!==l.tail&&ue()>ks&&(t.flags|=128,r=!0,qu(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Rl(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Qu(t,e),qu(l,!0),null===l.tail&&"hidden"===l.tailMode&&!a.alternate&&!Xr)return Yu(t),null}else 2*ue()-l.renderingStartTime>ks&&536870912!==n&&(t.flags|=128,r=!0,qu(l,!1),t.lanes=4194304);l.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=l.last)?e.sibling=a:t.child=a,l.last=a)}return null!==l.tail?(t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=ue(),t.sibling=null,e=Il.current,Y(Il,r?1&e|2:1&e),t):(Yu(t),null);case 22:case 23:return Ol(t),_l(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Yu(t),6&t.subtreeFlags&&(t.flags|=8192)):Yu(t),null!==(n=t.updateQueue)&&Qu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&q(Yl),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),bi(Bl),Yu(t),null;case 25:return null}throw Error(o(156,t.tag))}function Xu(e,t){switch(qr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return bi(Bl),ee(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return ne(t),null;case 13:if(Ol(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ll()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return q(Il),null;case 4:return ee(),null;case 10:return bi(t.type),null;case 22:case 23:return Ol(t),_l(),null!==e&&q(Yl),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return bi(Bl),null;default:return null}}function Gu(e,t){switch(qr(t),t.tag){case 3:bi(Bl),ee();break;case 26:case 27:case 5:ne(t);break;case 4:ee();break;case 13:Ol(t);break;case 19:q(Il);break;case 10:bi(t.type);break;case 22:case 23:Ol(t),_l(),null!==e&&q(Yl);break;case 24:bi(Bl)}}var Zu={getCacheForType:function(e){var t=Ci(Bl),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Ju="function"==typeof WeakMap?WeakMap:Map,es=0,ts=null,ns=null,rs=0,ls=0,as=null,os=!1,is=!1,us=!1,ss=0,cs=0,fs=0,ds=0,ps=0,ms=0,hs=0,gs=null,ys=null,vs=!1,bs=0,ks=1/0,ws=null,Ss=null,Es=!1,As=null,Cs=0,xs=0,_s=null,Ps=0,zs=null;function Ns(){return 2&es&&0!==rs?rs&-rs:null!==N.T?0!==$l?$l:wc():De()}function Ts(){0===ms&&(ms=536870912&rs&&!Xr?536870912:ze());var e=Pl.current;return null!==e&&(e.flags|=32),ms}function Ls(e,t,n){(e===ts&&2===ls||null!==e.cancelPendingCommit)&&(Us(e,0),Fs(e,rs,ms,!1)),Le(e,n),2&es&&e===ts||(e===ts&&(!(2&es)&&(ds|=n),4===cs&&Fs(e,rs,ms,!1)),hc(e))}function Os(e,t,n){if(6&es)throw Error(o(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||_e(e,t),l=r?function(e,t){var n=es;es|=2;var r=Hs(),l=Vs();ts!==e||rs!==t?(ws=null,ks=ue()+500,Us(e,t)):is=_e(e,t);e:for(;;)try{if(0!==ls&&null!==ns){t=ns;var a=as;t:switch(ls){case 1:ls=0,as=null,Xs(e,t,a,1);break;case 2:if(sl(a)){ls=0,as=null,Ks(t);break}t=function(){2===ls&&ts===e&&(ls=7),hc(e)},a.then(t,t);break e;case 3:ls=7;break e;case 4:ls=5;break e;case 7:sl(a)?(ls=0,as=null,Ks(t)):(ls=0,as=null,Xs(e,t,a,7));break;case 5:var i=null;switch(ns.tag){case 26:i=ns.memoizedState;case 5:case 27:var u=ns;if(!i||Nf(i)){ls=0,as=null;var s=u.sibling;if(null!==s)ns=s;else{var c=u.return;null!==c?(ns=c,Gs(c)):ns=null}break t}}ls=0,as=null,Xs(e,t,a,5);break;case 6:ls=0,as=null,Xs(e,t,a,6);break;case 8:Bs(),cs=6;break e;default:throw Error(o(462))}}qs();break}catch(t){js(e,t)}return yi=gi=null,N.H=r,N.A=l,es=n,null!==ns?0:(ts=null,rs=0,xr(),cs)}(e,t):Ws(e,t,!0),a=r;;){if(0===l){is&&!r&&Fs(e,t,0,!1);break}if(6===l)Fs(e,t,0,!os);else{if(n=e.current.alternate,a&&!Ds(n)){l=Ws(e,t,!1),a=!1;continue}if(2===l){if(a=t,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;l=gs;var s=u.current.memoizedState.isDehydrated;if(s&&(Us(u,i).flags|=256),2!==(i=Ws(u,i,!1))){if(us&&!s){u.errorRecoveryDisabledLanes|=a,ds|=a,l=4;break e}a=ys,ys=l,null!==a&&Is(a)}l=i}if(a=!1,2!==l)continue}}if(1===l){Us(e,0),Fs(e,t,0,!0);break}e:{switch(r=e,l){case 0:case 1:throw Error(o(345));case 4:if((4194176&t)===t){Fs(r,t,ms,!os);break e}break;case 2:ys=null;break;case 3:case 5:break;default:throw Error(o(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(a=bs+300-ue())){if(Fs(r,t,ms,!os),0!==xe(r,0))break e;r.timeoutHandle=ef(Rs.bind(null,r,n,ys,ws,vs,t,ms,ds,hs,os,2,-0,0),a)}else Rs(r,n,ys,ws,vs,t,ms,ds,hs,os,0,-0,0)}}break}hc(e)}function Is(e){null===ys?ys=e:ys.push.apply(ys,e)}function Rs(e,t,n,r,l,a,i,u,s,c,f,d,p){var m=t.subtreeFlags;if((8192&m||!(16785408&~m))&&(Tf={stylesheets:null,count:0,unsuspend:Lf},Pu(t),null!==(t=function(){if(null===Tf)throw Error(o(475));var e=Tf;return e.stylesheets&&0===e.count&&Rf(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Rf(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Js.bind(null,e,n,r,l,i,u,s,1,d,p)),void Fs(e,a,i,!c);Js(e,n,r,l,i,u,s)}function Ds(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var l=n[r],a=l.getSnapshot;l=l.value;try{if(!Yn(a(),l))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Fs(e,t,n,r){t&=~ps,t&=~ds,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var l=t;0<l;){var a=31-ke(l),o=1<<a;r[a]=-1,l&=~o}0!==n&&Oe(e,n,t)}function Ms(){return!!(6&es)||(gc(0,!1),!1)}function Bs(){if(null!==ns){if(0===ls)var e=ns.return;else yi=gi=null,ya(e=ns),ml=null,hl=0,e=ns;for(;null!==e;)Gu(e.alternate,e),e=e.return;ns=null}}function Us(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,tf(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Bs(),ts=e,ns=n=Fu(e.current,null),rs=t,ls=0,as=null,os=!1,is=_e(e,t),us=!1,hs=ms=ps=ds=fs=cs=0,ys=gs=null,vs=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var l=31-ke(r),a=1<<l;t|=e[l],r&=~a}return ss=t,xr(),n}function js(e,t){Jl=null,N.H=Co,t===ol?(t=pl(),ls=3):t===il?(t=pl(),ls=4):ls=t===Vo?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,as=t,null===ns&&(cs=1,Mo(e,Ir(t,e.current)))}function Hs(){var e=N.H;return N.H=Co,null===e?Co:e}function Vs(){var e=N.A;return N.A=Zu,e}function $s(){cs=4,os||(4194176&rs)!==rs&&null!==Pl.current||(is=!0),!(134217727&fs)&&!(134217727&ds)||null===ts||Fs(ts,rs,ms,!1)}function Ws(e,t,n){var r=es;es|=2;var l=Hs(),a=Vs();ts===e&&rs===t||(ws=null,Us(e,t)),t=!1;var o=cs;e:for(;;)try{if(0!==ls&&null!==ns){var i=ns,u=as;switch(ls){case 8:Bs(),o=6;break e;case 3:case 2:case 6:null===Pl.current&&(t=!0);var s=ls;if(ls=0,as=null,Xs(e,i,u,s),n&&is){o=0;break e}break;default:s=ls,ls=0,as=null,Xs(e,i,u,s)}}Qs(),o=cs;break}catch(t){js(e,t)}return t&&e.shellSuspendCounter++,yi=gi=null,es=r,N.H=l,N.A=a,null===ns&&(ts=null,rs=0,xr()),o}function Qs(){for(;null!==ns;)Ys(ns)}function qs(){for(;null!==ns&&!oe();)Ys(ns)}function Ys(e){var t=mi(e.alternate,e,ss);e.memoizedProps=e.pendingProps,null===t?Gs(e):ns=t}function Ks(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Jo(n,t,t.pendingProps,t.type,void 0,rs);break;case 11:t=Jo(n,t,t.pendingProps,t.type.render,t.ref,rs);break;case 5:ya(t);default:Gu(n,t),t=mi(n,t=ns=Mu(t,ss),ss)}e.memoizedProps=e.pendingProps,null===t?Gs(e):ns=t}function Xs(e,t,n,r){yi=gi=null,ya(t),ml=null,hl=0;var l=t.return;try{if(function(e,t,n,r,l){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Si(t,n,l,!0),null!==(n=Pl.current)){switch(n.tag){case 13:return null===zl?$s():null===n.alternate&&0===cs&&(cs=3),n.flags&=-257,n.flags|=65536,n.lanes=l,r===ul?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),lc(e,r,l)),!1;case 22:return n.flags|=65536,r===ul?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),lc(e,r,l)),!1}throw Error(o(435,n.tag))}return lc(e,r,l),$s(),!1}if(Xr)return null!==(t=Pl.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=l,r!==Jr&&al(Ir(e=Error(o(422),{cause:r}),n))):(r!==Jr&&al(Ir(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,l&=-l,e.lanes|=l,r=Ir(r,n),Ii(e,l=Uo(e.stateNode,r,l)),4!==cs&&(cs=2)),!1;var a=Error(o(520),{cause:r});if(a=Ir(a,n),null===gs?gs=[a]:gs.push(a),4!==cs&&(cs=2),null===t)return!0;r=Ir(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=l&-l,n.lanes|=e,Ii(n,e=Uo(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Ss&&Ss.has(a))))return n.flags|=65536,l&=-l,n.lanes|=l,Ho(l=jo(l),e,n,r),Ii(n,l),!1}n=n.return}while(null!==n);return!1}(e,l,t,n,rs))return cs=1,Mo(e,Ir(n,e.current)),void(ns=null)}catch(t){if(null!==l)throw ns=l,t;return cs=1,Mo(e,Ir(n,e.current)),void(ns=null)}32768&t.flags?(Xr||1===r?e=!0:is||536870912&rs?e=!1:(os=e=!0,(2===r||3===r||6===r)&&null!==(r=Pl.current)&&13===r.tag&&(r.flags|=16384)),Zs(t,e)):Gs(t)}function Gs(e){var t=e;do{if(32768&t.flags)return void Zs(t,os);e=t.return;var n=Ku(t.alternate,t,ss);if(null!==n)return void(ns=n);if(null!==(t=t.sibling))return void(ns=t);ns=t=e}while(null!==t);0===cs&&(cs=5)}function Zs(e,t){do{var n=Xu(e.alternate,e);if(null!==n)return n.flags&=32767,void(ns=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ns=e);ns=e=n}while(null!==e);cs=6,ns=null}function Js(e,t,n,r,l,a,i,u,s,c){var f=N.T,d=H.p;try{H.p=2,N.T=null,function(e,t,n,r,l,a,i,u){do{tc()}while(null!==As);if(6&es)throw Error(o(327));var s=e.finishedWork;if(r=e.finishedLanes,null===s)return null;if(e.finishedWork=null,e.finishedLanes=0,s===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=s.lanes|s.childLanes;if(function(e,t,n,r,l,a){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-ke(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Oe(e,r,0),0!==a&&0===l&&0!==e.tag&&(e.suspendedLanes|=a&~(o&~t))}(e,r,c|=Cr,a,i,u),e===ts&&(ns=ts=null,rs=0),!(10256&s.subtreeFlags)&&!(10256&s.flags)||Es||(Es=!0,xs=c,_s=n,le(de,(function(){return tc(),null}))),n=!!(15990&s.flags),15990&s.subtreeFlags||n?(n=N.T,N.T=null,a=H.p,H.p=2,i=es,es|=4,function(e,t){if(e=e.containerInfo,qc=Wf,er(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var l=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var m;d!==n||0!==l&&3!==d.nodeType||(u=i+l),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break t;if(p===n&&++c===l&&(u=i),p===a&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Yc={focusedElem:e,selectionRange:n},Wf=!1,nu=t;null!==nu;)if(e=(t=nu).child,1028&t.subtreeFlags&&null!==e)e.return=t,nu=e;else for(;null!==nu;){switch(a=(t=nu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,l=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var h=Oo(n.type,l,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(h,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){rc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))of(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":of(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,nu=e;break}nu=t.return}h=ru,ru=!1}(e,s),mu(s,e),tr(Yc,e.containerInfo),Wf=!!qc,Yc=qc=null,e.current=s,lu(e,s.alternate,s),ie(),es=i,H.p=a,N.T=n):e.current=s,Es?(Es=!1,As=e,Cs=r):ec(e,c),0===(c=e.pendingLanes)&&(Ss=null),function(e){if(ve&&"function"==typeof ve.onCommitFiberRoot)try{ve.onCommitFiberRoot(ye,e,void 0,!(128&~e.current.flags))}catch(e){}}(s.stateNode),hc(e),null!==t)for(l=e.onRecoverableError,s=0;s<t.length;s++)l((c=t[s]).value,{componentStack:c.stack});!!(3&Cs)&&tc(),c=e.pendingLanes,4194218&r&&42&c?e===zs?Ps++:(Ps=0,zs=e):Ps=0,gc(0,!1)}(e,t,n,r,d,l,a,i)}finally{N.T=f,H.p=d}}function ec(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,jl(t))}function tc(){if(null!==As){var e=As,t=xs;xs=0;var n=Re(Cs),r=N.T,l=H.p;try{if(H.p=32>n?32:n,N.T=null,null===As)var a=!1;else{n=_s,_s=null;var i=As,u=Cs;if(As=null,Cs=0,6&es)throw Error(o(331));var s=es;if(es|=4,Tu(i.current),Eu(i,i.current,u,n),es=s,gc(0,!1),ve&&"function"==typeof ve.onPostCommitFiberRoot)try{ve.onPostCommitFiberRoot(ye,i)}catch(e){}a=!0}return a}finally{H.p=l,N.T=r,ec(e,t)}}return!1}function nc(e,t,n){t=Ir(n,t),null!==(e=Li(e,t=Uo(e.stateNode,t,2),2))&&(Le(e,2),hc(e))}function rc(e,t,n){if(3===e.tag)nc(e,e,n);else for(;null!==t;){if(3===t.tag){nc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ss||!Ss.has(r))){e=Ir(n,e),null!==(r=Li(t,n=jo(2),2))&&(Ho(n,r,t,e),Le(r,2),hc(r));break}}t=t.return}}function lc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Ju;var l=new Set;r.set(t,l)}else void 0===(l=r.get(t))&&(l=new Set,r.set(t,l));l.has(n)||(us=!0,l.add(n),e=ac.bind(null,e,t,n),t.then(e,e))}function ac(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ts===e&&(rs&n)===n&&(4===cs||3===cs&&(62914560&rs)===rs&&300>ue()-bs?!(2&es)&&Us(e,0):ps|=n,hs===rs&&(hs=0)),hc(e)}function oc(e,t){0===t&&(t=Ne()),null!==(e=zr(e,t))&&(Le(e,t),hc(e))}function ic(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),oc(e,n)}function uc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(n=l.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),oc(e,n)}var sc=null,cc=null,fc=!1,dc=!1,pc=!1,mc=0;function hc(e){var t;e!==cc&&null===e.next&&(null===cc?sc=cc=e:cc=cc.next=e),dc=!0,fc||(fc=!0,t=yc,rf((function(){6&es?le(ce,t):t()})))}function gc(e,t){if(!pc&&dc){pc=!0;do{for(var n=!1,r=sc;null!==r;){if(!t)if(0!==e){var l=r.pendingLanes;if(0===l)var a=0;else{var o=r.suspendedLanes,i=r.pingedLanes;a=(1<<31-ke(42|e)+1)-1,a=201326677&(a&=l&~(o&~i))?201326677&a|1:a?2|a:0}0!==a&&(n=!0,kc(r,a))}else a=rs,!(3&(a=xe(r,r===ts?a:0)))||_e(r,a)||(n=!0,kc(r,a));r=r.next}}while(n);pc=!1}}function yc(){dc=fc=!1;var e,t=0;0!==mc&&(((e=window.event)&&"popstate"===e.type?e!==Jc&&(Jc=e,!0):(Jc=null,!1))&&(t=mc),mc=0);for(var n=ue(),r=null,l=sc;null!==l;){var a=l.next,o=vc(l,n);0===o?(l.next=null,null===r?sc=a:r.next=a,null===a&&(cc=r)):(r=l,(0!==t||3&o)&&(dc=!0)),l=a}gc(t,!1)}function vc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var o=31-ke(a),i=1<<o,u=l[o];-1===u?i&n&&!(i&r)||(l[o]=Pe(i,t)):u<=t&&(e.expiredLanes|=i),a&=~i}if(n=rs,n=xe(e,e===(t=ts)?n:0),r=e.callbackNode,0===n||e===t&&2===ls||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||_e(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),Re(n)){case 2:case 8:n=fe;break;case 32:default:n=de;break;case 268435456:n=me}return r=bc.bind(null,e),n=le(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function bc(e,t){var n=e.callbackNode;if(tc()&&e.callbackNode!==n)return null;var r=rs;return 0===(r=xe(e,e===ts?r:0))?null:(Os(e,r,t),vc(e,ue()),null!=e.callbackNode&&e.callbackNode===n?bc.bind(null,e):null)}function kc(e,t){if(tc())return null;Os(e,t,!0)}function wc(){return 0===mc&&(mc=ze()),mc}function Sc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:zt(""+e)}function Ec(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ac=0;Ac<wr.length;Ac++){var Cc=wr[Ac];Sr(Cc.toLowerCase(),"on"+(Cc[0].toUpperCase()+Cc.slice(1)))}Sr(pr,"onAnimationEnd"),Sr(mr,"onAnimationIteration"),Sr(hr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(gr,"onTransitionRun"),Sr(yr,"onTransitionStart"),Sr(vr,"onTransitionCancel"),Sr(br,"onTransitionEnd"),tt("onMouseEnter",["mouseout","mouseover"]),tt("onMouseLeave",["mouseout","mouseover"]),tt("onPointerEnter",["pointerout","pointerover"]),tt("onPointerLeave",["pointerout","pointerover"]),et("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),et("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),et("onBeforeInput",["compositionend","keypress","textInput","paste"]),et("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),et("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_c=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(xc));function Pc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){Io(e)}l.currentTarget=null,a=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){Io(e)}l.currentTarget=null,a=u}}}}function zc(e,t){var n=t[je];void 0===n&&(n=t[je]=new Set);var r=e+"__bubble";n.has(r)||(Oc(t,e,2,!1),n.add(r))}function Nc(e,t,n){var r=0;t&&(r|=4),Oc(n,e,r,t)}var Tc="_reactListening"+Math.random().toString(36).slice(2);function Lc(e){if(!e[Tc]){e[Tc]=!0,Ze.forEach((function(t){"selectionchange"!==t&&(_c.has(t)||Nc(t,!1,e),Nc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Tc]||(t[Tc]=!0,Nc("selectionchange",!1,t))}}function Oc(e,t,n,r){switch(Zf(t)){case 2:var l=Qf;break;case 8:l=qf;break;default:l=Yf}n=l.bind(null,t,n,e),l=void 0,!Mt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(l=!0),r?void 0!==l?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):void 0!==l?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function Ic(e,t,n,r,l){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===l||8===i.nodeType&&i.parentNode===l)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===l||8===u.nodeType&&u.parentNode===l))return;o=o.return}for(;null!==i;){if(null===(o=qe(i)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=a=o;continue e}i=i.parentNode}}r=r.return}Dt((function(){var r=a,l=Tt(n),o=[];e:{var i=kr.get(e);if(void 0!==i){var u=Zt,s=e;switch(e){case"keypress":if(0===$t(n))break e;case"keydown":case"keyup":u=mn;break;case"focusin":s="focus",u=ln;break;case"focusout":s="blur",u=ln;break;case"beforeblur":case"afterblur":u=ln;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=gn;break;case pr:case mr:case hr:u=an;break;case br:u=yn;break;case"scroll":case"scrollend":u=en;break;case"wheel":u=vn;break;case"copy":case"cut":case"paste":u=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=hn;break;case"toggle":case"beforetoggle":u=bn}var c=!!(4&t),f=!c&&("scroll"===e||"scrollend"===e),d=c?null!==i?i+"Capture":null:i;c=[];for(var p,m=r;null!==m;){var h=m;if(p=h.stateNode,5!==(h=h.tag)&&26!==h&&27!==h||null===p||null===d||null!=(h=Ft(m,d))&&c.push(Rc(m,h,p)),f)break;m=m.return}0<c.length&&(i=new u(i,s,null,n,l),o.push({event:i,listeners:c}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Nt||!(s=n.relatedTarget||n.fromElement)||!qe(s)&&!s[Ue])&&(u||i)&&(i=l.window===l?l:(i=l.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?qe(s):null)&&(f=F(s),c=s.tag,s!==f||5!==c&&27!==c&&6!==c)&&(s=null)):(u=null,s=r),u!==s)){if(c=nn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=hn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?i:Ke(u),p=null==s?i:Ke(s),(i=new c(h,m+"leave",u,n,l)).target=f,i.relatedTarget=p,h=null,qe(l)===r&&((c=new c(d,m+"enter",s,n,l)).target=p,c.relatedTarget=f,h=c),f=h,u&&s)e:{for(d=s,m=0,p=c=u;p;p=Fc(p))m++;for(p=0,h=d;h;h=Fc(h))p++;for(;0<m-p;)c=Fc(c),m--;for(;0<p-m;)d=Fc(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break e;c=Fc(c),d=Fc(d)}c=null}else c=null;null!==u&&Mc(o,i,u,c,!1),null!==s&&null!==f&&Mc(o,f,s,c,!0)}if("select"===(u=(i=r?Ke(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var g=Fn;else if(Tn(i))if(Mn)g=qn;else{g=Wn;var y=$n}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&xt(r.elementType)&&(g=Fn):g=Qn;switch(g&&(g=g(e,r))?Ln(o,g,n,l):(y&&y(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&vt(i,"number",i.value)),y=r?Ke(r):window,e){case"focusin":(Tn(y)||"true"===y.contentEditable)&&(rr=y,lr=r,ar=null);break;case"focusout":ar=lr=rr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(o,n,l);break;case"selectionchange":if(nr)break;case"keydown":case"keyup":ir(o,n,l)}var v;if(wn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zn?_n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&zn&&(v=Vt()):(jt="value"in(Ut=l)?Ut.value:Ut.textContent,zn=!0)),0<(y=Dc(r,b)).length&&(b=new un(b,e,null,n,l),o.push({event:b,listeners:y}),(v||null!==(v=Pn(n)))&&(b.data=v))),(v=En?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(xn=!0,Cn);case"textInput":return(e=t.data)===Cn&&xn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!wn&&_n(e,t)?(e=Vt(),Ht=jt=Ut=null,zn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Dc(r,"onBeforeInput")).length&&(y=new un("onBeforeInput","beforeinput",null,n,l),o.push({event:y,listeners:b}),y.data=v),function(e,t,n,r,l){if("submit"===t&&n&&n.stateNode===l){var a=Sc((l[Be]||null).action),o=r.submitter;o&&null!==(t=(t=o[Be]||null)?Sc(t.formAction):o.getAttribute("formAction"))&&(a=t,o=null);var i=new Zt("action","action",null,r,l);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==mc){var e=o?Ec(l,o):new FormData(l);co(n,{pending:!0,data:e,method:l.method,action:a},null,e)}}else"function"==typeof a&&(i.preventDefault(),e=o?Ec(l,o):new FormData(l),co(n,{pending:!0,data:e,method:l.method,action:a},a,e))},currentTarget:l}]})}}(o,e,r,n,l)}Pc(o,t)}))}function Rc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Dc(e,t){for(var n=t+"Capture",r=[];null!==e;){var l=e,a=l.stateNode;5!==(l=l.tag)&&26!==l&&27!==l||null===a||(null!=(l=Ft(e,n))&&r.unshift(Rc(e,l,a)),null!=(l=Ft(e,t))&&r.push(Rc(e,l,a))),e=e.return}return r}function Fc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Mc(e,t,n,r,l){for(var a=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,l?null!=(s=Ft(n,a))&&o.unshift(Rc(n,s,u)):l||null!=(s=Ft(n,a))&&o.push(Rc(n,s,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Bc=/\r\n?/g,Uc=/\u0000|\uFFFD/g;function jc(e){return("string"==typeof e?e:""+e).replace(Bc,"\n").replace(Uc,"")}function Hc(e,t){return t=jc(t),jc(e)===t}function Vc(){}function $c(e,t,n,r,l,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||St(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&St(e,""+r);break;case"className":it(e,"class",r);break;case"tabIndex":it(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":it(e,n,r);break;case"style":Ct(e,r,a);break;case"data":if("object"!==t){it(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=zt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&$c(e,t,"name",l.name,l,null),$c(e,t,"formEncType",l.formEncType,l,null),$c(e,t,"formMethod",l.formMethod,l,null),$c(e,t,"formTarget",l.formTarget,l,null)):($c(e,t,"encType",l.encType,l,null),$c(e,t,"method",l.method,l,null),$c(e,t,"target",l.target,l,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=zt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Vc);break;case"onScroll":null!=r&&zc("scroll",e);break;case"onScrollEnd":null!=r&&zc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=zt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":zc("beforetoggle",e),zc("toggle",e),ot(e,"popover",r);break;case"xlinkActuate":ut(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":ut(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":ut(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":ut(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":ut(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":ut(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":ut(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":ut(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":ut(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":ot(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&ot(e,n=_t.get(n)||n,r)}}function Wc(e,t,n,r,l,a){switch(n){case"style":Ct(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?St(e,r):("number"==typeof r||"bigint"==typeof r)&&St(e,""+r);break;case"onScroll":null!=r&&zc("scroll",e);break;case"onScrollEnd":null!=r&&zc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Vc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Je.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(l=n.endsWith("Capture"),t=n.slice(2,l?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Be]||null)?a[n]:null)&&e.removeEventListener(t,a,l),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):ot(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,l)))}}function Qc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":zc("error",e),zc("load",e);var r,l=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":l=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:$c(e,t,r,i,n,null)}}return a&&$c(e,t,"srcSet",n.srcSet,n,null),void(l&&$c(e,t,"src",n.src,n,null));case"input":zc("invalid",e);var u=r=i=a=null,s=null,c=null;for(l in n)if(n.hasOwnProperty(l)){var f=n[l];if(null!=f)switch(l){case"name":a=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:$c(e,t,l,f,n,null)}}return yt(e,r,u,s,c,i,a,!1),void ft(e);case"select":for(a in zc("invalid",e),l=i=r=null,n)if(n.hasOwnProperty(a)&&null!=(u=n[a]))switch(a){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":l=u;default:$c(e,t,a,u,n,null)}return t=r,n=i,e.multiple=!!l,void(null!=t?bt(e,!!l,t,!1):null!=n&&bt(e,!!l,n,!0));case"textarea":for(i in zc("invalid",e),r=a=l=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":l=u;break;case"defaultValue":a=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:$c(e,t,i,u,n,null)}return wt(e,l,a,r),void ft(e);case"option":for(s in n)n.hasOwnProperty(s)&&null!=(l=n[s])&&("selected"===s?e.selected=l&&"function"!=typeof l&&"symbol"!=typeof l:$c(e,t,s,l,n,null));return;case"dialog":zc("cancel",e),zc("close",e);break;case"iframe":case"object":zc("load",e);break;case"video":case"audio":for(l=0;l<xc.length;l++)zc(xc[l],e);break;case"image":zc("error",e),zc("load",e);break;case"details":zc("toggle",e);break;case"embed":case"source":case"link":zc("error",e),zc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(l=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:$c(e,t,c,l,n,null)}return;default:if(xt(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(l=n[f])&&Wc(e,t,f,l,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(l=n[u])&&$c(e,t,u,l,n,null)}var qc=null,Yc=null;function Kc(e){return 9===e.nodeType?e:e.ownerDocument}function Xc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Gc(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Zc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Jc=null,ef="function"==typeof setTimeout?setTimeout:void 0,tf="function"==typeof clearTimeout?clearTimeout:void 0,nf="function"==typeof Promise?Promise:void 0,rf="function"==typeof queueMicrotask?queueMicrotask:void 0!==nf?function(e){return nf.resolve(null).then(e).catch(lf)}:ef;function lf(e){setTimeout((function(){throw e}))}function af(e,t){var n=t,r=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&8===l.nodeType)if("/$"===(n=l.data)){if(0===r)return e.removeChild(l),void gd(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=l}while(n);gd(t)}function of(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":of(n),Qe(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function uf(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function sf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function cf(e,t,n){switch(t=Kc(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}var ff=new Map,df=new Set;function pf(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var mf=H.d;H.d={f:function(){var e=mf.f(),t=Ms();return e||t},r:function(e){var t=Ye(e);null!==t&&5===t.tag&&"form"===t.type?po(t):mf.r(e)},D:function(e){mf.D(e),gf("dns-prefetch",e,null)},C:function(e,t){mf.C(e,t),gf("preconnect",e,t)},L:function(e,t,n){mf.L(e,t,n);var r=hf;if(r&&e&&t){var l='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(l+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(l+='[imagesizes="'+ht(n.imageSizes)+'"]')):l+='[href="'+ht(e)+'"]';var a=l;switch(t){case"style":a=vf(e);break;case"script":a=wf(e)}ff.has(a)||(e=T({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),ff.set(a,e),null!==r.querySelector(l)||"style"===t&&r.querySelector(bf(a))||"script"===t&&r.querySelector(Sf(a))||(Qc(t=r.createElement("link"),"link",e),Ge(t),r.head.appendChild(t)))}},m:function(e,t){mf.m(e,t);var n=hf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",l='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',a=l;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=wf(e)}if(!ff.has(a)&&(e=T({rel:"modulepreload",href:e},t),ff.set(a,e),null===n.querySelector(l))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Sf(a)))return}Qc(r=n.createElement("link"),"link",e),Ge(r),n.head.appendChild(r)}}},X:function(e,t){mf.X(e,t);var n=hf;if(n&&e){var r=Xe(n).hoistableScripts,l=wf(e),a=r.get(l);a||((a=n.querySelector(Sf(l)))||(e=T({src:e,async:!0},t),(t=ff.get(l))&&xf(e,t),Ge(a=n.createElement("script")),Qc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}},S:function(e,t,n){mf.S(e,t,n);var r=hf;if(r&&e){var l=Xe(r).hoistableStyles,a=vf(e);t=t||"default";var o=l.get(a);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(bf(a)))i.loading=5;else{e=T({rel:"stylesheet",href:e,"data-precedence":t},n),(n=ff.get(a))&&Cf(e,n);var u=o=r.createElement("link");Ge(u),Qc(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Af(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},l.set(a,o)}}},M:function(e,t){mf.M(e,t);var n=hf;if(n&&e){var r=Xe(n).hoistableScripts,l=wf(e),a=r.get(l);a||((a=n.querySelector(Sf(l)))||(e=T({src:e,async:!0,type:"module"},t),(t=ff.get(l))&&xf(e,t),Ge(a=n.createElement("script")),Qc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}}};var hf="undefined"==typeof document?null:document;function gf(e,t,n){var r=hf;if(r&&"string"==typeof t&&t){var l=ht(t);l='link[rel="'+e+'"][href="'+l+'"]',"string"==typeof n&&(l+='[crossorigin="'+n+'"]'),df.has(l)||(df.add(l),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(l)&&(Qc(t=r.createElement("link"),"link",e),Ge(t),r.head.appendChild(t)))}}function yf(e,t,n,r){var l,a,i,u,s=(s=G.current)?pf(s):null;if(!s)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=vf(n.href),(r=(n=Xe(s).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=vf(n.href);var c=Xe(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(bf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),ff.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},ff.set(e,n),c||(l=s,a=e,i=n,u=f.state,l.querySelector('link[rel="preload"][as="style"]['+a+"]")?u.loading=1:(a=l.createElement("link"),u.preload=a,a.addEventListener("load",(function(){return u.loading|=1})),a.addEventListener("error",(function(){return u.loading|=2})),Qc(a,"link",i),Ge(a),l.head.appendChild(a))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=wf(n),(r=(n=Xe(s).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function vf(e){return'href="'+ht(e)+'"'}function bf(e){return'link[rel="stylesheet"]['+e+"]"}function kf(e){return T({},e,{"data-precedence":e.precedence,precedence:null})}function wf(e){return'[src="'+ht(e)+'"]'}function Sf(e){return"script[async]"+e}function Ef(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ge(r),r;var l=T({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ge(r=(e.ownerDocument||e).createElement("style")),Qc(r,"style",l),Af(r,n.precedence,e),t.instance=r;case"stylesheet":l=vf(n.href);var a=e.querySelector(bf(l));if(a)return t.state.loading|=4,t.instance=a,Ge(a),a;r=kf(n),(l=ff.get(l))&&Cf(r,l),Ge(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Qc(a,"link",r),t.state.loading|=4,Af(a,n.precedence,e),t.instance=a;case"script":return a=wf(n.src),(l=e.querySelector(Sf(a)))?(t.instance=l,Ge(l),l):(r=n,(l=ff.get(a))&&xf(r=T({},n),l),Ge(l=(e=e.ownerDocument||e).createElement("script")),Qc(l,"link",r),e.head.appendChild(l),t.instance=l);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Af(r,n.precedence,e));return t.instance}function Af(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),l=r.length?r[r.length-1]:null,a=l,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)a=i;else if(a!==l)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Cf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function xf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var _f=null;function Pf(e,t,n){if(null===_f){var r=new Map,l=_f=new Map;l.set(n,r)}else(r=(l=_f).get(n))||(r=new Map,l.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),l=0;l<n.length;l++){var a=n[l];if(!(a[We]||a[Me]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var o=a.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(a):r.set(o,[a])}}return r}function zf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Nf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Tf=null;function Lf(){}function Of(){if(this.count--,0===this.count)if(this.stylesheets)Rf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var If=null;function Rf(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,If=new Map,t.forEach(Df,e),If=null,Of.call(e))}function Df(e,t){if(!(4&t.state.loading)){var n=If.get(e);if(n)var r=n.get(null);else{n=new Map,If.set(e,n);for(var l=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<l.length;a++){var o=l[a];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(l=t.instance).getAttribute("data-precedence"),(a=n.get(o)||r)===r&&n.set(null,l),n.set(o,l),this.count++,r=Of.bind(this),l.addEventListener("load",r),l.addEventListener("error",r),a?a.parentNode.insertBefore(l,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(l,e.firstChild),t.state.loading|=4}}var Ff={$$typeof:g,Provider:null,Consumer:null,_currentValue:V,_currentValue2:V,_threadCount:0};function Mf(e,t,n,r,l,a,o,i){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Te(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Te(0),this.hiddenUpdates=Te(null),this.identifierPrefix=r,this.onUncaughtError=l,this.onCaughtError=a,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Bf(e,t,n,r,l,a,o,i,u,s,c,f){return e=new Mf(e,t,n,o,i,u,s,f),t=1,!0===a&&(t|=24),a=Ru(3,null,null,t),e.current=a,a.stateNode=e,(t=Ul()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},zi(a),e}function Uf(e){return e?e=Lr:Lr}function jf(e,t,n,r,l,a){l=Uf(l),null===r.context?r.context=l:r.pendingContext=l,(r=Ti(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=Li(e,r,t))&&(Ls(n,0,t),Oi(n,e,t))}function Hf(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vf(e,t){Hf(e,t),(e=e.alternate)&&Hf(e,t)}function $f(e){if(13===e.tag){var t=zr(e,67108864);null!==t&&Ls(t,0,67108864),Vf(e,67108864)}}var Wf=!0;function Qf(e,t,n,r){var l=N.T;N.T=null;var a=H.p;try{H.p=2,Yf(e,t,n,r)}finally{H.p=a,N.T=l}}function qf(e,t,n,r){var l=N.T;N.T=null;var a=H.p;try{H.p=8,Yf(e,t,n,r)}finally{H.p=a,N.T=l}}function Yf(e,t,n,r){if(Wf){var l=Kf(r);if(null===l)Ic(e,t,r,Xf,n),id(e,r);else if(function(e,t,n,r,l){switch(t){case"focusin":return ed=ud(ed,e,t,n,r,l),!0;case"dragenter":return td=ud(td,e,t,n,r,l),!0;case"mouseover":return nd=ud(nd,e,t,n,r,l),!0;case"pointerover":var a=l.pointerId;return rd.set(a,ud(rd.get(a)||null,e,t,n,r,l)),!0;case"gotpointercapture":return a=l.pointerId,ld.set(a,ud(ld.get(a)||null,e,t,n,r,l)),!0}return!1}(l,e,t,n,r))r.stopPropagation();else if(id(e,r),4&t&&-1<od.indexOf(e)){for(;null!==l;){var a=Ye(l);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var o=Ce(a.pendingLanes);if(0!==o){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-ke(o);i.entanglements[1]|=u,o&=~u}hc(a),!(6&es)&&(ks=ue()+500,gc(0,!1))}}break;case 13:null!==(i=zr(a,2))&&Ls(i,0,2),Ms(),Vf(a,2)}if(null===(a=Kf(r))&&Ic(e,t,r,Xf,n),a===l)break;l=a}null!==l&&r.stopPropagation()}else Ic(e,t,r,null,n)}}function Kf(e){return Gf(e=Tt(e))}var Xf=null;function Gf(e){if(Xf=null,null!==(e=qe(e))){var t=F(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=M(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Xf=e,null}function Zf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(se()){case ce:return 2;case fe:return 8;case de:case pe:return 32;case me:return 268435456;default:return 32}default:return 32}}var Jf=!1,ed=null,td=null,nd=null,rd=new Map,ld=new Map,ad=[],od="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function id(e,t){switch(e){case"focusin":case"focusout":ed=null;break;case"dragenter":case"dragleave":td=null;break;case"mouseover":case"mouseout":nd=null;break;case"pointerover":case"pointerout":rd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ld.delete(t.pointerId)}}function ud(e,t,n,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==t&&null!==(t=Ye(t))&&$f(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==l&&-1===t.indexOf(l)&&t.push(l),e)}function sd(e){var t=qe(e.target);if(null!==t){var n=F(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=M(n)))return e.blockedOn=t,void function(e){var t=H.p;try{return H.p=e,function(){if(13===n.tag){var e=Ns(),t=zr(n,e);null!==t&&Ls(t,0,e),Vf(n,e)}}()}finally{H.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function cd(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kf(e.nativeEvent);if(null!==n)return null!==(t=Ye(n))&&$f(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Nt=r,n.target.dispatchEvent(r),Nt=null,t.shift()}return!0}function fd(e,t,n){cd(e)&&n.delete(t)}function dd(){Jf=!1,null!==ed&&cd(ed)&&(ed=null),null!==td&&cd(td)&&(td=null),null!==nd&&cd(nd)&&(nd=null),rd.forEach(fd),ld.forEach(fd)}function pd(e,t){e.blockedOn===t&&(e.blockedOn=null,Jf||(Jf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,dd)))}var md=null;function hd(e){md!==e&&(md=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){md===e&&(md=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],l=e[t+2];if("function"!=typeof r){if(null===Gf(r||n))continue;break}var a=Ye(n);null!==a&&(e.splice(t,3),t-=3,co(a,{pending:!0,data:l,method:n.method,action:r},r,l))}})))}function gd(e){function t(t){return pd(t,e)}null!==ed&&pd(ed,e),null!==td&&pd(td,e),null!==nd&&pd(nd,e),rd.forEach(t),ld.forEach(t);for(var n=0;n<ad.length;n++){var r=ad[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<ad.length&&null===(n=ad[0]).blockedOn;)sd(n),null===n.blockedOn&&ad.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var l=n[r],a=n[r+1],o=l[Be]||null;if("function"==typeof a)o||hd(n);else if(o){var i=null;if(a&&a.hasAttribute("formAction")){if(l=a,o=a[Be]||null)i=o.formAction;else if(null!==Gf(l))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),hd(n)}}}function yd(e){this._internalRoot=e}function vd(e){this._internalRoot=e}vd.prototype.render=yd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));jf(t.current,Ns(),e,t,null,null)},vd.prototype.unmount=yd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&tc(),jf(e.current,2,null,e,null,null),Ms(),t[Ue]=null}},vd.prototype.unstable_scheduleHydration=function(e){if(e){var t=De();e={blockedOn:null,target:e,priority:t};for(var n=0;n<ad.length&&0!==t&&t<ad[n].priority;n++);ad.splice(n,0,e),0===n&&sd(e)}};var bd=l.version;if("19.0.0"!==bd)throw Error(o(527,bd,"19.0.0"));H.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=F(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){n=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===n)return B(l),e;if(a===r)return B(l),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=l,r=a;else{for(var i=!1,u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?U(e):null)?null:e.stateNode};var kd={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:N,findFiberByHostInstance:qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wd.isDisabled&&wd.supportsFiber)try{ye=wd.inject(kd),ve=wd}catch(e){}}t.createRoot=function(e,t){if(!i(e))throw Error(o(299));var n=!1,r="",l=Ro,a=Do,u=Fo;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(l=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=Bf(e,1,!1,null,0,n,r,l,a,u,0,null),e[Ue]=t.current,Lc(8===e.nodeType?e.parentNode:e),new yd(t)},t.hydrateRoot=function(e,t,n){if(!i(e))throw Error(o(299));var r=!1,l="",a=Ro,u=Do,s=Fo,c=null;return null!=n&&(!0===n.unstable_strictMode&&(r=!0),void 0!==n.identifierPrefix&&(l=n.identifierPrefix),void 0!==n.onUncaughtError&&(a=n.onUncaughtError),void 0!==n.onCaughtError&&(u=n.onCaughtError),void 0!==n.onRecoverableError&&(s=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks,void 0!==n.formState&&(c=n.formState)),(t=Bf(e,1,!0,t,0,r,l,a,u,s,0,c)).context=Uf(null),n=t.current,(l=Ti(r=Ns())).callback=null,Li(n,l,r),t.current.lanes=r,Le(t,r),hc(t),e[Ue]=t.current,Lc(e),new vd(t)},t.version="19.0.0"},259:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),l=n.n(r),a=n(314),o=n.n(a)()(l());o.push([e.id,'.Notifications {\n    border: 0.1rem dotted rgb(244, 19, 124);\n    position: absolute;\n    top: 0.5rem;\n    right: 2rem;\n    color: black;\n    height: 19vh;\n    width: 40%;\n    padding: 0.1rem;\n}\n\np {\n    font-weight: bold;\n}\n\nli[data-priority="default"] {\n    color: blue;\n}\n\nli[data-priority="urgent"], li {\n    color: red;\n}\n',"",{version:3,sources:["webpack://./src/Notifications.css"],names:[],mappings:"AAAA;IACI,uCAAuC;IACvC,kBAAkB;IAClB,WAAW;IACX,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,UAAU;AACd",sourcesContent:['.Notifications {\n    border: 0.1rem dotted rgb(244, 19, 124);\n    position: absolute;\n    top: 0.5rem;\n    right: 2rem;\n    color: black;\n    height: 19vh;\n    width: 40%;\n    padding: 0.1rem;\n}\n\np {\n    font-weight: bold;\n}\n\nli[data-priority="default"] {\n    color: blue;\n}\n\nli[data-priority="urgent"], li {\n    color: red;\n}\n'],sourceRoot:""}]);const i=o},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,l,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),l&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=l):c[4]="".concat(l)),t.push(c))}},t}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(l," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,l=e[r];if(!(0<a(l,t)))break e;e[r]=t,e[n]=l,n=r}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,l=e.length,o=l>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>a(u,n))s<l&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else{if(!(s<l&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var t=r(c);null!==t;){if(null===t.callback)l(c);else{if(!(t.startTime<=e))break;l(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(g=!1,k(e),!h)if(null!==r(s))h=!0,T();else{var t=r(c);null!==t&&L(w,t.startTime-e)}}var S,E=!1,A=-1,C=5,x=-1;function _(){return!(t.unstable_now()-x<C)}function P(){if(E){var e=t.unstable_now();x=e;var n=!0;try{e:{h=!1,g&&(g=!1,v(A),A=-1),m=!0;var a=p;try{t:{for(k(e),d=r(s);null!==d&&!(d.expirationTime>e&&_());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,k(e),n=!0;break t}d===r(s)&&l(s),k(e)}else l(s);d=r(s)}if(null!==d)n=!0;else{var u=r(c);null!==u&&L(w,u.startTime-e),n=!1}}break e}finally{d=null,p=a,m=!1}n=void 0}}finally{n?S():E=!1}}}if("function"==typeof b)S=function(){b(P)};else if("undefined"!=typeof MessageChannel){var z=new MessageChannel,N=z.port2;z.port1.onmessage=P,S=function(){N.postMessage(null)}}else S=function(){y(P,0)};function T(){E||(E=!0,S())}function L(e,n){A=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||m||(h=!0,T())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,l,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:l,priorityLevel:e,startTime:a,expirationTime:i=a+i,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(g?(v(A),A=-1):g=!0,L(w,a-o))):(e.sortIndex=i,n(s,e),h||m||(h=!0,T())),e},t.unstable_shouldYield=_,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},626:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(354),l=n.n(r),a=n(314),o=n.n(a)()(l());o.push([e.id,"* {\n    scroll-behavior: smooth;\n}\n\n.container {\n    width: 100%;\n    height: 100vh;\n    margin: 0;\n}\n\n.App-header {\n    height: 10rem;\n    width: 100%;\n    border-bottom: 0.3rem solid rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.App-header img {\n    height: 9rem;\n    aspect-ratio: 1;\n}\n\n.App-header h1 {\n    display: inline;\n    color: rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 3rem;\n    left: 12rem;\n    font-weight: bolder;\n    font-size: 2.5rem;\n}\n\n.App-body {\n    position: absolute;\n    top: 10rem;\n    left: 2rem;\n    font-size: 1.5rem;\n    width: 100%;\n}\n\n.App-footer {\n    position: absolute;\n    bottom: 0.5rem;\n    width: 100%;\n    border-top: 0.3rem solid rgba(241, 34, 110, 0.95);\n    font-size: 1.5rem;\n    font-style: italic;\n    text-align: center;\n}\n\n.Input {\n    position: relative;\n    top: -0.5rem;\n    display: flex;\n    flex-direction: row;\n    width: 50%;\n    height: 2rem;\n    justify-content: flex-start;\n    align-items: center;\n    \n}\n\nlabel {\n    padding-right: 0.5rem;\n    padding-left: 0;\n}\n\n.Email input {\n    flex-grow: 2;\n}\n\n.Password label {\n    padding-left: 0.4rem;\n}\n\nbutton {\n    margin-left: 0.5rem;\n    font-weight: bold;\n    font-size: 1rem;\n    cursor: pointer;\n}\n\n\n","",{version:3,sources:["webpack://./src/App.css"],names:[],mappings:"AAAA;IACI,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,WAAW;IACX,oDAAoD;IACpD,kBAAkB;IAClB,MAAM;IACN,OAAO;AACX;;AAEA;IACI,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,+BAA+B;IAC/B,kBAAkB;IAClB,SAAS;IACT,WAAW;IACX,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,UAAU;IACV,iBAAiB;IACjB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,cAAc;IACd,WAAW;IACX,iDAAiD;IACjD,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,UAAU;IACV,YAAY;IACZ,2BAA2B;IAC3B,mBAAmB;;AAEvB;;AAEA;IACI,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,eAAe;AACnB",sourcesContent:["* {\n    scroll-behavior: smooth;\n}\n\n.container {\n    width: 100%;\n    height: 100vh;\n    margin: 0;\n}\n\n.App-header {\n    height: 10rem;\n    width: 100%;\n    border-bottom: 0.3rem solid rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.App-header img {\n    height: 9rem;\n    aspect-ratio: 1;\n}\n\n.App-header h1 {\n    display: inline;\n    color: rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 3rem;\n    left: 12rem;\n    font-weight: bolder;\n    font-size: 2.5rem;\n}\n\n.App-body {\n    position: absolute;\n    top: 10rem;\n    left: 2rem;\n    font-size: 1.5rem;\n    width: 100%;\n}\n\n.App-footer {\n    position: absolute;\n    bottom: 0.5rem;\n    width: 100%;\n    border-top: 0.3rem solid rgba(241, 34, 110, 0.95);\n    font-size: 1.5rem;\n    font-style: italic;\n    text-align: center;\n}\n\n.Input {\n    position: relative;\n    top: -0.5rem;\n    display: flex;\n    flex-direction: row;\n    width: 50%;\n    height: 2rem;\n    justify-content: flex-start;\n    align-items: center;\n    \n}\n\nlabel {\n    padding-right: 0.5rem;\n    padding-left: 0;\n}\n\n.Email input {\n    flex-grow: 2;\n}\n\n.Password label {\n    padding-left: 0.4rem;\n}\n\nbutton {\n    margin-left: 0.5rem;\n    font-weight: bold;\n    font-size: 1rem;\n    cursor: pointer;\n}\n\n\n"],sourceRoot:""}]);const i=o},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var l=void 0!==n.layer;l&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,l&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var k=b.prototype=new v;k.constructor=b,h(k,y.prototype),k.isPureReactComponent=!0;var w=Array.isArray,S={H:null,A:null,T:null,S:null},E=Object.prototype.hasOwnProperty;function A(e,t,r,l,a,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function P(){}function z(e,t,l,a,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case d:return z((c=e._init)(e._payload),t,l,a,o)}}if(c)return o=o(e),c=""===a?"."+_(e,0):a,w(o)?(l="",null!=c&&(l=c.replace(x,"$&/")+"/"),z(o,t,l,"",(function(e){return e}))):null!=o&&(C(o)&&(u=o,s=l+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(x,"$&/")+"/")+c,o=A(u.type,s,void 0,0,0,u.props)),t.push(o)),1;c=0;var f,m=""===a?".":a+":";if(w(e))for(var h=0;h<e.length;h++)c+=z(a=e[h],t,l,i=m+_(a,h),o);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(a=e.next()).done;)c+=z(a=a.value,t,l,i=m+_(a,h++),o);else if("object"===i){if("function"==typeof e.then)return z(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(P,P):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,l,a,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function N(e,t,n){if(null==e)return e;var r=[],l=0;return z(e,r,"","",(function(e){return t.call(n,e,l++)})),r}function T(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function O(){}t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=l,t.Profiler=o,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),l=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(l=""+t.key),t)!E.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var o=Array(a),i=0;i<a;i++)o[i]=arguments[i+2];r.children=o}return A(e.type,l,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,l={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(l[r]=t[r]);var o=arguments.length-2;if(1===o)l.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];l.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===l[r]&&(l[r]=o[r]);return A(e,a,void 0,0,0,l)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=S.T,n={};S.T=n;try{var r=e(),l=S.S;null!==l&&l(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(O,L)}catch(e){L(e)}finally{S.T=t}},t.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},t.use=function(e){return S.H.use(e)},t.useActionState=function(e,t,n){return S.H.useActionState(e,t,n)},t.useCallback=function(e,t){return S.H.useCallback(e,t)},t.useContext=function(e){return S.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return S.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return S.H.useEffect(e,t)},t.useId=function(){return S.H.useId()},t.useImperativeHandle=function(e,t,n){return S.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return S.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return S.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return S.H.useMemo(e,t)},t.useOptimistic=function(e,t){return S.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return S.H.useReducer(e,t,n)},t.useRef=function(e){return S.H.useRef(e)},t.useState=function(e){return S.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return S.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return S.H.useTransition()},t.version="19.0.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},t={};function n(r){var l=t[r];if(void 0!==l)return l.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var l=r.length-1;l>-1&&(!e||!/^http(s?):/.test(e));)e=r[l--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0;var r=n(540),l=n(338);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function o(e){var t=function(e){if("object"!=a(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==a(t)?t:t+""}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,o(r.key),r)}}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}const c=n.p+"images/0d8d2e9fad650c65630c.jpg";var f=n(72),d=n.n(f),p=n(825),m=n.n(p),h=n(659),g=n.n(h),y=n(56),v=n.n(y),b=n(159),k=n.n(b),w=n(113),S=n.n(w),E=n(626),A={};function C(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(C=function(){return!!e})()}A.styleTagTransform=S(),A.setAttributes=v(),A.insert=g().bind(null,"head"),A.domAPI=m(),A.insertStyleElement=k(),d()(E.A,A),E.A&&E.A.locals&&E.A.locals;var x=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e=this,r=arguments,n=u(n=t),function(e,t){if(t&&("object"==a(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,C()?Reflect.construct(n,r||[],u(e).constructor):n.apply(e,r));var e,n,r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(t,e),n=t,(l=[{key:"render",value:function(){return r.createElement("div",{className:"container"},r.createElement("div",{className:"App-header"},r.createElement("header",null,r.createElement("img",{src:c,alt:"ALX-Logo"}),r.createElement("h1",null,"School dashboard"))),r.createElement("div",{className:"App-body"},r.createElement("p",null,"Login to access the full dashboard"),r.createElement("div",{className:"Input"},r.createElement("div",{className:"Email"},r.createElement("label",{htmlFor:"email"},"Email:"),r.createElement("input",{id:"email",name:"email",type:"email"})),r.createElement("div",{className:"Password"},r.createElement("label",{htmlFor:"password"},"Password:"),r.createElement("input",{id:"password",type:"password",name:"password"})),r.createElement("button",null,"OK"))),r.createElement("div",{className:"App-footer"},r.createElement("footer",null,r.createElement("p",null,"Copyright ",(new Date).getFullYear()," - ","ALX"))))}}])&&i(n.prototype,l),Object.defineProperty(n,"prototype",{writable:!1}),n;var n,l}(r.Component),_=n(259),P={};P.styleTagTransform=S(),P.setAttributes=v(),P.insert=g().bind(null,"head"),P.domAPI=m(),P.insertStyleElement=k(),d()(_.A,P),_.A&&_.A.locals&&_.A.locals;const z=n.p+"images/efd4ee236dd3e13da61c.png";function N(){return r.createElement("div",{className:"Notifications"},r.createElement("p",null,"Here is the list of notifications"),r.createElement("ul",null,r.createElement("li",{"data-priority":"default"},"New course available"),r.createElement("li",{"data-priority":"urgent"},"New resume available"),r.createElement("li",{dangerouslySetInnerHTML:{__html:"<strong>Urgent requirement</strong> - complete by EOD"}})),r.createElement("button",{style:{ariaLabel:"Close",position:"absolute",top:"0.1rem",right:"0"},onClick:function(){return console.log("Close button has been clicked")}},r.createElement("img",{src:z,style:{width:"1rem",height:"1rem",objectFit:"contain",backgroundColor:"white",margin:"0.1rem"}})))}l.createRoot(document.getElementById("root")).render(r.createElement(r.StrictMode,null,r.createElement(x,null))),l.createRoot(document.getElementById("root-notifications")).render(r.createElement(r.StrictMode,null,r.createElement(N,null)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,