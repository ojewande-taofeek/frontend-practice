/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},o=[],i=0;i<e.length;i++){var u=e[i],s=r.base?u[0]+r.base:u[0],c=a[s]||0,f="".concat(s," ").concat(c);a[s]=c+1;var d=t(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var m=l(p,r);r.byIndex=i,n.splice(i,0,{identifier:f,updater:m,references:1})}o.push(f)}return o}function l(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,l){var a=r(e=e||[],l=l||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var i=t(a[o]);n[i].references--}for(var u=r(e,l),s=0;s<a.length;s++){var c=t(a[s]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=u}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},126:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),l=t.n(r),a=t(314),o=t.n(a)()(l());o.push([e.id,"* {\n    scroll-behavior: smooth;\n}\n\n.container {\n    width: 100%;\n    height: 100vh;\n    margin: 0;\n}\n\n.App-header {\n    height: 10rem;\n    width: 100%;\n    border-bottom: 0.3rem solid rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 0;\n    left: 0;\n    @media only screen and (max-width: 800px) {\n        top: 8rem;\n        height: 7rem;\n        border-bottom: 0.2rem solid rgba(241, 34, 110, 0.95);\n    }\n}\n\n.App-header img {\n    height: 9rem;\n    aspect-ratio: 1;\n    @media only screen and (max-width: 800px) {\n        height: 7rem;\n    }\n}\n\n.App-header h1 {\n    display: inline;\n    color: rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 3rem;\n    left: 12rem;\n    font-weight: bolder;\n    font-size: 2.5rem;\n    @media only screen and (max-width: 800px) {\n        font-size: 1.5rem;\n        left: 8rem;\n    }\n}\n\n.App-body {\n    position: absolute;\n    top: 10rem;\n    left: 2rem;\n    font-size: 1.5rem;\n    width: 100%;\n    @media only screen and (max-width: 800px) {\n        top: 15rem;\n        font-size: 1rem;\n        left: 1rem;\n    }\n}\n\n.App-footer {\n    position: absolute;\n    bottom: 0.5rem;\n    width: 100%;\n    border-top: 0.3rem solid rgba(241, 34, 110, 0.95);\n    font-size: 1.5rem;\n    font-style: italic;\n    text-align: center;\n    @media only screen and (max-width: 800px) {\n        bottom: 0.2rem;\n        font-size: 1rem;\n        border-top: 0.2rem solid rgba(241, 34, 110, 0.95);\n    }\n}\n\n.Input {\n    position: relative;\n    top: -0.5rem;\n    display: flex;\n    flex-direction: row;\n    width: 50%;\n    height: 2rem;\n    justify-content: flex-start;\n    align-items: center;\n    @media only screen and (max-width: 800px) {\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: space-around;\n    }\n    \n}\n\nlabel {\n    padding-right: 0.5rem;\n    padding-left: 0;  \n}\n\n.Email input {\n    flex-grow: 2;\n}\n\n.Password label {\n    padding-left: 0.4rem;\n    @media only screen and (max-width: 800px) {\n       padding-left: 0.1rem;\n    }\n}\n\nbutton {\n    margin-left: 0.5rem;\n    font-weight: bold;\n    font-size: 1rem;\n    cursor: pointer;\n    @media only screen and (max-width: 800px) {\n       margin-left: 0;\n       margin-top: 0.5rem;\n       font-size: 0.5rem;\n    }\n}\n\n.Email {\n    @media only screen and (max-width: 800px) {\n       margin-top: 0.5rem;\n    }\n\n}\n\n.Password {\n    @media only screen and (max-width: 800px) {\n       margin-top: 0.5rem;\n    }\n\n}\n\n\n","",{version:3,sources:["webpack://./src/App/App.css"],names:[],mappings:"AAAA;IACI,uBAAuB;AAC3B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;IACb,WAAW;IACX,oDAAoD;IACpD,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP;QACI,SAAS;QACT,YAAY;QACZ,oDAAoD;IACxD;AACJ;;AAEA;IACI,YAAY;IACZ,eAAe;IACf;QACI,YAAY;IAChB;AACJ;;AAEA;IACI,eAAe;IACf,+BAA+B;IAC/B,kBAAkB;IAClB,SAAS;IACT,WAAW;IACX,mBAAmB;IACnB,iBAAiB;IACjB;QACI,iBAAiB;QACjB,UAAU;IACd;AACJ;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,UAAU;IACV,iBAAiB;IACjB,WAAW;IACX;QACI,UAAU;QACV,eAAe;QACf,UAAU;IACd;AACJ;;AAEA;IACI,kBAAkB;IAClB,cAAc;IACd,WAAW;IACX,iDAAiD;IACjD,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;IAClB;QACI,cAAc;QACd,eAAe;QACf,iDAAiD;IACrD;AACJ;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,UAAU;IACV,YAAY;IACZ,2BAA2B;IAC3B,mBAAmB;IACnB;QACI,sBAAsB;QACtB,uBAAuB;QACvB,6BAA6B;IACjC;;AAEJ;;AAEA;IACI,qBAAqB;IACrB,eAAe;AACnB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,oBAAoB;IACpB;OACG,oBAAoB;IACvB;AACJ;;AAEA;IACI,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,eAAe;IACf;OACG,cAAc;OACd,kBAAkB;OAClB,iBAAiB;IACpB;AACJ;;AAEA;IACI;OACG,kBAAkB;IACrB;;AAEJ;;AAEA;IACI;OACG,kBAAkB;IACrB;;AAEJ",sourcesContent:["* {\n    scroll-behavior: smooth;\n}\n\n.container {\n    width: 100%;\n    height: 100vh;\n    margin: 0;\n}\n\n.App-header {\n    height: 10rem;\n    width: 100%;\n    border-bottom: 0.3rem solid rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 0;\n    left: 0;\n    @media only screen and (max-width: 800px) {\n        top: 8rem;\n        height: 7rem;\n        border-bottom: 0.2rem solid rgba(241, 34, 110, 0.95);\n    }\n}\n\n.App-header img {\n    height: 9rem;\n    aspect-ratio: 1;\n    @media only screen and (max-width: 800px) {\n        height: 7rem;\n    }\n}\n\n.App-header h1 {\n    display: inline;\n    color: rgba(241, 34, 110, 0.95);\n    position: absolute;\n    top: 3rem;\n    left: 12rem;\n    font-weight: bolder;\n    font-size: 2.5rem;\n    @media only screen and (max-width: 800px) {\n        font-size: 1.5rem;\n        left: 8rem;\n    }\n}\n\n.App-body {\n    position: absolute;\n    top: 10rem;\n    left: 2rem;\n    font-size: 1.5rem;\n    width: 100%;\n    @media only screen and (max-width: 800px) {\n        top: 15rem;\n        font-size: 1rem;\n        left: 1rem;\n    }\n}\n\n.App-footer {\n    position: absolute;\n    bottom: 0.5rem;\n    width: 100%;\n    border-top: 0.3rem solid rgba(241, 34, 110, 0.95);\n    font-size: 1.5rem;\n    font-style: italic;\n    text-align: center;\n    @media only screen and (max-width: 800px) {\n        bottom: 0.2rem;\n        font-size: 1rem;\n        border-top: 0.2rem solid rgba(241, 34, 110, 0.95);\n    }\n}\n\n.Input {\n    position: relative;\n    top: -0.5rem;\n    display: flex;\n    flex-direction: row;\n    width: 50%;\n    height: 2rem;\n    justify-content: flex-start;\n    align-items: center;\n    @media only screen and (max-width: 800px) {\n        flex-direction: column;\n        align-items: flex-start;\n        justify-content: space-around;\n    }\n    \n}\n\nlabel {\n    padding-right: 0.5rem;\n    padding-left: 0;  \n}\n\n.Email input {\n    flex-grow: 2;\n}\n\n.Password label {\n    padding-left: 0.4rem;\n    @media only screen and (max-width: 800px) {\n       padding-left: 0.1rem;\n    }\n}\n\nbutton {\n    margin-left: 0.5rem;\n    font-weight: bold;\n    font-size: 1rem;\n    cursor: pointer;\n    @media only screen and (max-width: 800px) {\n       margin-left: 0;\n       margin-top: 0.5rem;\n       font-size: 0.5rem;\n    }\n}\n\n.Email {\n    @media only screen and (max-width: 800px) {\n       margin-top: 0.5rem;\n    }\n\n}\n\n.Password {\n    @media only screen and (max-width: 800px) {\n       margin-top: 0.5rem;\n    }\n\n}\n\n\n"],sourceRoot:""}]);const i=o},159:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},221:(e,n,t)=>{var r=t(540);function l(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var o={d:{f:a,r:function(){throw Error(l(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function s(e,n){return"font"===e?"":"string"==typeof n?"use-credentials"===n?n:"":void 0}n.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!n||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(l(299));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.flushSync=function(e){var n=u.T,t=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=n,o.p=t,o.d.f()}},n.preconnect=function(e,n){"string"==typeof e&&(n=n?"string"==typeof(n=n.crossOrigin)?"use-credentials"===n?n:"":void 0:null,o.d.C(e,n))},n.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},n.preinit=function(e,n){if("string"==typeof e&&n&&"string"==typeof n.as){var t=n.as,r=s(t,n.crossOrigin),l="string"==typeof n.integrity?n.integrity:void 0,a="string"==typeof n.fetchPriority?n.fetchPriority:void 0;"style"===t?o.d.S(e,"string"==typeof n.precedence?n.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:a}):"script"===t&&o.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:a,nonce:"string"==typeof n.nonce?n.nonce:void 0})}},n.preinitModule=function(e,n){if("string"==typeof e)if("object"==typeof n&&null!==n){if(null==n.as||"script"===n.as){var t=s(n.as,n.crossOrigin);o.d.M(e,{crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0})}}else null==n&&o.d.M(e)},n.preload=function(e,n){if("string"==typeof e&&"object"==typeof n&&null!==n&&"string"==typeof n.as){var t=n.as,r=s(t,n.crossOrigin);o.d.L(e,t,{crossOrigin:r,integrity:"string"==typeof n.integrity?n.integrity:void 0,nonce:"string"==typeof n.nonce?n.nonce:void 0,type:"string"==typeof n.type?n.type:void 0,fetchPriority:"string"==typeof n.fetchPriority?n.fetchPriority:void 0,referrerPolicy:"string"==typeof n.referrerPolicy?n.referrerPolicy:void 0,imageSrcSet:"string"==typeof n.imageSrcSet?n.imageSrcSet:void 0,imageSizes:"string"==typeof n.imageSizes?n.imageSizes:void 0,media:"string"==typeof n.media?n.media:void 0})}},n.preloadModule=function(e,n){if("string"==typeof e)if(n){var t=s(n.as,n.crossOrigin);o.d.m(e,{as:"string"==typeof n.as&&"script"!==n.as?n.as:void 0,crossOrigin:t,integrity:"string"==typeof n.integrity?n.integrity:void 0})}else o.d.m(e)},n.requestFormReset=function(e){o.d.r(e)},n.unstable_batchedUpdates=function(e,n){return e(n)},n.useFormState=function(e,n,t){return u.H.useFormState(e,n,t)},n.useFormStatus=function(){return u.H.useHostTransitionStatus()},n.version="19.0.0"},247:(e,n,t)=>{var r=t(982),l=t(540),a=t(961);function o(e){var n="https://react.dev/errors/"+e;if(1<arguments.length){n+="?args[]="+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t])}return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}var u=Symbol.for("react.element"),s=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),f=Symbol.for("react.fragment"),d=Symbol.for("react.strict_mode"),p=Symbol.for("react.profiler"),m=Symbol.for("react.provider"),h=Symbol.for("react.consumer"),g=Symbol.for("react.context"),y=Symbol.for("react.forward_ref"),v=Symbol.for("react.suspense"),b=Symbol.for("react.suspense_list"),k=Symbol.for("react.memo"),w=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var S=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var A=Symbol.for("react.memo_cache_sentinel"),C=Symbol.iterator;function E(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=C&&e[C]||e["@@iterator"])?e:null}var x=Symbol.for("react.client.reference");function _(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===x?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case f:return"Fragment";case c:return"Portal";case p:return"Profiler";case d:return"StrictMode";case v:return"Suspense";case b:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case g:return(e.displayName||"Context")+".Provider";case h:return(e._context.displayName||"Context")+".Consumer";case y:var n=e.render;return(e=e.displayName)||(e=""!==(e=n.displayName||n.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case k:return null!==(n=e.displayName||null)?n:_(e.type)||"Memo";case w:n=e._payload,e=e._init;try{return _(e(n))}catch(e){}}return null}var P,z,N=l.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,T=Object.assign;function L(e){if(void 0===P)try{throw Error()}catch(e){var n=e.stack.trim().match(/\n( *(at )?)/);P=n&&n[1]||"",z=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+P+e+z}var I=!1;function O(e,n){if(!e||I)return"";I=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(n){var t=function(){throw Error()};if(Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}}else{try{throw Error()}catch(e){r=e}(t=e())&&"function"==typeof t.catch&&t.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var l=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");l&&l.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),o=a[0],i=a[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(l=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;l<s.length&&!s[l].includes("DetermineComponentFrameRoot");)l++;if(r===u.length||l===s.length)for(r=u.length-1,l=s.length-1;1<=r&&0<=l&&u[r]!==s[l];)l--;for(;1<=r&&0<=l;r--,l--)if(u[r]!==s[l]){if(1!==r||1!==l)do{if(r--,0>--l||u[r]!==s[l]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=l);break}}}finally{I=!1,Error.prepareStackTrace=t}return(t=e?e.displayName||e.name:"")?L(t):""}function R(e){switch(e.tag){case 26:case 27:case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 15:return O(e.type,!1);case 11:return O(e.type.render,!1);case 1:return O(e.type,!0);default:return""}}function D(e){try{var n="";do{n+=R(e),e=e.return}while(e);return n}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function F(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do{!!(4098&(n=e).flags)&&(t=n.return),e=n.return}while(e)}return 3===n.tag?t:null}function M(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function B(e){if(F(e)!==e)throw Error(o(188))}function U(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e;for(e=e.child;null!==e;){if(null!==(n=U(e)))return n;e=e.sibling}return null}var j=Array.isArray,H=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,V={pending:!1,data:null,method:null,action:null},$=[],Q=-1;function W(e){return{current:e}}function q(e){0>Q||(e.current=$[Q],$[Q]=null,Q--)}function Y(e,n){Q++,$[Q]=e.current,e.current=n}var K=W(null),X=W(null),G=W(null),J=W(null);function Z(e,n){switch(Y(G,n),Y(X,e),Y(K,null),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)&&(n=n.namespaceURI)?Xc(n):0;break;default:if(n=(e=8===e?n.parentNode:n).tagName,e=e.namespaceURI)n=Gc(e=Xc(e),n);else switch(n){case"svg":n=1;break;case"math":n=2;break;default:n=0}}q(K),Y(K,n)}function ee(){q(K),q(X),q(G)}function ne(e){null!==e.memoizedState&&Y(J,e);var n=K.current,t=Gc(n,e.type);n!==t&&(Y(X,e),Y(K,t))}function te(e){X.current===e&&(q(K),q(X)),J.current===e&&(q(J),Ff._currentValue=V)}var re=Object.prototype.hasOwnProperty,le=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,oe=r.unstable_shouldYield,ie=r.unstable_requestPaint,ue=r.unstable_now,se=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,fe=r.unstable_UserBlockingPriority,de=r.unstable_NormalPriority,pe=r.unstable_LowPriority,me=r.unstable_IdlePriority,he=r.log,ge=r.unstable_setDisableYieldValue,ye=null,ve=null;function be(e){if("function"==typeof he&&ge(e),ve&&"function"==typeof ve.setStrictMode)try{ve.setStrictMode(ye,e)}catch(e){}}var ke=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(we(e)/Se|0)|0},we=Math.log,Se=Math.LN2,Ae=128,Ce=4194304;function Ee(e){var n=42&e;if(0!==n)return n;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function xe(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,l=e.suspendedLanes,a=e.pingedLanes,o=e.warmLanes;e=0!==e.finishedLanes;var i=134217727&t;return 0!==i?0!=(t=i&~l)?r=Ee(t):0!=(a&=i)?r=Ee(a):e||0!=(o=i&~o)&&(r=Ee(o)):0!=(i=t&~l)?r=Ee(i):0!==a?r=Ee(a):e||0!=(o=t&~o)&&(r=Ee(o)),0===r?0:0===n||n===r||n&l||!((l=r&-r)>=(o=n&-n)||32===l&&4194176&o)?r:n}function _e(e,n){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&n)}function Pe(e,n){switch(e){case 1:case 2:case 4:case 8:return n+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return-1}}function ze(){var e=Ae;return!(4194176&(Ae<<=1))&&(Ae=128),e}function Ne(){var e=Ce;return!(62914560&(Ce<<=1))&&(Ce=4194304),e}function Te(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function Le(e,n){e.pendingLanes|=n,268435456!==n&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Ie(e,n,t){e.pendingLanes|=n,e.suspendedLanes&=~n;var r=31-ke(n);e.entangledLanes|=n,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&t}function Oe(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-ke(t),l=1<<r;l&n|e[r]&n&&(e[r]|=n),t&=~l}}function Re(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function De(){var e=H.p;return 0!==e?e:void 0===(e=window.event)?32:Jf(e.type)}var Fe=Math.random().toString(36).slice(2),Me="__reactFiber$"+Fe,Be="__reactProps$"+Fe,Ue="__reactContainer$"+Fe,je="__reactEvents$"+Fe,He="__reactListeners$"+Fe,Ve="__reactHandles$"+Fe,$e="__reactResources$"+Fe,Qe="__reactMarker$"+Fe;function We(e){delete e[Me],delete e[Be],delete e[je],delete e[He],delete e[Ve]}function qe(e){var n=e[Me];if(n)return n;for(var t=e.parentNode;t;){if(n=t[Ue]||t[Me]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=sf(e);null!==e;){if(t=e[Me])return t;e=sf(e)}return n}t=(e=t).parentNode}return null}function Ye(e){if(e=e[Me]||e[Ue]){var n=e.tag;if(5===n||6===n||13===n||26===n||27===n||3===n)return e}return null}function Ke(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e.stateNode;throw Error(o(33))}function Xe(e){var n=e[$e];return n||(n=e[$e]={hoistableStyles:new Map,hoistableScripts:new Map}),n}function Ge(e){e[Qe]=!0}var Je=new Set,Ze={};function en(e,n){nn(e,n),nn(e+"Capture",n)}function nn(e,n){for(Ze[e]=n,e=0;e<n.length;e++)Je.add(n[e])}var tn=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),rn=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),ln={},an={};function on(e,n,t){if(l=n,re.call(an,l)||!re.call(ln,l)&&(rn.test(l)?an[l]=!0:(ln[l]=!0,0)))if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":return void e.removeAttribute(n);case"boolean":var r=n.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(n)}e.setAttribute(n,""+t)}var l}function un(e,n,t){if(null===t)e.removeAttribute(n);else{switch(typeof t){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttribute(n,""+t)}}function sn(e,n,t,r){if(null===r)e.removeAttribute(t);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttributeNS(n,t,""+r)}}function cn(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function fn(e){var n=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===n||"radio"===n)}function dn(e){e._valueTracker||(e._valueTracker=function(e){var n=fn(e)?"checked":"value",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=""+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&"function"==typeof t.get&&"function"==typeof t.set){var l=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function pn(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r="";return e&&(r=fn(e)?e.checked?"true":"false":e.value),(e=r)!==t&&(n.setValue(e),!0)}function mn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}var hn=/[\n"\\]/g;function gn(e){return e.replace(hn,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function yn(e,n,t,r,l,a,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=n?"number"===o?(0===n&&""===e.value||e.value!=n)&&(e.value=""+cn(n)):e.value!==""+cn(n)&&(e.value=""+cn(n)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=n?bn(e,o,cn(n)):null!=t?bn(e,o,cn(t)):null!=r&&e.removeAttribute("value"),null==l&&null!=a&&(e.defaultChecked=!!a),null!=l&&(e.checked=l&&"function"!=typeof l&&"symbol"!=typeof l),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+cn(i):e.removeAttribute("name")}function vn(e,n,t,r,l,a,o,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=n||null!=t){if(("submit"===a||"reset"===a)&&null==n)return;t=null!=t?""+cn(t):"",n=null!=n?""+cn(n):t,i||n===e.value||(e.value=n),e.defaultValue=n}r="function"!=typeof(r=null!=r?r:l)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function bn(e,n,t){"number"===n&&mn(e.ownerDocument)===e||e.defaultValue===""+t||(e.defaultValue=""+t)}function kn(e,n,t,r){if(e=e.options,n){n={};for(var l=0;l<t.length;l++)n["$"+t[l]]=!0;for(t=0;t<e.length;t++)l=n.hasOwnProperty("$"+e[t].value),e[t].selected!==l&&(e[t].selected=l),l&&r&&(e[t].defaultSelected=!0)}else{for(t=""+cn(t),n=null,l=0;l<e.length;l++){if(e[l].value===t)return e[l].selected=!0,void(r&&(e[l].defaultSelected=!0));null!==n||e[l].disabled||(n=e[l])}null!==n&&(n.selected=!0)}}function wn(e,n,t){null==n||((n=""+cn(n))!==e.value&&(e.value=n),null!=t)?e.defaultValue=null!=t?""+cn(t):"":e.defaultValue!==n&&(e.defaultValue=n)}function Sn(e,n,t,r){if(null==n){if(null!=r){if(null!=t)throw Error(o(92));if(j(r)){if(1<r.length)throw Error(o(93));r=r[0]}t=r}null==t&&(t=""),n=t}t=cn(n),e.defaultValue=t,(r=e.textContent)===t&&""!==r&&null!==r&&(e.value=r)}function An(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType)return void(t.nodeValue=n)}e.textContent=n}var Cn=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function En(e,n,t){var r=0===n.indexOf("--");null==t||"boolean"==typeof t||""===t?r?e.setProperty(n,""):"float"===n?e.cssFloat="":e[n]="":r?e.setProperty(n,t):"number"!=typeof t||0===t||Cn.has(n)?"float"===n?e.cssFloat=t:e[n]=(""+t).trim():e[n]=t+"px"}function xn(e,n,t){if(null!=n&&"object"!=typeof n)throw Error(o(62));if(e=e.style,null!=t){for(var r in t)!t.hasOwnProperty(r)||null!=n&&n.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var l in n)r=n[l],n.hasOwnProperty(l)&&t[l]!==r&&En(e,l,r)}else for(var a in n)n.hasOwnProperty(a)&&En(e,a,n[a])}function _n(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Pn=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),zn=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Nn(e){return zn.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Tn=null;function Ln(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var In=null,On=null;function Rn(e){var n=Ye(e);if(n&&(e=n.stateNode)){var t=e[Be]||null;e:switch(e=n.stateNode,n.type){case"input":if(yn(e,t.value,t.defaultValue,t.defaultValue,t.checked,t.defaultChecked,t.type,t.name),n=t.name,"radio"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll('input[name="'+gn(""+n)+'"][type="radio"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var l=r[Be]||null;if(!l)throw Error(o(90));yn(r,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name)}}for(n=0;n<t.length;n++)(r=t[n]).form===e.form&&pn(r)}break e;case"textarea":wn(e,t.value,t.defaultValue);break e;case"select":null!=(n=t.value)&&kn(e,!!t.multiple,n,!1)}}}var Dn=!1;function Fn(e,n,t){if(Dn)return e(n,t);Dn=!0;try{return e(n)}finally{if(Dn=!1,(null!==In||null!==On)&&(Ms(),In&&(n=In,e=On,On=In=null,Rn(n),e)))for(n=0;n<e.length;n++)Rn(e[n])}}function Mn(e,n){var t=e.stateNode;if(null===t)return null;var r=t[Be]||null;if(null===r)return null;t=r[n];e:switch(n){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(t&&"function"!=typeof t)throw Error(o(231,n,typeof t));return t}var Bn=!1;if(tn)try{var Un={};Object.defineProperty(Un,"passive",{get:function(){Bn=!0}}),window.addEventListener("test",Un,Un),window.removeEventListener("test",Un,Un)}catch(e){Bn=!1}var jn=null,Hn=null,Vn=null;function $n(){if(Vn)return Vn;var e,n,t=Hn,r=t.length,l="value"in jn?jn.value:jn.textContent,a=l.length;for(e=0;e<r&&t[e]===l[e];e++);var o=r-e;for(n=1;n<=o&&t[r-n]===l[a-n];n++);return Vn=l.slice(e,1<n?1-n:void 0)}function Qn(e){var n=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function Wn(){return!0}function qn(){return!1}function Yn(e){function n(n,t,r,l,a){for(var o in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(n=e[o],this[o]=n?n(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?Wn:qn,this.isPropagationStopped=qn,this}return T(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Wn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Wn)},persist:function(){},isPersistent:Wn}),n}var Kn,Xn,Gn,Jn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Zn=Yn(Jn),et=T({},Jn,{view:0,detail:0}),nt=Yn(et),tt=T({},et,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pt,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Gn&&(Gn&&"mousemove"===e.type?(Kn=e.screenX-Gn.screenX,Xn=e.screenY-Gn.screenY):Xn=Kn=0,Gn=e),Kn)},movementY:function(e){return"movementY"in e?e.movementY:Xn}}),rt=Yn(tt),lt=Yn(T({},tt,{dataTransfer:0})),at=Yn(T({},et,{relatedTarget:0})),ot=Yn(T({},Jn,{animationName:0,elapsedTime:0,pseudoElement:0})),it=Yn(T({},Jn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),ut=Yn(T({},Jn,{data:0})),st={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ct={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ft={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=ft[e])&&!!n[e]}function pt(){return dt}var mt=Yn(T({},et,{key:function(e){if(e.key){var n=st[e.key]||e.key;if("Unidentified"!==n)return n}return"keypress"===e.type?13===(e=Qn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ct[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pt,charCode:function(e){return"keypress"===e.type?Qn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),ht=Yn(T({},tt,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gt=Yn(T({},et,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pt})),yt=Yn(T({},Jn,{propertyName:0,elapsedTime:0,pseudoElement:0})),vt=Yn(T({},tt,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bt=Yn(T({},Jn,{newState:0,oldState:0})),kt=[9,13,27,32],wt=tn&&"CompositionEvent"in window,St=null;tn&&"documentMode"in document&&(St=document.documentMode);var At=tn&&"TextEvent"in window&&!St,Ct=tn&&(!wt||St&&8<St&&11>=St),Et=String.fromCharCode(32),xt=!1;function _t(e,n){switch(e){case"keyup":return-1!==kt.indexOf(n.keyCode);case"keydown":return 229!==n.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pt(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zt=!1,Nt={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Tt(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===n?!!Nt[e.type]:"textarea"===n}function Lt(e,n,t,r){In?On?On.push(r):On=[r]:In=r,0<(n=Dc(n,"onChange")).length&&(t=new Zn("onChange","change",null,t,r),e.push({event:t,listeners:n}))}var It=null,Ot=null;function Rt(e){Pc(e,0)}function Dt(e){if(pn(Ke(e)))return e}function Ft(e,n){if("change"===e)return n}var Mt=!1;if(tn){var Bt;if(tn){var Ut="oninput"in document;if(!Ut){var jt=document.createElement("div");jt.setAttribute("oninput","return;"),Ut="function"==typeof jt.oninput}Bt=Ut}else Bt=!1;Mt=Bt&&(!document.documentMode||9<document.documentMode)}function Ht(){It&&(It.detachEvent("onpropertychange",Vt),Ot=It=null)}function Vt(e){if("value"===e.propertyName&&Dt(Ot)){var n=[];Lt(n,Ot,e,Ln(e)),Fn(Rt,n)}}function $t(e,n,t){"focusin"===e?(Ht(),Ot=t,(It=n).attachEvent("onpropertychange",Vt)):"focusout"===e&&Ht()}function Qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dt(Ot)}function Wt(e,n){if("click"===e)return Dt(n)}function qt(e,n){if("input"===e||"change"===e)return Dt(n)}var Yt="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function Kt(e,n){if(Yt(e,n))return!0;if("object"!=typeof e||null===e||"object"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var l=t[r];if(!re.call(n,l)||!Yt(e[l],n[l]))return!1}return!0}function Xt(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gt(e,n){var t,r=Xt(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xt(r)}}function Jt(e,n){return!(!e||!n)&&(e===n||(!e||3!==e.nodeType)&&(n&&3===n.nodeType?Jt(e,n.parentNode):"contains"in e?e.contains(n):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(n))))}function Zt(e){for(var n=mn((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);n instanceof e.HTMLIFrameElement;){try{var t="string"==typeof n.contentWindow.location.href}catch(e){t=!1}if(!t)break;n=mn((e=n.contentWindow).document)}return n}function er(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&("input"===n&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===n||"true"===e.contentEditable)}function nr(e,n){var t=Zt(n);n=e.focusedElem;var r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&Jt(n.ownerDocument.documentElement,n)){if(null!==r&&er(n))if(e=r.start,void 0===(t=r.end)&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if((t=(e=n.ownerDocument||document)&&e.defaultView||window).getSelection){t=t.getSelection();var l=n.textContent.length,a=Math.min(r.start,l);r=void 0===r.end?a:Math.min(r.end,l),!t.extend&&a>r&&(l=r,r=a,a=l),l=Gt(n,a);var o=Gt(n,r);l&&o&&(1!==t.rangeCount||t.anchorNode!==l.node||t.anchorOffset!==l.offset||t.focusNode!==o.node||t.focusOffset!==o.offset)&&((e=e.createRange()).setStart(l.node,l.offset),t.removeAllRanges(),a>r?(t.addRange(e),t.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),t.addRange(e)))}for(e=[],t=n;t=t.parentNode;)1===t.nodeType&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<e.length;n++)(t=e[n]).element.scrollLeft=t.left,t.element.scrollTop=t.top}}var tr=tn&&"documentMode"in document&&11>=document.documentMode,rr=null,lr=null,ar=null,or=!1;function ir(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;or||null==rr||rr!==mn(r)||(r="selectionStart"in(r=rr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Kt(ar,r)||(ar=r,0<(r=Dc(lr,"onSelect")).length&&(n=new Zn("onSelect","select",null,n,t),e.push({event:n,listeners:r}),n.target=rr)))}function ur(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit"+e]="webkit"+n,t["Moz"+e]="moz"+n,t}var sr={animationend:ur("Animation","AnimationEnd"),animationiteration:ur("Animation","AnimationIteration"),animationstart:ur("Animation","AnimationStart"),transitionrun:ur("Transition","TransitionRun"),transitionstart:ur("Transition","TransitionStart"),transitioncancel:ur("Transition","TransitionCancel"),transitionend:ur("Transition","TransitionEnd")},cr={},fr={};function dr(e){if(cr[e])return cr[e];if(!sr[e])return e;var n,t=sr[e];for(n in t)if(t.hasOwnProperty(n)&&n in fr)return cr[e]=t[n];return e}tn&&(fr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var pr=dr("animationend"),mr=dr("animationiteration"),hr=dr("animationstart"),gr=dr("transitionrun"),yr=dr("transitionstart"),vr=dr("transitioncancel"),br=dr("transitionend"),kr=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function Sr(e,n){kr.set(e,n),en(n,[e])}var Ar=[],Cr=0,Er=0;function xr(){for(var e=Cr,n=Er=Cr=0;n<e;){var t=Ar[n];Ar[n++]=null;var r=Ar[n];Ar[n++]=null;var l=Ar[n];Ar[n++]=null;var a=Ar[n];if(Ar[n++]=null,null!==r&&null!==l){var o=r.pending;null===o?l.next=l:(l.next=o.next,o.next=l),r.pending=l}0!==a&&Nr(t,l,a)}}function _r(e,n,t,r){Ar[Cr++]=e,Ar[Cr++]=n,Ar[Cr++]=t,Ar[Cr++]=r,Er|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Pr(e,n,t,r){return _r(e,n,t,r),Tr(e)}function zr(e,n){return _r(e,null,null,n),Tr(e)}function Nr(e,n,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t);for(var l=!1,a=e.return;null!==a;)a.childLanes|=t,null!==(r=a.alternate)&&(r.childLanes|=t),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(l=!0)),e=a,a=a.return;l&&null!==n&&3===e.tag&&(a=e.stateNode,l=31-ke(t),null===(e=(a=a.hiddenUpdates)[l])?a[l]=[n]:e.push(n),n.lane=536870912|t)}function Tr(e){if(50<Ps)throw Ps=0,zs=null,Error(o(185));for(var n=e.return;null!==n;)n=(e=n).return;return 3===e.tag?e.stateNode:null}var Lr={},Ir=new WeakMap;function Or(e,n){if("object"==typeof e&&null!==e){var t=Ir.get(e);return void 0!==t?t:(n={value:e,source:n,stack:D(n)},Ir.set(e,n),n)}return{value:e,source:n,stack:D(n)}}var Rr=[],Dr=0,Fr=null,Mr=0,Br=[],Ur=0,jr=null,Hr=1,Vr="";function $r(e,n){Rr[Dr++]=Mr,Rr[Dr++]=Fr,Fr=e,Mr=n}function Qr(e,n,t){Br[Ur++]=Hr,Br[Ur++]=Vr,Br[Ur++]=jr,jr=e;var r=Hr;e=Vr;var l=32-ke(r)-1;r&=~(1<<l),t+=1;var a=32-ke(n)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,Hr=1<<32-ke(n)+l|t<<l|r,Vr=a+e}else Hr=1<<a|t<<l|r,Vr=e}function Wr(e){null!==e.return&&($r(e,1),Qr(e,1,0))}function qr(e){for(;e===Fr;)Fr=Rr[--Dr],Rr[Dr]=null,Mr=Rr[--Dr],Rr[Dr]=null;for(;e===jr;)jr=Br[--Ur],Br[Ur]=null,Vr=Br[--Ur],Br[Ur]=null,Hr=Br[--Ur],Br[Ur]=null}var Yr=null,Kr=null,Xr=!1,Gr=null,Jr=!1,Zr=Error(o(519));function el(e){throw al(Or(Error(o(418,"")),e)),Zr}function nl(e){var n=e.stateNode,t=e.type,r=e.memoizedProps;switch(n[Me]=e,n[Be]=r,t){case"dialog":zc("cancel",n),zc("close",n);break;case"iframe":case"object":case"embed":zc("load",n);break;case"video":case"audio":for(t=0;t<xc.length;t++)zc(xc[t],n);break;case"source":zc("error",n);break;case"img":case"image":case"link":zc("error",n),zc("load",n);break;case"details":zc("toggle",n);break;case"input":zc("invalid",n),vn(n,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),dn(n);break;case"select":zc("invalid",n);break;case"textarea":zc("invalid",n),Sn(n,r.value,r.defaultValue,r.children),dn(n)}"string"!=typeof(t=r.children)&&"number"!=typeof t&&"bigint"!=typeof t||n.textContent===""+t||!0===r.suppressHydrationWarning||Hc(n.textContent,t)?(null!=r.popover&&(zc("beforetoggle",n),zc("toggle",n)),null!=r.onScroll&&zc("scroll",n),null!=r.onScrollEnd&&zc("scrollend",n),null!=r.onClick&&(n.onclick=Vc),n=!0):n=!1,n||el(e)}function tl(e){for(Yr=e.return;Yr;)switch(Yr.tag){case 3:case 27:return void(Jr=!0);case 5:case 13:return void(Jr=!1);default:Yr=Yr.return}}function rl(e){if(e!==Yr)return!1;if(!Xr)return tl(e),Xr=!0,!1;var n,t=!1;if((n=3!==e.tag&&27!==e.tag)&&((n=5===e.tag)&&(n=!("form"!==(n=e.type)&&"button"!==n)||Jc(e.type,e.memoizedProps)),n=!n),n&&(t=!0),t&&Kr&&el(e),tl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType)if("/$"===(n=e.data)){if(0===t){Kr=uf(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++;e=e.nextSibling}Kr=null}}else Kr=Yr?uf(e.stateNode.nextSibling):null;return!0}function ll(){Kr=Yr=null,Xr=!1}function al(e){null===Gr?Gr=[e]:Gr.push(e)}var ol=Error(o(460)),il=Error(o(474)),ul={then:function(){}};function sl(e){return"fulfilled"===(e=e.status)||"rejected"===e}function cl(){}function fl(e,n,t){switch(void 0===(t=e[t])?e.push(n):t!==n&&(n.then(cl,cl),n=t),n.status){case"fulfilled":return n.value;case"rejected":if((e=n.reason)===ol)throw Error(o(483));throw e;default:if("string"==typeof n.status)n.then(cl,cl);else{if(null!==(e=ns)&&100<e.shellSuspendCounter)throw Error(o(482));(e=n).status="pending",e.then((function(e){if("pending"===n.status){var t=n;t.status="fulfilled",t.value=e}}),(function(e){if("pending"===n.status){var t=n;t.status="rejected",t.reason=e}}))}switch(n.status){case"fulfilled":return n.value;case"rejected":if((e=n.reason)===ol)throw Error(o(483));throw e}throw dl=n,ol}}var dl=null;function pl(){if(null===dl)throw Error(o(459));var e=dl;return dl=null,e}var ml=null,hl=0;function gl(e){var n=hl;return hl+=1,null===ml&&(ml=[]),fl(ml,e,n)}function yl(e,n){n=n.props.ref,e.ref=void 0!==n?n:null}function vl(e,n){if(n.$$typeof===u)throw Error(o(525));throw e=Object.prototype.toString.call(n),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(n).join(", ")+"}":e))}function bl(e){return(0,e._init)(e._payload)}function kl(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e){for(var n=new Map;null!==e;)null!==e.key?n.set(e.key,e):n.set(e.index,e),e=e.sibling;return n}function l(e,n){return(e=Fu(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return n.index=r,e?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=33554434,t):r:(n.flags|=33554434,t):(n.flags|=1048576,t)}function i(n){return e&&null===n.alternate&&(n.flags|=33554434),n}function u(e,n,t,r){return null===n||6!==n.tag?((n=Hu(t,e.mode,r)).return=e,n):((n=l(n,t)).return=e,n)}function d(e,n,t,r){var a=t.type;return a===f?m(e,n,t.props.children,r,t.key):null!==n&&(n.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===w&&bl(a)===n.type)?(yl(n=l(n,t.props),t),n.return=e,n):(yl(n=Bu(t.type,t.key,t.props,null,e.mode,r),t),n.return=e,n)}function p(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?((n=Vu(t,e.mode,r)).return=e,n):((n=l(n,t.children||[])).return=e,n)}function m(e,n,t,r,a){return null===n||7!==n.tag?((n=Uu(t,e.mode,r,a)).return=e,n):((n=l(n,t)).return=e,n)}function h(e,n,t){if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return(n=Hu(""+n,e.mode,t)).return=e,n;if("object"==typeof n&&null!==n){switch(n.$$typeof){case s:return yl(t=Bu(n.type,n.key,n.props,null,e.mode,t),n),t.return=e,t;case c:return(n=Vu(n,e.mode,t)).return=e,n;case w:return h(e,n=(0,n._init)(n._payload),t)}if(j(n)||E(n))return(n=Uu(n,e.mode,t,null)).return=e,n;if("function"==typeof n.then)return h(e,gl(n),t);if(n.$$typeof===g)return h(e,xi(e,n),t);vl(e,n)}return null}function y(e,n,t,r){var l=null!==n?n.key:null;if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return null!==l?null:u(e,n,""+t,r);if("object"==typeof t&&null!==t){switch(t.$$typeof){case s:return t.key===l?d(e,n,t,r):null;case c:return t.key===l?p(e,n,t,r):null;case w:return y(e,n,t=(l=t._init)(t._payload),r)}if(j(t)||E(t))return null!==l?null:m(e,n,t,r,null);if("function"==typeof t.then)return y(e,n,gl(t),r);if(t.$$typeof===g)return y(e,n,xi(e,t),r);vl(e,t)}return null}function v(e,n,t,r,l){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(n,e=e.get(t)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case s:return d(n,e=e.get(null===r.key?t:r.key)||null,r,l);case c:return p(n,e=e.get(null===r.key?t:r.key)||null,r,l);case w:return v(e,n,t,r=(0,r._init)(r._payload),l)}if(j(r)||E(r))return m(n,e=e.get(t)||null,r,l,null);if("function"==typeof r.then)return v(e,n,t,gl(r),l);if(r.$$typeof===g)return v(e,n,t,xi(n,r),l);vl(n,r)}return null}function b(u,d,p,m){if("object"==typeof p&&null!==p&&p.type===f&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case s:e:{for(var k=p.key;null!==d;){if(d.key===k){if((k=p.type)===f){if(7===d.tag){t(u,d.sibling),(m=l(d,p.props.children)).return=u,u=m;break e}}else if(d.elementType===k||"object"==typeof k&&null!==k&&k.$$typeof===w&&bl(k)===d.type){t(u,d.sibling),yl(m=l(d,p.props),p),m.return=u,u=m;break e}t(u,d);break}n(u,d),d=d.sibling}p.type===f?((m=Uu(p.props.children,u.mode,m,p.key)).return=u,u=m):(yl(m=Bu(p.type,p.key,p.props,null,u.mode,m),p),m.return=u,u=m)}return i(u);case c:e:{for(k=p.key;null!==d;){if(d.key===k){if(4===d.tag&&d.stateNode.containerInfo===p.containerInfo&&d.stateNode.implementation===p.implementation){t(u,d.sibling),(m=l(d,p.children||[])).return=u,u=m;break e}t(u,d);break}n(u,d),d=d.sibling}(m=Vu(p,u.mode,m)).return=u,u=m}return i(u);case w:return b(u,d,p=(k=p._init)(p._payload),m)}if(j(p))return function(l,o,i,u){for(var s=null,c=null,f=o,d=o=0,p=null;null!==f&&d<i.length;d++){f.index>d?(p=f,f=null):p=f.sibling;var m=y(l,f,i[d],u);if(null===m){null===f&&(f=p);break}e&&f&&null===m.alternate&&n(l,f),o=a(m,o,d),null===c?s=m:c.sibling=m,c=m,f=p}if(d===i.length)return t(l,f),Xr&&$r(l,d),s;if(null===f){for(;d<i.length;d++)null!==(f=h(l,i[d],u))&&(o=a(f,o,d),null===c?s=f:c.sibling=f,c=f);return Xr&&$r(l,d),s}for(f=r(f);d<i.length;d++)null!==(p=v(f,l,d,i[d],u))&&(e&&null!==p.alternate&&f.delete(null===p.key?d:p.key),o=a(p,o,d),null===c?s=p:c.sibling=p,c=p);return e&&f.forEach((function(e){return n(l,e)})),Xr&&$r(l,d),s}(u,d,p,m);if(E(p)){if("function"!=typeof(k=E(p)))throw Error(o(150));return function(l,i,u,s){if(null==u)throw Error(o(151));for(var c=null,f=null,d=i,p=i=0,m=null,g=u.next();null!==d&&!g.done;p++,g=u.next()){d.index>p?(m=d,d=null):m=d.sibling;var b=y(l,d,g.value,s);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&n(l,d),i=a(b,i,p),null===f?c=b:f.sibling=b,f=b,d=m}if(g.done)return t(l,d),Xr&&$r(l,p),c;if(null===d){for(;!g.done;p++,g=u.next())null!==(g=h(l,g.value,s))&&(i=a(g,i,p),null===f?c=g:f.sibling=g,f=g);return Xr&&$r(l,p),c}for(d=r(d);!g.done;p++,g=u.next())null!==(g=v(d,l,p,g.value,s))&&(e&&null!==g.alternate&&d.delete(null===g.key?p:g.key),i=a(g,i,p),null===f?c=g:f.sibling=g,f=g);return e&&d.forEach((function(e){return n(l,e)})),Xr&&$r(l,p),c}(u,d,p=k.call(p),m)}if("function"==typeof p.then)return b(u,d,gl(p),m);if(p.$$typeof===g)return b(u,d,xi(u,p),m);vl(u,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==d&&6===d.tag?(t(u,d.sibling),(m=l(d,p)).return=u,u=m):(t(u,d),(m=Hu(p,u.mode,m)).return=u,u=m),i(u)):t(u,d)}return function(e,n,t,r){try{hl=0;var l=b(e,n,t,r);return ml=null,l}catch(n){if(n===ol)throw n;var a=Ru(29,n,null,e.mode);return a.lanes=r,a.return=e,a}}}var wl=kl(!0),Sl=kl(!1),Al=W(null),Cl=W(0);function El(e,n){Y(Cl,e=ss),Y(Al,n),ss=e|n.baseLanes}function xl(){Y(Cl,ss),Y(Al,Al.current)}function _l(){ss=Cl.current,q(Al),q(Cl)}var Pl=W(null),zl=null;function Nl(e){var n=e.alternate;Y(Ol,1&Ol.current),Y(Pl,e),null===zl&&(null===n||null!==Al.current||null!==n.memoizedState)&&(zl=e)}function Tl(e){if(22===e.tag){if(Y(Ol,Ol.current),Y(Pl,e),null===zl){var n=e.alternate;null!==n&&null!==n.memoizedState&&(zl=e)}}else Ll()}function Ll(){Y(Ol,Ol.current),Y(Pl,Pl.current)}function Il(e){q(Pl),zl===e&&(zl=null),q(Ol)}var Ol=W(0);function Rl(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||"$?"===t.data||"$!"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(128&n.flags)return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var Dl="undefined"!=typeof AbortController?AbortController:function(){var e=[],n=this.signal={aborted:!1,addEventListener:function(n,t){e.push(t)}};this.abort=function(){n.aborted=!0,e.forEach((function(e){return e()}))}},Fl=r.unstable_scheduleCallback,Ml=r.unstable_NormalPriority,Bl={$$typeof:g,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Ul(){return{controller:new Dl,data:new Map,refCount:0}}function jl(e){e.refCount--,0===e.refCount&&Fl(Ml,(function(){e.controller.abort()}))}var Hl=null,Vl=0,$l=0,Ql=null;function Wl(){if(0==--Vl&&null!==Hl){null!==Ql&&(Ql.status="fulfilled");var e=Hl;Hl=null,$l=0,Ql=null;for(var n=0;n<e.length;n++)(0,e[n])()}}var ql=N.S;N.S=function(e,n){"object"==typeof n&&null!==n&&"function"==typeof n.then&&function(e,n){if(null===Hl){var t=Hl=[];Vl=0,$l=wc(),Ql={status:"pending",value:void 0,then:function(e){t.push(e)}}}Vl++,n.then(Wl,Wl)}(0,n),null!==ql&&ql(e,n)};var Yl=W(null);function Kl(){var e=Yl.current;return null!==e?e:ns.pooledCache}function Xl(e,n){Y(Yl,null===n?Yl.current:n.pool)}function Gl(){var e=Kl();return null===e?null:{parent:Bl._currentValue,pool:e}}var Jl=0,Zl=null,ea=null,na=null,ta=!1,ra=!1,la=!1,aa=0,oa=0,ia=null,ua=0;function sa(){throw Error(o(321))}function ca(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!Yt(e[t],n[t]))return!1;return!0}function fa(e,n,t,r,l,a){return Jl=a,Zl=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,N.H=null===e||null===e.memoizedState?xo:_o,la=!1,a=t(r,l),la=!1,ra&&(a=pa(n,t,r,l)),da(e),a}function da(e){N.H=Eo;var n=null!==ea&&null!==ea.next;if(Jl=0,na=ea=Zl=null,ta=!1,oa=0,ia=null,n)throw Error(o(300));null===e||$o||null!==(e=e.dependencies)&&Ai(e)&&($o=!0)}function pa(e,n,t,r){Zl=e;var l=0;do{if(ra&&(ia=null),oa=0,ra=!1,25<=l)throw Error(o(301));if(l+=1,na=ea=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}N.H=Po,a=n(t,r)}while(ra);return a}function ma(){var e=N.H,n=e.useState()[0];return n="function"==typeof n.then?ka(n):n,e=e.useState()[0],(null!==ea?ea.memoizedState:null)!==e&&(Zl.flags|=1024),n}function ha(){var e=0!==aa;return aa=0,e}function ga(e,n,t){n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~t}function ya(e){if(ta){for(e=e.memoizedState;null!==e;){var n=e.queue;null!==n&&(n.pending=null),e=e.next}ta=!1}Jl=0,na=ea=Zl=null,ra=!1,oa=aa=0,ia=null}function va(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===na?Zl.memoizedState=na=e:na=na.next=e,na}function ba(){if(null===ea){var e=Zl.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var n=null===na?Zl.memoizedState:na.next;if(null!==n)na=n,ea=e;else{if(null===e){if(null===Zl.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===na?Zl.memoizedState=na=e:na=na.next=e}return na}function ka(e){var n=oa;return oa+=1,null===ia&&(ia=[]),e=fl(ia,e,n),n=Zl,null===(null===na?n.memoizedState:na.next)&&(n=n.alternate,N.H=null===n||null===n.memoizedState?xo:_o),e}function wa(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return ka(e);if(e.$$typeof===g)return Ei(e)}throw Error(o(438,String(e)))}function Sa(e){var n=null,t=Zl.updateQueue;if(null!==t&&(n=t.memoCache),null==n){var r=Zl.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(n={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==n&&(n={data:[],index:0}),null===t&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Zl.updateQueue=t),t.memoCache=n,void 0===(t=n.data[n.index]))for(t=n.data[n.index]=Array(e),r=0;r<e;r++)t[r]=A;return n.index++,t}function Aa(e,n){return"function"==typeof n?n(e):n}function Ca(e){return Ea(ba(),ea,e)}function Ea(e,n,t){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=t;var l=e.baseQueue,a=r.pending;if(null!==a){if(null!==l){var i=l.next;l.next=a.next,a.next=i}n.baseQueue=l=a,r.pending=null}if(a=e.baseState,null===l)e.memoizedState=a;else{var u=i=null,s=null,c=n=l.next,f=!1;do{var d=-536870913&c.lane;if(d!==c.lane?(rs&d)===d:(Jl&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===$l&&(f=!0);else{if((Jl&p)===p){c=c.next,p===$l&&(f=!0);continue}d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,i=a):s=s.next=d,Zl.lanes|=p,fs|=p}d=c.action,la&&t(a,d),a=c.hasEagerState?c.eagerState:t(a,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,i=a):s=s.next=p,Zl.lanes|=d,fs|=d;c=c.next}while(null!==c&&c!==n);if(null===s?i=a:s.next=u,!Yt(a,e.memoizedState)&&($o=!0,f&&null!==(t=Ql)))throw t;e.memoizedState=a,e.baseState=i,e.baseQueue=s,r.lastRenderedState=a}return null===l&&(r.lanes=0),[e.memoizedState,r.dispatch]}function xa(e){var n=ba(),t=n.queue;if(null===t)throw Error(o(311));t.lastRenderedReducer=e;var r=t.dispatch,l=t.pending,a=n.memoizedState;if(null!==l){t.pending=null;var i=l=l.next;do{a=e(a,i.action),i=i.next}while(i!==l);Yt(a,n.memoizedState)||($o=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function _a(e,n,t){var r=Zl,l=ba(),a=Xr;if(a){if(void 0===t)throw Error(o(407));t=t()}else t=n();var i=!Yt((ea||l).memoizedState,t);if(i&&(l.memoizedState=t,$o=!0),l=l.queue,Ja(Na.bind(null,r,l,e),[e]),l.getSnapshot!==n||i||null!==na&&1&na.memoizedState.tag){if(r.flags|=2048,qa(9,za.bind(null,r,l,t,n),{destroy:void 0},null),null===ns)throw Error(o(349));a||60&Jl||Pa(r,n,t)}return t}function Pa(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=Zl.updateQueue)?(n={lastEffect:null,events:null,stores:null,memoCache:null},Zl.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function za(e,n,t,r){n.value=t,n.getSnapshot=r,Ta(n)&&La(e)}function Na(e,n,t){return t((function(){Ta(n)&&La(e)}))}function Ta(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!Yt(e,t)}catch(e){return!0}}function La(e){var n=zr(e,2);null!==n&&Ls(n,0,2)}function Ia(e){var n=va();if("function"==typeof e){var t=e;if(e=t(),la){be(!0);try{t()}finally{be(!1)}}}return n.memoizedState=n.baseState=e,n.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Aa,lastRenderedState:e},n}function Oa(e,n,t,r){return e.baseState=t,Ea(e,ea,"function"==typeof r?r:Aa)}function Ra(e,n,t,r,l){if(So(e))throw Error(o(485));if(null!==(e=n.action)){var a={payload:l,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==N.T?t(!0):a.isTransition=!1,r(a),null===(t=n.pending)?(a.next=n.pending=a,Da(n,a)):(a.next=t.next,n.pending=t.next=a)}}function Da(e,n){var t=n.action,r=n.payload,l=e.state;if(n.isTransition){var a=N.T,o={};N.T=o;try{var i=t(l,r),u=N.S;null!==u&&u(o,i),Fa(e,n,i)}catch(t){Ba(e,n,t)}finally{N.T=a}}else try{Fa(e,n,a=t(l,r))}catch(t){Ba(e,n,t)}}function Fa(e,n,t){null!==t&&"object"==typeof t&&"function"==typeof t.then?t.then((function(t){Ma(e,n,t)}),(function(t){return Ba(e,n,t)})):Ma(e,n,t)}function Ma(e,n,t){n.status="fulfilled",n.value=t,Ua(n),e.state=t,null!==(n=e.pending)&&((t=n.next)===n?e.pending=null:(t=t.next,n.next=t,Da(e,t)))}function Ba(e,n,t){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{n.status="rejected",n.reason=t,Ua(n),n=n.next}while(n!==r)}e.action=null}function Ua(e){e=e.listeners;for(var n=0;n<e.length;n++)(0,e[n])()}function ja(e,n){return n}function Ha(e,n){if(Xr){var t=ns.formState;if(null!==t){e:{var r=Zl;if(Xr){if(Kr){n:{for(var l=Kr,a=Jr;8!==l.nodeType;){if(!a){l=null;break n}if(null===(l=uf(l.nextSibling))){l=null;break n}}l="F!"===(a=l.data)||"F"===a?l:null}if(l){Kr=uf(l.nextSibling),r="F!"===l.data;break e}}el(r)}r=!1}r&&(n=t[0])}}return(t=va()).memoizedState=t.baseState=n,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ja,lastRenderedState:n},t.queue=r,t=bo.bind(null,Zl,r),r.dispatch=t,r=Ia(!1),a=wo.bind(null,Zl,!1,r.queue),l={state:n,dispatch:null,action:e,pending:null},(r=va()).queue=l,t=Ra.bind(null,Zl,l,a,t),l.dispatch=t,r.memoizedState=e,[n,t,!1]}function Va(e){return $a(ba(),ea,e)}function $a(e,n,t){n=Ea(e,n,ja)[0],e=Ca(Aa)[0],n="object"==typeof n&&null!==n&&"function"==typeof n.then?ka(n):n;var r=ba(),l=r.queue,a=l.dispatch;return t!==r.memoizedState&&(Zl.flags|=2048,qa(9,Qa.bind(null,l,t),{destroy:void 0},null)),[n,a,e]}function Qa(e,n){e.action=n}function Wa(e){var n=ba(),t=ea;if(null!==t)return $a(n,t,e);ba(),n=n.memoizedState;var r=(t=ba()).queue.dispatch;return t.memoizedState=e,[n,r,!1]}function qa(e,n,t,r){return e={tag:e,create:n,inst:t,deps:r,next:null},null===(n=Zl.updateQueue)&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Zl.updateQueue=n),null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function Ya(){return ba().memoizedState}function Ka(e,n,t,r){var l=va();Zl.flags|=e,l.memoizedState=qa(1|n,t,{destroy:void 0},void 0===r?null:r)}function Xa(e,n,t,r){var l=ba();r=void 0===r?null:r;var a=l.memoizedState.inst;null!==ea&&null!==r&&ca(r,ea.memoizedState.deps)?l.memoizedState=qa(n,t,a,r):(Zl.flags|=e,l.memoizedState=qa(1|n,t,a,r))}function Ga(e,n){Ka(8390656,8,e,n)}function Ja(e,n){Xa(2048,8,e,n)}function Za(e,n){return Xa(4,2,e,n)}function eo(e,n){return Xa(4,4,e,n)}function no(e,n){if("function"==typeof n){e=e();var t=n(e);return function(){"function"==typeof t?t():n(null)}}if(null!=n)return e=e(),n.current=e,function(){n.current=null}}function to(e,n,t){t=null!=t?t.concat([e]):null,Xa(4,4,no.bind(null,n,e),t)}function ro(){}function lo(e,n){var t=ba();n=void 0===n?null:n;var r=t.memoizedState;return null!==n&&ca(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function ao(e,n){var t=ba();n=void 0===n?null:n;var r=t.memoizedState;if(null!==n&&ca(n,r[1]))return r[0];if(r=e(),la){be(!0);try{e()}finally{be(!1)}}return t.memoizedState=[r,n],r}function oo(e,n,t){return void 0===t||1073741824&Jl?e.memoizedState=n:(e.memoizedState=t,e=Ts(),Zl.lanes|=e,fs|=e,t)}function io(e,n,t,r){return Yt(t,n)?t:null!==Al.current?(e=oo(e,t,r),Yt(e,n)||($o=!0),e):42&Jl?(e=Ts(),Zl.lanes|=e,fs|=e,n):($o=!0,e.memoizedState=t)}function uo(e,n,t,r,l){var a=H.p;H.p=0!==a&&8>a?a:8;var o,i,u,s=N.T,c={};N.T=c,wo(e,!1,n,t);try{var f=l(),d=N.S;null!==d&&d(c,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?ko(e,n,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Ns()):ko(e,n,r,Ns())}catch(t){ko(e,n,{then:function(){},status:"rejected",reason:t},Ns())}finally{H.p=a,N.T=s}}function so(){}function co(e,n,t,r){if(5!==e.tag)throw Error(o(476));var l=fo(e).queue;uo(e,l,n,V,null===t?so:function(){return po(e),t(r)})}function fo(e){var n=e.memoizedState;if(null!==n)return n;var t={};return(n={memoizedState:V,baseState:V,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Aa,lastRenderedState:V},next:null}).next={memoizedState:t,baseState:t,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Aa,lastRenderedState:t},next:null},e.memoizedState=n,null!==(e=e.alternate)&&(e.memoizedState=n),n}function po(e){ko(e,fo(e).next.queue,{},Ns())}function mo(){return Ei(Ff)}function ho(){return ba().memoizedState}function go(){return ba().memoizedState}function yo(e){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var t=Ns(),r=Li(n,e=Ti(t),t);return null!==r&&(Ls(r,0,t),Ii(r,n,t)),n={cache:Ul()},void(e.payload=n)}n=n.return}}function vo(e,n,t){var r=Ns();t={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null},So(e)?Ao(n,t):null!==(t=Pr(e,n,t,r))&&(Ls(t,0,r),Co(t,n,r))}function bo(e,n,t){ko(e,n,t,Ns())}function ko(e,n,t,r){var l={lane:r,revertLane:0,action:t,hasEagerState:!1,eagerState:null,next:null};if(So(e))Ao(n,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=n.lastRenderedReducer))try{var o=n.lastRenderedState,i=a(o,t);if(l.hasEagerState=!0,l.eagerState=i,Yt(i,o))return _r(e,n,l,0),null===ns&&xr(),!1}catch(e){}if(null!==(t=Pr(e,n,l,r)))return Ls(t,0,r),Co(t,n,r),!0}return!1}function wo(e,n,t,r){if(r={lane:2,revertLane:wc(),action:r,hasEagerState:!1,eagerState:null,next:null},So(e)){if(n)throw Error(o(479))}else null!==(n=Pr(e,t,r,2))&&Ls(n,0,2)}function So(e){var n=e.alternate;return e===Zl||null!==n&&n===Zl}function Ao(e,n){ra=ta=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function Co(e,n,t){if(4194176&t){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,Oe(e,t)}}var Eo={readContext:Ei,use:wa,useCallback:sa,useContext:sa,useEffect:sa,useImperativeHandle:sa,useLayoutEffect:sa,useInsertionEffect:sa,useMemo:sa,useReducer:sa,useRef:sa,useState:sa,useDebugValue:sa,useDeferredValue:sa,useTransition:sa,useSyncExternalStore:sa,useId:sa};Eo.useCacheRefresh=sa,Eo.useMemoCache=sa,Eo.useHostTransitionStatus=sa,Eo.useFormState=sa,Eo.useActionState=sa,Eo.useOptimistic=sa;var xo={readContext:Ei,use:wa,useCallback:function(e,n){return va().memoizedState=[e,void 0===n?null:n],e},useContext:Ei,useEffect:Ga,useImperativeHandle:function(e,n,t){t=null!=t?t.concat([e]):null,Ka(4194308,4,no.bind(null,n,e),t)},useLayoutEffect:function(e,n){return Ka(4194308,4,e,n)},useInsertionEffect:function(e,n){Ka(4,2,e,n)},useMemo:function(e,n){var t=va();n=void 0===n?null:n;var r=e();if(la){be(!0);try{e()}finally{be(!1)}}return t.memoizedState=[r,n],r},useReducer:function(e,n,t){var r=va();if(void 0!==t){var l=t(n);if(la){be(!0);try{t(n)}finally{be(!1)}}}else l=n;return r.memoizedState=r.baseState=l,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:l},r.queue=e,e=e.dispatch=vo.bind(null,Zl,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},va().memoizedState=e},useState:function(e){var n=(e=Ia(e)).queue,t=bo.bind(null,Zl,n);return n.dispatch=t,[e.memoizedState,t]},useDebugValue:ro,useDeferredValue:function(e,n){return oo(va(),e,n)},useTransition:function(){var e=Ia(!1);return e=uo.bind(null,Zl,e.queue,!0,!1),va().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,n,t){var r=Zl,l=va();if(Xr){if(void 0===t)throw Error(o(407));t=t()}else{if(t=n(),null===ns)throw Error(o(349));60&rs||Pa(r,n,t)}l.memoizedState=t;var a={value:t,getSnapshot:n};return l.queue=a,Ga(Na.bind(null,r,a,e),[e]),r.flags|=2048,qa(9,za.bind(null,r,a,t,n),{destroy:void 0},null),t},useId:function(){var e=va(),n=ns.identifierPrefix;if(Xr){var t=Vr;n=":"+n+"R"+(t=(Hr&~(1<<32-ke(Hr)-1)).toString(32)+t),0<(t=aa++)&&(n+="H"+t.toString(32)),n+=":"}else n=":"+n+"r"+(t=ua++).toString(32)+":";return e.memoizedState=n},useCacheRefresh:function(){return va().memoizedState=yo.bind(null,Zl)}};xo.useMemoCache=Sa,xo.useHostTransitionStatus=mo,xo.useFormState=Ha,xo.useActionState=Ha,xo.useOptimistic=function(e){var n=va();n.memoizedState=n.baseState=e;var t={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return n.queue=t,n=wo.bind(null,Zl,!0,t),t.dispatch=n,[e,n]};var _o={readContext:Ei,use:wa,useCallback:lo,useContext:Ei,useEffect:Ja,useImperativeHandle:to,useInsertionEffect:Za,useLayoutEffect:eo,useMemo:ao,useReducer:Ca,useRef:Ya,useState:function(){return Ca(Aa)},useDebugValue:ro,useDeferredValue:function(e,n){return io(ba(),ea.memoizedState,e,n)},useTransition:function(){var e=Ca(Aa)[0],n=ba().memoizedState;return["boolean"==typeof e?e:ka(e),n]},useSyncExternalStore:_a,useId:ho};_o.useCacheRefresh=go,_o.useMemoCache=Sa,_o.useHostTransitionStatus=mo,_o.useFormState=Va,_o.useActionState=Va,_o.useOptimistic=function(e,n){return Oa(ba(),0,e,n)};var Po={readContext:Ei,use:wa,useCallback:lo,useContext:Ei,useEffect:Ja,useImperativeHandle:to,useInsertionEffect:Za,useLayoutEffect:eo,useMemo:ao,useReducer:xa,useRef:Ya,useState:function(){return xa(Aa)},useDebugValue:ro,useDeferredValue:function(e,n){var t=ba();return null===ea?oo(t,e,n):io(t,ea.memoizedState,e,n)},useTransition:function(){var e=xa(Aa)[0],n=ba().memoizedState;return["boolean"==typeof e?e:ka(e),n]},useSyncExternalStore:_a,useId:ho};function zo(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:T({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}Po.useCacheRefresh=go,Po.useMemoCache=Sa,Po.useHostTransitionStatus=mo,Po.useFormState=Wa,Po.useActionState=Wa,Po.useOptimistic=function(e,n){var t=ba();return null!==ea?Oa(t,0,e,n):(t.baseState=e,[e,t.queue.dispatch])};var No={isMounted:function(e){return!!(e=e._reactInternals)&&F(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=Ns(),l=Ti(r);l.payload=n,null!=t&&(l.callback=t),null!==(n=Li(e,l,r))&&(Ls(n,0,r),Ii(n,e,r))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=Ns(),l=Ti(r);l.tag=1,l.payload=n,null!=t&&(l.callback=t),null!==(n=Li(e,l,r))&&(Ls(n,0,r),Ii(n,e,r))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=Ns(),r=Ti(t);r.tag=2,null!=n&&(r.callback=n),null!==(n=Li(e,r,t))&&(Ls(n,0,t),Ii(n,e,t))}};function To(e,n,t,r,l,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(n.prototype&&n.prototype.isPureReactComponent&&Kt(t,r)&&Kt(l,a))}function Lo(e,n,t,r){e=n.state,"function"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),"function"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&No.enqueueReplaceState(n,n.state,null)}function Io(e,n){var t=n;if("ref"in n)for(var r in t={},n)"ref"!==r&&(t[r]=n[r]);if(e=e.defaultProps)for(var l in t===n&&(t=T({},t)),e)void 0===t[l]&&(t[l]=e[l]);return t}var Oo="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Ro(e){Oo(e)}function Do(e){console.error(e)}function Fo(e){Oo(e)}function Mo(e,n){try{(0,e.onUncaughtError)(n.value,{componentStack:n.stack})}catch(e){setTimeout((function(){throw e}))}}function Bo(e,n,t){try{(0,e.onCaughtError)(t.value,{componentStack:t.stack,errorBoundary:1===n.tag?n.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Uo(e,n,t){return(t=Ti(t)).tag=3,t.payload={element:null},t.callback=function(){Mo(e,n)},t}function jo(e){return(e=Ti(e)).tag=3,e}function Ho(e,n,t,r){var l=t.type.getDerivedStateFromError;if("function"==typeof l){var a=r.value;e.payload=function(){return l(a)},e.callback=function(){Bo(n,t,r)}}var o=t.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){Bo(n,t,r),"function"!=typeof l&&(null===Ss?Ss=new Set([this]):Ss.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Vo=Error(o(461)),$o=!1;function Qo(e,n,t,r){n.child=null===e?Sl(n,null,t,r):wl(n,e.child,t,r)}function Wo(e,n,t,r,l){t=t.render;var a=n.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return Ci(n),r=fa(e,n,t,o,a,l),i=ha(),null===e||$o?(Xr&&i&&Wr(n),n.flags|=1,Qo(e,n,r,l),n.child):(ga(e,n,l),di(e,n,l))}function qo(e,n,t,r,l){if(null===e){var a=t.type;return"function"!=typeof a||Du(a)||void 0!==a.defaultProps||null!==t.compare?((e=Bu(t.type,null,r,n,n.mode,l)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=a,Yo(e,n,a,r,l))}if(a=e.child,!pi(e,l)){var o=a.memoizedProps;if((t=null!==(t=t.compare)?t:Kt)(o,r)&&e.ref===n.ref)return di(e,n,l)}return n.flags|=1,(e=Fu(a,r)).ref=n.ref,e.return=n,n.child=e}function Yo(e,n,t,r,l){if(null!==e){var a=e.memoizedProps;if(Kt(a,r)&&e.ref===n.ref){if($o=!1,n.pendingProps=r=a,!pi(e,l))return n.lanes=e.lanes,di(e,n,l);131072&e.flags&&($o=!0)}}return Jo(e,n,t,r,l)}function Ko(e,n,t){var r=n.pendingProps,l=r.children,a=!!(2&n.stateNode._pendingVisibility),o=null!==e?e.memoizedState:null;if(Go(e,n),"hidden"===r.mode||a){if(128&n.flags){if(r=null!==o?o.baseLanes|t:t,null!==e){for(l=n.child=e.child,a=0;null!==l;)a=a|l.lanes|l.childLanes,l=l.sibling;n.childLanes=a&~r}else n.childLanes=0,n.child=null;return Xo(e,n,r,t)}if(!(536870912&t))return n.lanes=n.childLanes=536870912,Xo(e,n,null!==o?o.baseLanes|t:t,t);n.memoizedState={baseLanes:0,cachePool:null},null!==e&&Xl(0,null!==o?o.cachePool:null),null!==o?El(n,o):xl(),Tl(n)}else null!==o?(Xl(0,o.cachePool),El(n,o),Ll(),n.memoizedState=null):(null!==e&&Xl(0,null),xl(),Ll());return Qo(e,n,l,t),n.child}function Xo(e,n,t,r){var l=Kl();return l=null===l?null:{parent:Bl._currentValue,pool:l},n.memoizedState={baseLanes:t,cachePool:l},null!==e&&Xl(0,null),xl(),Tl(n),null!==e&&Si(e,n,r,!0),null}function Go(e,n){var t=n.ref;if(null===t)null!==e&&null!==e.ref&&(n.flags|=2097664);else{if("function"!=typeof t&&"object"!=typeof t)throw Error(o(284));null!==e&&e.ref===t||(n.flags|=2097664)}}function Jo(e,n,t,r,l){return Ci(n),t=fa(e,n,t,r,void 0,l),r=ha(),null===e||$o?(Xr&&r&&Wr(n),n.flags|=1,Qo(e,n,t,l),n.child):(ga(e,n,l),di(e,n,l))}function Zo(e,n,t,r,l,a){return Ci(n),n.updateQueue=null,t=pa(n,r,t,l),da(e),r=ha(),null===e||$o?(Xr&&r&&Wr(n),n.flags|=1,Qo(e,n,t,a),n.child):(ga(e,n,a),di(e,n,a))}function ei(e,n,t,r,l){if(Ci(n),null===n.stateNode){var a=Lr,o=t.contextType;"object"==typeof o&&null!==o&&(a=Ei(o)),a=new t(r,a),n.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=No,n.stateNode=a,a._reactInternals=n,(a=n.stateNode).props=r,a.state=n.memoizedState,a.refs={},zi(n),o=t.contextType,a.context="object"==typeof o&&null!==o?Ei(o):Lr,a.state=n.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(zo(n,t,o,r),a.state=n.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(o=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),o!==a.state&&No.enqueueReplaceState(a,a.state,null),Fi(n,r,a,l),Di(),a.state=n.memoizedState),"function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!0}else if(null===e){a=n.stateNode;var i=n.memoizedProps,u=Io(t,i);a.props=u;var s=a.context,c=t.contextType;o=Lr,"object"==typeof c&&null!==c&&(o=Ei(c));var f=t.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate,i=n.pendingProps!==i,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i||s!==o)&&Lo(n,a,r,o),Pi=!1;var d=n.memoizedState;a.state=d,Fi(n,r,a,l),Di(),s=n.memoizedState,i||d!==s||Pi?("function"==typeof f&&(zo(n,t,f,r),s=n.memoizedState),(u=Pi||To(n,t,u,r,d,s,o))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(n.flags|=4194308)):("function"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=s),a.props=r,a.state=s,a.context=o,r=u):("function"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,Ni(e,n),c=Io(t,o=n.memoizedProps),a.props=c,f=n.pendingProps,d=a.context,s=t.contextType,u=Lr,"object"==typeof s&&null!==s&&(u=Ei(s)),(s="function"==typeof(i=t.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(o!==f||d!==u)&&Lo(n,a,r,u),Pi=!1,d=n.memoizedState,a.state=d,Fi(n,r,a,l),Di();var p=n.memoizedState;o!==f||d!==p||Pi||null!==e&&null!==e.dependencies&&Ai(e.dependencies)?("function"==typeof i&&(zo(n,t,i,r),p=n.memoizedState),(c=Pi||To(n,t,c,r,d,p,u)||null!==e&&null!==e.dependencies&&Ai(e.dependencies))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(n.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=p),a.props=r,a.state=p,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return a=r,Go(e,n),r=!!(128&n.flags),a||r?(a=n.stateNode,t=r&&"function"!=typeof t.getDerivedStateFromError?null:a.render(),n.flags|=1,null!==e&&r?(n.child=wl(n,e.child,null,l),n.child=wl(n,null,t,l)):Qo(e,n,t,l),n.memoizedState=a.state,e=n.child):e=di(e,n,l),e}function ni(e,n,t,r){return ll(),n.flags|=256,Qo(e,n,t,r),n.child}var ti={dehydrated:null,treeContext:null,retryLane:0};function ri(e){return{baseLanes:e,cachePool:Gl()}}function li(e,n,t){return e=null!==e?e.childLanes&~t:0,n&&(e|=ms),e}function ai(e,n,t){var r,l=n.pendingProps,a=!1,i=!!(128&n.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&Ol.current)),r&&(a=!0,n.flags&=-129),r=!!(32&n.flags),n.flags&=-33,null===e){if(Xr){if(a?Nl(n):Ll(),Xr){var u,s=Kr;if(u=s){e:{for(u=s,s=Jr;8!==u.nodeType;){if(!s){s=null;break e}if(null===(u=uf(u.nextSibling))){s=null;break e}}s=u}null!==s?(n.memoizedState={dehydrated:s,treeContext:null!==jr?{id:Hr,overflow:Vr}:null,retryLane:536870912},(u=Ru(18,null,null,0)).stateNode=s,u.return=n,n.child=u,Yr=n,Kr=null,u=!0):u=!1}u||el(n)}if(null!==(s=n.memoizedState)&&null!==(s=s.dehydrated))return"$!"===s.data?n.lanes=16:n.lanes=536870912,null;Il(n)}return s=l.children,l=l.fallback,a?(Ll(),s=ii({mode:"hidden",children:s},a=n.mode),l=Uu(l,a,t,null),s.return=n,l.return=n,s.sibling=l,n.child=s,(a=n.child).memoizedState=ri(t),a.childLanes=li(e,r,t),n.memoizedState=ti,l):(Nl(n),oi(n,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(i)256&n.flags?(Nl(n),n.flags&=-257,n=ui(e,n,t)):null!==n.memoizedState?(Ll(),n.child=e.child,n.flags|=128,n=null):(Ll(),a=l.fallback,s=n.mode,l=ii({mode:"visible",children:l.children},s),(a=Uu(a,s,t,null)).flags|=2,l.return=n,a.return=n,l.sibling=a,n.child=l,wl(n,e.child,null,t),(l=n.child).memoizedState=ri(t),l.childLanes=li(e,r,t),n.memoizedState=ti,n=a);else if(Nl(n),"$!"===s.data){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(l=Error(o(419))).stack="",l.digest=r,al({value:l,source:null,stack:null}),n=ui(e,n,t)}else if($o||Si(e,n,t,!1),r=!!(t&e.childLanes),$o||r){if(null!==(r=ns)){if(42&(l=t&-t))l=1;else switch(l){case 2:l=1;break;case 8:l=4;break;case 32:l=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:l=64;break;case 268435456:l=134217728;break;default:l=0}if(0!==(l=l&(r.suspendedLanes|t)?0:l)&&l!==u.retryLane)throw u.retryLane=l,zr(e,l),Ls(r,0,l),Vo}"$?"===s.data||$s(),n=ui(e,n,t)}else"$?"===s.data?(n.flags|=128,n.child=e.child,n=ic.bind(null,e),s._reactRetry=n,n=null):(e=u.treeContext,Kr=uf(s.nextSibling),Yr=n,Xr=!0,Gr=null,Jr=!1,null!==e&&(Br[Ur++]=Hr,Br[Ur++]=Vr,Br[Ur++]=jr,Hr=e.id,Vr=e.overflow,jr=n),(n=oi(n,l.children)).flags|=4096);return n}return a?(Ll(),a=l.fallback,s=n.mode,c=(u=e.child).sibling,(l=Fu(u,{mode:"hidden",children:l.children})).subtreeFlags=31457280&u.subtreeFlags,null!==c?a=Fu(c,a):(a=Uu(a,s,t,null)).flags|=2,a.return=n,l.return=n,l.sibling=a,n.child=l,l=a,a=n.child,null===(s=e.child.memoizedState)?s=ri(t):(null!==(u=s.cachePool)?(c=Bl._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=Gl(),s={baseLanes:s.baseLanes|t,cachePool:u}),a.memoizedState=s,a.childLanes=li(e,r,t),n.memoizedState=ti,l):(Nl(n),e=(t=e.child).sibling,(t=Fu(t,{mode:"visible",children:l.children})).return=n,t.sibling=null,null!==e&&(null===(r=n.deletions)?(n.deletions=[e],n.flags|=16):r.push(e)),n.child=t,n.memoizedState=null,t)}function oi(e,n){return(n=ii({mode:"visible",children:n},e.mode)).return=e,e.child=n}function ii(e,n){return ju(e,n,0,null)}function ui(e,n,t){return wl(n,e.child,null,t),(e=oi(n,n.pendingProps.children)).flags|=2,n.memoizedState=null,e}function si(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),ki(e.return,n,t)}function ci(e,n,t,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:l}:(a.isBackwards=n,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=t,a.tailMode=l)}function fi(e,n,t){var r=n.pendingProps,l=r.revealOrder,a=r.tail;if(Qo(e,n,r.children,t),2&(r=Ol.current))r=1&r|2,n.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&si(e,t,n);else if(19===e.tag)si(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(Y(Ol,r),l){case"forwards":for(t=n.child,l=null;null!==t;)null!==(e=t.alternate)&&null===Rl(e)&&(l=t),t=t.sibling;null===(t=l)?(l=n.child,n.child=null):(l=t.sibling,t.sibling=null),ci(n,!1,l,t,a);break;case"backwards":for(t=null,l=n.child,n.child=null;null!==l;){if(null!==(e=l.alternate)&&null===Rl(e)){n.child=l;break}e=l.sibling,l.sibling=t,t=l,l=e}ci(n,!0,t,null,a);break;case"together":ci(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function di(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),fs|=n.lanes,!(t&n.childLanes)){if(null===e)return null;if(Si(e,n,t,!1),!(t&n.childLanes))return null}if(null!==e&&n.child!==e.child)throw Error(o(153));if(null!==n.child){for(t=Fu(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=Fu(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function pi(e,n){return!!(e.lanes&n)||!(null===(e=e.dependencies)||!Ai(e))}function mi(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps)$o=!0;else{if(!(pi(e,t)||128&n.flags))return $o=!1,function(e,n,t){switch(n.tag){case 3:Z(n,n.stateNode.containerInfo),vi(0,Bl,e.memoizedState.cache),ll();break;case 27:case 5:ne(n);break;case 4:Z(n,n.stateNode.containerInfo);break;case 10:vi(0,n.type,n.memoizedProps.value);break;case 13:var r=n.memoizedState;if(null!==r)return null!==r.dehydrated?(Nl(n),n.flags|=128,null):t&n.child.childLanes?ai(e,n,t):(Nl(n),null!==(e=di(e,n,t))?e.sibling:null);Nl(n);break;case 19:var l=!!(128&e.flags);if((r=!!(t&n.childLanes))||(Si(e,n,t,!1),r=!!(t&n.childLanes)),l){if(r)return fi(e,n,t);n.flags|=128}if(null!==(l=n.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),Y(Ol,Ol.current),r)break;return null;case 22:case 23:return n.lanes=0,Ko(e,n,t);case 24:vi(0,Bl,e.memoizedState.cache)}return di(e,n,t)}(e,n,t);$o=!!(131072&e.flags)}else $o=!1,Xr&&1048576&n.flags&&Qr(n,Mr,n.index);switch(n.lanes=0,n.tag){case 16:e:{e=n.pendingProps;var r=n.elementType,l=r._init;if(r=l(r._payload),n.type=r,"function"!=typeof r){if(null!=r){if((l=r.$$typeof)===y){n.tag=11,n=Wo(null,n,r,e,t);break e}if(l===k){n.tag=14,n=qo(null,n,r,e,t);break e}}throw n=_(r)||r,Error(o(306,n,""))}Du(r)?(e=Io(r,e),n.tag=1,n=ei(null,n,r,e,t)):(n.tag=0,n=Jo(null,n,r,e,t))}return n;case 0:return Jo(e,n,n.type,n.pendingProps,t);case 1:return ei(e,n,r=n.type,l=Io(r,n.pendingProps),t);case 3:e:{if(Z(n,n.stateNode.containerInfo),null===e)throw Error(o(387));var a=n.pendingProps;r=(l=n.memoizedState).element,Ni(e,n),Fi(n,a,null,t);var i=n.memoizedState;if(a=i.cache,vi(0,Bl,a),a!==l.cache&&wi(n,[Bl],t,!0),Di(),a=i.element,l.isDehydrated){if(l={element:a,isDehydrated:!1,cache:i.cache},n.updateQueue.baseState=l,n.memoizedState=l,256&n.flags){n=ni(e,n,a,t);break e}if(a!==r){al(r=Or(Error(o(424)),n)),n=ni(e,n,a,t);break e}for(Kr=uf(n.stateNode.containerInfo.firstChild),Yr=n,Xr=!0,Gr=null,Jr=!0,t=Sl(n,null,a,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling}else{if(ll(),a===r){n=di(e,n,t);break e}Qo(e,n,a,t)}n=n.child}return n;case 26:return Go(e,n),null===e?(t=yf(n.type,null,n.pendingProps,null))?n.memoizedState=t:Xr||(t=n.type,e=n.pendingProps,(r=Kc(G.current).createElement(t))[Me]=n,r[Be]=e,Wc(r,t,e),Ge(r),n.stateNode=r):n.memoizedState=yf(n.type,e.memoizedProps,n.pendingProps,e.memoizedState),null;case 27:return ne(n),null===e&&Xr&&(r=n.stateNode=cf(n.type,n.pendingProps,G.current),Yr=n,Jr=!0,Kr=uf(r.firstChild)),r=n.pendingProps.children,null!==e||Xr?Qo(e,n,r,t):n.child=wl(n,null,r,t),Go(e,n),n.child;case 5:return null===e&&Xr&&((l=r=Kr)&&(null!==(r=function(e,n,t,r){for(;1===e.nodeType;){var l=t;if(e.nodeName.toLowerCase()!==n.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Qe])switch(n){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==l.rel||e.getAttribute("href")!==(null==l.href?null:l.href)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin)||e.getAttribute("title")!==(null==l.title?null:l.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==l.src?null:l.src)||e.getAttribute("type")!==(null==l.type?null:l.type)||e.getAttribute("crossorigin")!==(null==l.crossOrigin?null:l.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==n||"hidden"!==e.type)return e;var a=null==l.name?null:""+l.name;if("hidden"===l.type&&e.getAttribute("name")===a)return e}if(null===(e=uf(e.nextSibling)))break}return null}(r,n.type,n.pendingProps,Jr))?(n.stateNode=r,Yr=n,Kr=uf(r.firstChild),Jr=!1,l=!0):l=!1),l||el(n)),ne(n),l=n.type,a=n.pendingProps,i=null!==e?e.memoizedProps:null,r=a.children,Jc(l,a)?r=null:null!==i&&Jc(l,i)&&(n.flags|=32),null!==n.memoizedState&&(l=fa(e,n,ma,null,null,t),Ff._currentValue=l),Go(e,n),Qo(e,n,r,t),n.child;case 6:return null===e&&Xr&&((e=t=Kr)&&(null!==(t=function(e,n,t){if(""===n)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!t)return null;if(null===(e=uf(e.nextSibling)))return null}return e}(t,n.pendingProps,Jr))?(n.stateNode=t,Yr=n,Kr=null,e=!0):e=!1),e||el(n)),null;case 13:return ai(e,n,t);case 4:return Z(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=wl(n,null,r,t):Qo(e,n,r,t),n.child;case 11:return Wo(e,n,n.type,n.pendingProps,t);case 7:return Qo(e,n,n.pendingProps,t),n.child;case 8:case 12:return Qo(e,n,n.pendingProps.children,t),n.child;case 10:return r=n.pendingProps,vi(0,n.type,r.value),Qo(e,n,r.children,t),n.child;case 9:return l=n.type._context,r=n.pendingProps.children,Ci(n),r=r(l=Ei(l)),n.flags|=1,Qo(e,n,r,t),n.child;case 14:return qo(e,n,n.type,n.pendingProps,t);case 15:return Yo(e,n,n.type,n.pendingProps,t);case 19:return fi(e,n,t);case 22:return Ko(e,n,t);case 24:return Ci(n),r=Ei(Bl),null===e?(null===(l=Kl())&&(l=ns,a=Ul(),l.pooledCache=a,a.refCount++,null!==a&&(l.pooledCacheLanes|=t),l=a),n.memoizedState={parent:r,cache:l},zi(n),vi(0,Bl,l)):(!!(e.lanes&t)&&(Ni(e,n),Fi(n,null,null,t),Di()),l=e.memoizedState,a=n.memoizedState,l.parent!==r?(l={parent:r,cache:r},n.memoizedState=l,0===n.lanes&&(n.memoizedState=n.updateQueue.baseState=l),vi(0,Bl,r)):(r=a.cache,vi(0,Bl,r),r!==l.cache&&wi(n,[Bl],t,!0))),Qo(e,n,n.pendingProps.children,t),n.child;case 29:throw n.pendingProps}throw Error(o(156,n.tag))}var hi=W(null),gi=null,yi=null;function vi(e,n,t){Y(hi,n._currentValue),n._currentValue=t}function bi(e){e._currentValue=hi.current,q(hi)}function ki(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function wi(e,n,t,r){var l=e.child;for(null!==l&&(l.return=e);null!==l;){var a=l.dependencies;if(null!==a){var i=l.child;a=a.firstContext;e:for(;null!==a;){var u=a;a=l;for(var s=0;s<n.length;s++)if(u.context===n[s]){a.lanes|=t,null!==(u=a.alternate)&&(u.lanes|=t),ki(a.return,t,e),r||(i=null);break e}a=u.next}}else if(18===l.tag){if(null===(i=l.return))throw Error(o(341));i.lanes|=t,null!==(a=i.alternate)&&(a.lanes|=t),ki(i,t,e),i=null}else i=l.child;if(null!==i)i.return=l;else for(i=l;null!==i;){if(i===e){i=null;break}if(null!==(l=i.sibling)){l.return=i.return,i=l;break}i=i.return}l=i}}function Si(e,n,t,r){e=null;for(var l=n,a=!1;null!==l;){if(!a)if(524288&l.flags)a=!0;else if(262144&l.flags)break;if(10===l.tag){var i=l.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=l.type;Yt(l.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(l===J.current){if(null===(i=l.alternate))throw Error(o(387));i.memoizedState.memoizedState!==l.memoizedState.memoizedState&&(null!==e?e.push(Ff):e=[Ff])}l=l.return}null!==e&&wi(n,e,t,r),n.flags|=262144}function Ai(e){for(e=e.firstContext;null!==e;){if(!Yt(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Ci(e){gi=e,yi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Ei(e){return _i(gi,e)}function xi(e,n){return null===gi&&Ci(e),_i(e,n)}function _i(e,n){var t=n._currentValue;if(n={context:n,memoizedValue:t,next:null},null===yi){if(null===e)throw Error(o(308));yi=n,e.dependencies={lanes:0,firstContext:n},e.flags|=524288}else yi=yi.next=n;return t}var Pi=!1;function zi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Ni(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Ti(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Li(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&es){var l=r.pending;return null===l?n.next=n:(n.next=l.next,l.next=n),r.pending=n,n=Tr(e),Nr(e,null,t),n}return _r(e,r,n,t),Tr(e)}function Ii(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,4194176&t)){var r=n.lanes;t|=r&=e.pendingLanes,n.lanes=t,Oe(e,t)}}function Oi(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var l=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var o={lane:t.lane,tag:t.tag,payload:t.payload,callback:null,next:null};null===a?l=a=o:a=a.next=o,t=t.next}while(null!==t);null===a?l=a=n:a=a.next=n}else l=a=n;return t={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=t)}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}var Ri=!1;function Di(){if(Ri&&null!==Ql)throw Ql}function Fi(e,n,t,r){Ri=!1;var l=e.updateQueue;Pi=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,i=l.shared.pending;if(null!==i){l.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?a=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=l.baseState;for(o=0,c=s=u=null,i=a;;){var d=-536870913&i.lane,p=d!==i.lane;if(p?(rs&d)===d:(r&d)===d){0!==d&&d===$l&&(Ri=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var m=e,h=i;d=n;var g=t;switch(h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(g,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d="function"==typeof(m=h.payload)?m.call(g,f,d):m))break e;f=T({},f,d);break e;case 2:Pi=!0}}null!==(d=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=l.callbacks)?l.callbacks=[d]:p.push(d))}else p={lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,o|=d;if(null===(i=i.next)){if(null===(i=l.shared.pending))break;i=(p=i).next,p.next=null,l.lastBaseUpdate=p,l.shared.pending=null}}null===c&&(u=f),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null===a&&(l.shared.lanes=0),fs|=o,e.lanes=o,e.memoizedState=f}}function Mi(e,n){if("function"!=typeof e)throw Error(o(191,e));e.call(n)}function Bi(e,n){var t=e.callbacks;if(null!==t)for(e.callbacks=null,e=0;e<t.length;e++)Mi(t[e],n)}function Ui(e,n){try{var t=n.updateQueue,r=null!==t?t.lastEffect:null;if(null!==r){var l=r.next;t=l;do{if((t.tag&e)===e){r=void 0;var a=t.create,o=t.inst;r=a(),o.destroy=r}t=t.next}while(t!==l)}}catch(e){rc(n,n.return,e)}}function ji(e,n,t){try{var r=n.updateQueue,l=null!==r?r.lastEffect:null;if(null!==l){var a=l.next;r=a;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,l=n;var u=t;try{i()}catch(e){rc(l,u,e)}}}r=r.next}while(r!==a)}}catch(e){rc(n,n.return,e)}}function Hi(e){var n=e.updateQueue;if(null!==n){var t=e.stateNode;try{Bi(n,t)}catch(n){rc(e,e.return,n)}}}function Vi(e,n,t){t.props=Io(e.type,e.memoizedProps),t.state=e.memoizedState;try{t.componentWillUnmount()}catch(t){rc(e,n,t)}}function $i(e,n){try{var t=e.ref;if(null!==t){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var l=r;break;default:l=r}"function"==typeof t?e.refCleanup=t(l):t.current=l}}catch(t){rc(e,n,t)}}function Qi(e,n){var t=e.ref,r=e.refCleanup;if(null!==t)if("function"==typeof r)try{r()}catch(t){rc(e,n,t)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof t)try{t(null)}catch(t){rc(e,n,t)}else t.current=null}function Wi(e){var n=e.type,t=e.memoizedProps,r=e.stateNode;try{e:switch(n){case"button":case"input":case"select":case"textarea":t.autoFocus&&r.focus();break e;case"img":t.src?r.src=t.src:t.srcSet&&(r.srcset=t.srcSet)}}catch(n){rc(e,e.return,n)}}function qi(e,n,t){try{var r=e.stateNode;!function(e,n,t,r){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var l=null,a=null,i=null,u=null,s=null,c=null,f=null;for(m in t){var d=t[m];if(t.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||$c(e,n,m,null,r,d)}}for(var p in r){var m=r[p];if(d=t[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":a=m;break;case"name":l=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":i=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(o(137,n));break;default:m!==d&&$c(e,n,p,m,r,d)}}return void yn(e,i,u,s,c,f,a,l);case"select":for(a in m=i=u=p=null,t)if(s=t[a],t.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(a)||$c(e,n,a,null,r,s)}for(l in r)if(a=r[l],s=t[l],r.hasOwnProperty(l)&&(null!=a||null!=s))switch(l){case"value":p=a;break;case"defaultValue":u=a;break;case"multiple":i=a;default:a!==s&&$c(e,n,l,a,r,s)}return n=u,t=i,r=m,void(null!=p?kn(e,!!t,p,!1):!!r!=!!t&&(null!=n?kn(e,!!t,n,!0):kn(e,!!t,t?[]:"",!1)));case"textarea":for(u in m=p=null,t)if(l=t[u],t.hasOwnProperty(u)&&null!=l&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:$c(e,n,u,null,r,l)}for(i in r)if(l=r[i],a=t[i],r.hasOwnProperty(i)&&(null!=l||null!=a))switch(i){case"value":p=l;break;case"defaultValue":m=l;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=l)throw Error(o(91));break;default:l!==a&&$c(e,n,i,l,r,a)}return void wn(e,p,m);case"option":for(var h in t)p=t[h],t.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:$c(e,n,h,null,r,p));for(s in r)p=r[s],m=t[s],!r.hasOwnProperty(s)||p===m||null==p&&null==m||("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:$c(e,n,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in t)p=t[g],t.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&$c(e,n,g,null,r,p);for(c in r)if(p=r[c],m=t[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,n));break;default:$c(e,n,c,p,r,m)}return;default:if(_n(n)){for(var y in t)p=t[y],t.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Qc(e,n,y,void 0,r,p);for(f in r)p=r[f],m=t[f],!r.hasOwnProperty(f)||p===m||void 0===p&&void 0===m||Qc(e,n,f,p,r,m);return}}for(var v in t)p=t[v],t.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&$c(e,n,v,null,r,p);for(d in r)p=r[d],m=t[d],!r.hasOwnProperty(d)||p===m||null==p&&null==m||$c(e,n,d,p,r,m)}(r,e.type,t,n),r[Be]=n}catch(n){rc(e,e.return,n)}}function Yi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Ki(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Yi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Xi(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?8===t.nodeType?t.parentNode.insertBefore(e,n):t.insertBefore(e,n):(8===t.nodeType?(n=t.parentNode).insertBefore(e,t):(n=t).appendChild(e),null!=(t=t._reactRootContainer)||null!==n.onclick||(n.onclick=Vc));else if(4!==r&&27!==r&&null!==(e=e.child))for(Xi(e,n,t),e=e.sibling;null!==e;)Xi(e,n,t),e=e.sibling}function Gi(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Gi(e,n,t),e=e.sibling;null!==e;)Gi(e,n,t),e=e.sibling}var Ji=!1,Zi=!1,eu=!1,nu="function"==typeof WeakSet?WeakSet:Set,tu=null,ru=!1;function lu(e,n,t){var r=t.flags;switch(t.tag){case 0:case 11:case 15:yu(e,t),4&r&&Ui(5,t);break;case 1:if(yu(e,t),4&r)if(e=t.stateNode,null===n)try{e.componentDidMount()}catch(e){rc(t,t.return,e)}else{var l=Io(t.type,n.memoizedProps);n=n.memoizedState;try{e.componentDidUpdate(l,n,e.__reactInternalSnapshotBeforeUpdate)}catch(e){rc(t,t.return,e)}}64&r&&Hi(t),512&r&&$i(t,t.return);break;case 3:if(yu(e,t),64&r&&null!==(r=t.updateQueue)){if(e=null,null!==t.child)switch(t.child.tag){case 27:case 5:case 1:e=t.child.stateNode}try{Bi(r,e)}catch(e){rc(t,t.return,e)}}break;case 26:yu(e,t),512&r&&$i(t,t.return);break;case 27:case 5:yu(e,t),null===n&&4&r&&Wi(t),512&r&&$i(t,t.return);break;case 12:default:yu(e,t);break;case 13:yu(e,t),4&r&&cu(e,t);break;case 22:if(!(l=null!==t.memoizedState||Ji)){n=null!==n&&null!==n.memoizedState||Zi;var a=Ji,o=Zi;Ji=l,(Zi=n)&&!o?bu(e,t,!!(8772&t.subtreeFlags)):yu(e,t),Ji=a,Zi=o}512&r&&("manual"===t.memoizedProps.mode?$i(t,t.return):Qi(t,t.return))}}function au(e){var n=e.alternate;null!==n&&(e.alternate=null,au(n)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(n=e.stateNode)&&We(n),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var ou=null,iu=!1;function uu(e,n,t){for(t=t.child;null!==t;)su(e,n,t),t=t.sibling}function su(e,n,t){if(ve&&"function"==typeof ve.onCommitFiberUnmount)try{ve.onCommitFiberUnmount(ye,t)}catch(e){}switch(t.tag){case 26:Zi||Qi(t,n),uu(e,n,t),t.memoizedState?t.memoizedState.count--:t.stateNode&&(t=t.stateNode).parentNode.removeChild(t);break;case 27:Zi||Qi(t,n);var r=ou,l=iu;for(ou=t.stateNode,uu(e,n,t),n=(t=t.stateNode).attributes;n.length;)t.removeAttributeNode(n[0]);We(t),ou=r,iu=l;break;case 5:Zi||Qi(t,n);case 6:l=ou;var a=iu;if(ou=null,uu(e,n,t),iu=a,null!==(ou=l))if(iu)try{e=ou,r=t.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){rc(t,n,e)}else try{ou.removeChild(t.stateNode)}catch(e){rc(t,n,e)}break;case 18:null!==ou&&(iu?(n=ou,t=t.stateNode,8===n.nodeType?af(n.parentNode,t):1===n.nodeType&&af(n,t),gd(n)):af(ou,t.stateNode));break;case 4:r=ou,l=iu,ou=t.stateNode.containerInfo,iu=!0,uu(e,n,t),ou=r,iu=l;break;case 0:case 11:case 14:case 15:Zi||ji(2,t,n),Zi||ji(4,t,n),uu(e,n,t);break;case 1:Zi||(Qi(t,n),"function"==typeof(r=t.stateNode).componentWillUnmount&&Vi(t,n,r)),uu(e,n,t);break;case 21:uu(e,n,t);break;case 22:Zi||Qi(t,n),Zi=(r=Zi)||null!==t.memoizedState,uu(e,n,t),Zi=r;break;default:uu(e,n,t)}}function cu(e,n){if(null===n.memoizedState&&null!==(e=n.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{gd(e)}catch(e){rc(n,n.return,e)}}function fu(e,n){var t=function(e){switch(e.tag){case 13:case 19:var n=e.stateNode;return null===n&&(n=e.stateNode=new nu),n;case 22:return null===(n=(e=e.stateNode)._retryCache)&&(n=e._retryCache=new nu),n;default:throw Error(o(435,e.tag))}}(e);n.forEach((function(n){var r=uc.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))}))}function du(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var l=t[r],a=e,i=n,u=i;e:for(;null!==u;){switch(u.tag){case 27:case 5:ou=u.stateNode,iu=!1;break e;case 3:case 4:ou=u.stateNode.containerInfo,iu=!0;break e}u=u.return}if(null===ou)throw Error(o(160));su(a,i,l),ou=null,iu=!1,null!==(a=l.alternate)&&(a.return=null),l.return=null}if(13878&n.subtreeFlags)for(n=n.child;null!==n;)mu(n,e),n=n.sibling}var pu=null;function mu(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:du(n,e),hu(e),4&r&&(ji(3,e,e.return),Ui(3,e),ji(5,e,e.return));break;case 1:du(n,e),hu(e),512&r&&(Zi||null===t||Qi(t,t.return)),64&r&&Ji&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(t=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===t?r:t.concat(r));break;case 26:var l=pu;if(du(n,e),hu(e),512&r&&(Zi||null===t||Qi(t,t.return)),4&r){var a=null!==t?t.memoizedState:null;if(r=e.memoizedState,null===t)if(null===r)if(null===e.stateNode){e:{r=e.type,t=e.memoizedProps,l=l.ownerDocument||l;n:switch(r){case"title":(!(a=l.getElementsByTagName("title")[0])||a[Qe]||a[Me]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=l.createElement(r),l.head.insertBefore(a,l.querySelector("head > title"))),Wc(a,r,t),a[Me]=e,Ge(a),r=a;break e;case"link":var i=Pf("link","href",l).get(r+(t.href||""));if(i)for(var u=0;u<i.length;u++)if((a=i[u]).getAttribute("href")===(null==t.href?null:t.href)&&a.getAttribute("rel")===(null==t.rel?null:t.rel)&&a.getAttribute("title")===(null==t.title?null:t.title)&&a.getAttribute("crossorigin")===(null==t.crossOrigin?null:t.crossOrigin)){i.splice(u,1);break n}Wc(a=l.createElement(r),r,t),l.head.appendChild(a);break;case"meta":if(i=Pf("meta","content",l).get(r+(t.content||"")))for(u=0;u<i.length;u++)if((a=i[u]).getAttribute("content")===(null==t.content?null:""+t.content)&&a.getAttribute("name")===(null==t.name?null:t.name)&&a.getAttribute("property")===(null==t.property?null:t.property)&&a.getAttribute("http-equiv")===(null==t.httpEquiv?null:t.httpEquiv)&&a.getAttribute("charset")===(null==t.charSet?null:t.charSet)){i.splice(u,1);break n}Wc(a=l.createElement(r),r,t),l.head.appendChild(a);break;default:throw Error(o(468,r))}a[Me]=e,Ge(a),r=a}e.stateNode=r}else zf(l,e.type,e.stateNode);else e.stateNode=Af(l,r,e.memoizedProps);else a!==r?(null===a?null!==t.stateNode&&(t=t.stateNode).parentNode.removeChild(t):a.count--,null===r?zf(l,e.type,e.stateNode):Af(l,r,e.memoizedProps)):null===r&&null!==e.stateNode&&qi(e,e.memoizedProps,t.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){l=e.stateNode,a=e.memoizedProps;try{for(var s=l.firstChild;s;){var c=s.nextSibling,f=s.nodeName;s[Qe]||"HEAD"===f||"BODY"===f||"SCRIPT"===f||"STYLE"===f||"LINK"===f&&"stylesheet"===s.rel.toLowerCase()||l.removeChild(s),s=c}for(var d=e.type,p=l.attributes;p.length;)l.removeAttributeNode(p[0]);Wc(l,d,a),l[Me]=e,l[Be]=a}catch(n){rc(e,e.return,n)}}case 5:if(du(n,e),hu(e),512&r&&(Zi||null===t||Qi(t,t.return)),32&e.flags){l=e.stateNode;try{An(l,"")}catch(n){rc(e,e.return,n)}}4&r&&null!=e.stateNode&&qi(e,l=e.memoizedProps,null!==t?t.memoizedProps:l),1024&r&&(eu=!0);break;case 6:if(du(n,e),hu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,t=e.stateNode;try{t.nodeValue=r}catch(n){rc(e,e.return,n)}}break;case 3:if(_f=null,l=pu,pu=pf(n.containerInfo),du(n,e),pu=l,hu(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{gd(n.containerInfo)}catch(n){rc(e,e.return,n)}eu&&(eu=!1,gu(e));break;case 4:r=pu,pu=pf(e.stateNode.containerInfo),du(n,e),hu(e),pu=r;break;case 12:du(n,e),hu(e);break;case 13:du(n,e),hu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==t&&null!==t.memoizedState)&&(bs=ue()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,fu(e,r));break;case 22:if(512&r&&(Zi||null===t||Qi(t,t.return)),s=null!==e.memoizedState,c=null!==t&&null!==t.memoizedState,Ji=(f=Ji)||s,Zi=(d=Zi)||c,du(n,e),Zi=d,Ji=f,hu(e),(n=e.stateNode)._current=e,n._visibility&=-3,n._visibility|=2&n._pendingVisibility,8192&r&&(n._visibility=s?-2&n._visibility:1|n._visibility,s&&(n=Ji||Zi,null===t||c||n||vu(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(t=null,n=e;;){if(5===n.tag||26===n.tag||27===n.tag){if(null===t){c=t=n;try{if(l=c.stateNode,s)"function"==typeof(a=l.style).setProperty?a.setProperty("display","none","important"):a.display="none";else{i=c.stateNode;var m=null!=(u=c.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null;i.style.display=null==m||"boolean"==typeof m?"":(""+m).trim()}}catch(e){rc(c,c.return,e)}}}else if(6===n.tag){if(null===t){c=n;try{c.stateNode.nodeValue=s?"":c.memoizedProps}catch(e){rc(c,c.return,e)}}}else if((22!==n.tag&&23!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break e;for(;null===n.sibling;){if(null===n.return||n.return===e)break e;t===n&&(t=null),n=n.return}t===n&&(t=null),n.sibling.return=n.return,n=n.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(t=r.retryQueue)&&(r.retryQueue=null,fu(e,t));break;case 19:du(n,e),hu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,fu(e,r));break;case 21:break;default:du(n,e),hu(e)}}function hu(e){var n=e.flags;if(2&n){try{if(27!==e.tag){e:{for(var t=e.return;null!==t;){if(Yi(t)){var r=t;break e}t=t.return}throw Error(o(160))}switch(r.tag){case 27:var l=r.stateNode;Gi(e,Ki(e),l);break;case 5:var a=r.stateNode;32&r.flags&&(An(a,""),r.flags&=-33),Gi(e,Ki(e),a);break;case 3:case 4:var i=r.stateNode.containerInfo;Xi(e,Ki(e),i);break;default:throw Error(o(161))}}}catch(n){rc(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function gu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var n=e;gu(n),5===n.tag&&1024&n.flags&&n.stateNode.reset(),e=e.sibling}}function yu(e,n){if(8772&n.subtreeFlags)for(n=n.child;null!==n;)lu(e,n.alternate,n),n=n.sibling}function vu(e){for(e=e.child;null!==e;){var n=e;switch(n.tag){case 0:case 11:case 14:case 15:ji(4,n,n.return),vu(n);break;case 1:Qi(n,n.return);var t=n.stateNode;"function"==typeof t.componentWillUnmount&&Vi(n,n.return,t),vu(n);break;case 26:case 27:case 5:Qi(n,n.return),vu(n);break;case 22:Qi(n,n.return),null===n.memoizedState&&vu(n);break;default:vu(n)}e=e.sibling}}function bu(e,n,t){for(t=t&&!!(8772&n.subtreeFlags),n=n.child;null!==n;){var r=n.alternate,l=e,a=n,o=a.flags;switch(a.tag){case 0:case 11:case 15:bu(l,a,t),Ui(4,a);break;case 1:if(bu(l,a,t),"function"==typeof(l=(r=a).stateNode).componentDidMount)try{l.componentDidMount()}catch(e){rc(r,r.return,e)}if(null!==(l=(r=a).updateQueue)){var i=r.stateNode;try{var u=l.shared.hiddenCallbacks;if(null!==u)for(l.shared.hiddenCallbacks=null,l=0;l<u.length;l++)Mi(u[l],i)}catch(e){rc(r,r.return,e)}}t&&64&o&&Hi(a),$i(a,a.return);break;case 26:case 27:case 5:bu(l,a,t),t&&null===r&&4&o&&Wi(a),$i(a,a.return);break;case 12:default:bu(l,a,t);break;case 13:bu(l,a,t),t&&4&o&&cu(l,a);break;case 22:null===a.memoizedState&&bu(l,a,t),$i(a,a.return)}n=n.sibling}}function ku(e,n){var t=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),e=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(e=n.memoizedState.cachePool.pool),e!==t&&(null!=e&&e.refCount++,null!=t&&jl(t))}function wu(e,n){e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&jl(e))}function Su(e,n,t,r){if(10256&n.subtreeFlags)for(n=n.child;null!==n;)Au(e,n,t,r),n=n.sibling}function Au(e,n,t,r){var l=n.flags;switch(n.tag){case 0:case 11:case 15:Su(e,n,t,r),2048&l&&Ui(9,n);break;case 3:Su(e,n,t,r),2048&l&&(e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&jl(e)));break;case 12:if(2048&l){Su(e,n,t,r),e=n.stateNode;try{var a=n.memoizedProps,o=a.id,i=a.onPostCommit;"function"==typeof i&&i(o,null===n.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){rc(n,n.return,e)}}else Su(e,n,t,r);break;case 23:break;case 22:a=n.stateNode,null!==n.memoizedState?4&a._visibility?Su(e,n,t,r):Eu(e,n):4&a._visibility?Su(e,n,t,r):(a._visibility|=4,Cu(e,n,t,r,!!(10256&n.subtreeFlags))),2048&l&&ku(n.alternate,n);break;case 24:Su(e,n,t,r),2048&l&&wu(n.alternate,n);break;default:Su(e,n,t,r)}}function Cu(e,n,t,r,l){for(l=l&&!!(10256&n.subtreeFlags),n=n.child;null!==n;){var a=e,o=n,i=t,u=r,s=o.flags;switch(o.tag){case 0:case 11:case 15:Cu(a,o,i,u,l),Ui(8,o);break;case 23:break;case 22:var c=o.stateNode;null!==o.memoizedState?4&c._visibility?Cu(a,o,i,u,l):Eu(a,o):(c._visibility|=4,Cu(a,o,i,u,l)),l&&2048&s&&ku(o.alternate,o);break;case 24:Cu(a,o,i,u,l),l&&2048&s&&wu(o.alternate,o);break;default:Cu(a,o,i,u,l)}n=n.sibling}}function Eu(e,n){if(10256&n.subtreeFlags)for(n=n.child;null!==n;){var t=e,r=n,l=r.flags;switch(r.tag){case 22:Eu(t,r),2048&l&&ku(r.alternate,r);break;case 24:Eu(t,r),2048&l&&wu(r.alternate,r);break;default:Eu(t,r)}n=n.sibling}}var xu=8192;function _u(e){if(e.subtreeFlags&xu)for(e=e.child;null!==e;)Pu(e),e=e.sibling}function Pu(e){switch(e.tag){case 26:_u(e),e.flags&xu&&null!==e.memoizedState&&function(e,n,t){if(null===Tf)throw Error(o(475));var r=Tf;if(!("stylesheet"!==n.type||"string"==typeof t.media&&!1===matchMedia(t.media).matches||4&n.state.loading)){if(null===n.instance){var l=vf(t.href),a=e.querySelector(bf(l));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=If.bind(r),e.then(r,r)),n.state.loading|=4,n.instance=a,void Ge(a);a=e.ownerDocument||e,t=kf(t),(l=ff.get(l))&&Ef(t,l),Ge(a=a.createElement("link"));var i=a;i._p=new Promise((function(e,n){i.onload=e,i.onerror=n})),Wc(a,"link",t),n.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(n,e),(e=n.state.preload)&&!(3&n.state.loading)&&(r.count++,n=If.bind(r),e.addEventListener("load",n),e.addEventListener("error",n))}}(pu,e.memoizedState,e.memoizedProps);break;case 5:default:_u(e);break;case 3:case 4:var n=pu;pu=pf(e.stateNode.containerInfo),_u(e),pu=n;break;case 22:null===e.memoizedState&&(null!==(n=e.alternate)&&null!==n.memoizedState?(n=xu,xu=16777216,_u(e),xu=n):_u(e))}}function zu(e){var n=e.alternate;if(null!==n&&null!==(e=n.child)){n.child=null;do{n=e.sibling,e.sibling=null,e=n}while(null!==e)}}function Nu(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];tu=r,Iu(r,e)}zu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Tu(e),e=e.sibling}function Tu(e){switch(e.tag){case 0:case 11:case 15:Nu(e),2048&e.flags&&ji(9,e,e.return);break;case 3:case 12:default:Nu(e);break;case 22:var n=e.stateNode;null!==e.memoizedState&&4&n._visibility&&(null===e.return||13!==e.return.tag)?(n._visibility&=-5,Lu(e)):Nu(e)}}function Lu(e){var n=e.deletions;if(16&e.flags){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];tu=r,Iu(r,e)}zu(e)}for(e=e.child;null!==e;){switch((n=e).tag){case 0:case 11:case 15:ji(8,n,n.return),Lu(n);break;case 22:4&(t=n.stateNode)._visibility&&(t._visibility&=-5,Lu(n));break;default:Lu(n)}e=e.sibling}}function Iu(e,n){for(;null!==tu;){var t=tu;switch(t.tag){case 0:case 11:case 15:ji(8,t,n);break;case 23:case 22:if(null!==t.memoizedState&&null!==t.memoizedState.cachePool){var r=t.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:jl(t.memoizedState.cache)}if(null!==(r=t.child))r.return=t,tu=r;else e:for(t=e;null!==tu;){var l=(r=tu).sibling,a=r.return;if(au(r),r===t){tu=null;break e}if(null!==l){l.return=a,tu=l;break e}tu=a}}}function Ou(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ru(e,n,t,r){return new Ou(e,n,t,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Fu(e,n){var t=e.alternate;return null===t?((t=Ru(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=31457280&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t.refCleanup=e.refCleanup,t}function Mu(e,n){e.flags&=31457282;var t=e.alternate;return null===t?(e.childLanes=0,e.lanes=n,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=t.childLanes,e.lanes=t.lanes,e.child=t.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=t.memoizedProps,e.memoizedState=t.memoizedState,e.updateQueue=t.updateQueue,e.type=t.type,n=t.dependencies,e.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext}),e}function Bu(e,n,t,r,l,a){var i=0;if(r=e,"function"==typeof e)Du(e)&&(i=1);else if("string"==typeof e)i=function(e,n,t){if(1===t||null!=n.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof n.precedence||"string"!=typeof n.href||""===n.href)break;return!0;case"link":if("string"!=typeof n.rel||"string"!=typeof n.href||""===n.href||n.onLoad||n.onError)break;return"stylesheet"!==n.rel||(e=n.disabled,"string"==typeof n.precedence&&null==e);case"script":if(n.async&&"function"!=typeof n.async&&"symbol"!=typeof n.async&&!n.onLoad&&!n.onError&&n.src&&"string"==typeof n.src)return!0}return!1}(e,t,K.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case f:return Uu(t.children,l,a,n);case d:i=8,l|=24;break;case p:return(e=Ru(12,t,n,2|l)).elementType=p,e.lanes=a,e;case v:return(e=Ru(13,t,n,l)).elementType=v,e.lanes=a,e;case b:return(e=Ru(19,t,n,l)).elementType=b,e.lanes=a,e;case S:return ju(t,l,a,n);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case m:case g:i=10;break e;case h:i=9;break e;case y:i=11;break e;case k:i=14;break e;case w:i=16,r=null;break e}i=29,t=Error(o(130,null===e?"null":typeof e,"")),r=null}return(n=Ru(i,t,n,l)).elementType=e,n.type=r,n.lanes=a,n}function Uu(e,n,t,r){return(e=Ru(7,e,r,n)).lanes=t,e}function ju(e,n,t,r){(e=Ru(22,e,r,n)).elementType=S,e.lanes=t;var l={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=l._current;if(null===e)throw Error(o(456));if(!(2&l._pendingVisibility)){var n=zr(e,2);null!==n&&(l._pendingVisibility|=2,Ls(n,0,2))}},attach:function(){var e=l._current;if(null===e)throw Error(o(456));if(2&l._pendingVisibility){var n=zr(e,2);null!==n&&(l._pendingVisibility&=-3,Ls(n,0,2))}}};return e.stateNode=l,e}function Hu(e,n,t){return(e=Ru(6,e,null,n)).lanes=t,e}function Vu(e,n,t){return(n=Ru(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function $u(e){e.flags|=4}function Qu(e,n){if("stylesheet"!==n.type||4&n.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Nf(n)){if(null!==(n=Pl.current)&&((4194176&rs)===rs?null!==zl:(62914560&rs)!==rs&&!(536870912&rs)||n!==zl))throw dl=ul,il;e.flags|=8192}}function Wu(e,n){null!==n&&(e.flags|=4),16384&e.flags&&(n=22!==e.tag?Ne():536870912,e.lanes|=n,hs|=n)}function qu(e,n){if(!Xr)switch(e.tailMode){case"hidden":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case"collapsed":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yu(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=31457280&l.subtreeFlags,r|=31457280&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function Ku(e,n,t){var r=n.pendingProps;switch(qr(n),n.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Yu(n),null;case 3:return t=n.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),n.memoizedState.cache!==r&&(n.flags|=2048),bi(Bl),ee(),t.pendingContext&&(t.context=t.pendingContext,t.pendingContext=null),null!==e&&null!==e.child||(rl(n)?$u(n):null===e||e.memoizedState.isDehydrated&&!(256&n.flags)||(n.flags|=1024,null!==Gr&&(Os(Gr),Gr=null))),Yu(n),null;case 26:return t=n.memoizedState,null===e?($u(n),null!==t?(Yu(n),Qu(n,t)):(Yu(n),n.flags&=-16777217)):t?t!==e.memoizedState?($u(n),Yu(n),Qu(n,t)):(Yu(n),n.flags&=-16777217):(e.memoizedProps!==r&&$u(n),Yu(n),n.flags&=-16777217),null;case 27:te(n),t=G.current;var l=n.type;if(null!==e&&null!=n.stateNode)e.memoizedProps!==r&&$u(n);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Yu(n),null}e=K.current,rl(n)?nl(n):(e=cf(l,r,t),n.stateNode=e,$u(n))}return Yu(n),null;case 5:if(te(n),t=n.type,null!==e&&null!=n.stateNode)e.memoizedProps!==r&&$u(n);else{if(!r){if(null===n.stateNode)throw Error(o(166));return Yu(n),null}if(e=K.current,rl(n))nl(n);else{switch(l=Kc(G.current),e){case 1:e=l.createElementNS("http://www.w3.org/2000/svg",t);break;case 2:e=l.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;default:switch(t){case"svg":e=l.createElementNS("http://www.w3.org/2000/svg",t);break;case"math":e=l.createElementNS("http://www.w3.org/1998/Math/MathML",t);break;case"script":(e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?l.createElement("select",{is:r.is}):l.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?l.createElement(t,{is:r.is}):l.createElement(t)}}e[Me]=n,e[Be]=r;e:for(l=n.child;null!==l;){if(5===l.tag||6===l.tag)e.appendChild(l.stateNode);else if(4!==l.tag&&27!==l.tag&&null!==l.child){l.child.return=l,l=l.child;continue}if(l===n)break e;for(;null===l.sibling;){if(null===l.return||l.return===n)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}n.stateNode=e;e:switch(Wc(e,t,r),t){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&$u(n)}}return Yu(n),n.flags&=-16777217,null;case 6:if(e&&null!=n.stateNode)e.memoizedProps!==r&&$u(n);else{if("string"!=typeof r&&null===n.stateNode)throw Error(o(166));if(e=G.current,rl(n)){if(e=n.stateNode,t=n.memoizedProps,r=null,null!==(l=Yr))switch(l.tag){case 27:case 5:r=l.memoizedProps}e[Me]=n,(e=!!(e.nodeValue===t||null!==r&&!0===r.suppressHydrationWarning||Hc(e.nodeValue,t)))||el(n)}else(e=Kc(e).createTextNode(r))[Me]=n,n.stateNode=e}return Yu(n),null;case 13:if(r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(l=rl(n),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(o(318));if(!(l=null!==(l=n.memoizedState)?l.dehydrated:null))throw Error(o(317));l[Me]=n}else ll(),!(128&n.flags)&&(n.memoizedState=null),n.flags|=4;Yu(n),l=!1}else null!==Gr&&(Os(Gr),Gr=null),l=!0;if(!l)return 256&n.flags?(Il(n),n):(Il(n),null)}if(Il(n),128&n.flags)return n.lanes=t,n;if(t=null!==r,e=null!==e&&null!==e.memoizedState,t){l=null,null!==(r=n.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(l=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==l&&(r.flags|=2048)}return t!==e&&t&&(n.child.flags|=8192),Wu(n,n.updateQueue),Yu(n),null;case 4:return ee(),null===e&&Lc(n.stateNode.containerInfo),Yu(n),null;case 10:return bi(n.type),Yu(n),null;case 19:if(q(Ol),null===(l=n.memoizedState))return Yu(n),null;if(r=!!(128&n.flags),null===(a=l.rendering))if(r)qu(l,!1);else{if(0!==cs||null!==e&&128&e.flags)for(e=n.child;null!==e;){if(null!==(a=Rl(e))){for(n.flags|=128,qu(l,!1),e=a.updateQueue,n.updateQueue=e,Wu(n,e),n.subtreeFlags=0,e=t,t=n.child;null!==t;)Mu(t,e),t=t.sibling;return Y(Ol,1&Ol.current|2),n.child}e=e.sibling}null!==l.tail&&ue()>ks&&(n.flags|=128,r=!0,qu(l,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=Rl(a))){if(n.flags|=128,r=!0,e=e.updateQueue,n.updateQueue=e,Wu(n,e),qu(l,!0),null===l.tail&&"hidden"===l.tailMode&&!a.alternate&&!Xr)return Yu(n),null}else 2*ue()-l.renderingStartTime>ks&&536870912!==t&&(n.flags|=128,r=!0,qu(l,!1),n.lanes=4194304);l.isBackwards?(a.sibling=n.child,n.child=a):(null!==(e=l.last)?e.sibling=a:n.child=a,l.last=a)}return null!==l.tail?(n=l.tail,l.rendering=n,l.tail=n.sibling,l.renderingStartTime=ue(),n.sibling=null,e=Ol.current,Y(Ol,r?1&e|2:1&e),n):(Yu(n),null);case 22:case 23:return Il(n),_l(),r=null!==n.memoizedState,null!==e?null!==e.memoizedState!==r&&(n.flags|=8192):r&&(n.flags|=8192),r?!!(536870912&t)&&!(128&n.flags)&&(Yu(n),6&n.subtreeFlags&&(n.flags|=8192)):Yu(n),null!==(t=n.updateQueue)&&Wu(n,t.retryQueue),t=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),r=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(r=n.memoizedState.cachePool.pool),r!==t&&(n.flags|=2048),null!==e&&q(Yl),null;case 24:return t=null,null!==e&&(t=e.memoizedState.cache),n.memoizedState.cache!==t&&(n.flags|=2048),bi(Bl),Yu(n),null;case 25:return null}throw Error(o(156,n.tag))}function Xu(e,n){switch(qr(n),n.tag){case 1:return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return bi(Bl),ee(),65536&(e=n.flags)&&!(128&e)?(n.flags=-65537&e|128,n):null;case 26:case 27:case 5:return te(n),null;case 13:if(Il(n),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(o(340));ll()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return q(Ol),null;case 4:return ee(),null;case 10:return bi(n.type),null;case 22:case 23:return Il(n),_l(),null!==e&&q(Yl),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 24:return bi(Bl),null;default:return null}}function Gu(e,n){switch(qr(n),n.tag){case 3:bi(Bl),ee();break;case 26:case 27:case 5:te(n);break;case 4:ee();break;case 13:Il(n);break;case 19:q(Ol);break;case 10:bi(n.type);break;case 22:case 23:Il(n),_l(),null!==e&&q(Yl);break;case 24:bi(Bl)}}var Ju={getCacheForType:function(e){var n=Ei(Bl),t=n.data.get(e);return void 0===t&&(t=e(),n.data.set(e,t)),t}},Zu="function"==typeof WeakMap?WeakMap:Map,es=0,ns=null,ts=null,rs=0,ls=0,as=null,os=!1,is=!1,us=!1,ss=0,cs=0,fs=0,ds=0,ps=0,ms=0,hs=0,gs=null,ys=null,vs=!1,bs=0,ks=1/0,ws=null,Ss=null,As=!1,Cs=null,Es=0,xs=0,_s=null,Ps=0,zs=null;function Ns(){return 2&es&&0!==rs?rs&-rs:null!==N.T?0!==$l?$l:wc():De()}function Ts(){0===ms&&(ms=536870912&rs&&!Xr?536870912:ze());var e=Pl.current;return null!==e&&(e.flags|=32),ms}function Ls(e,n,t){(e===ns&&2===ls||null!==e.cancelPendingCommit)&&(Us(e,0),Fs(e,rs,ms,!1)),Le(e,t),2&es&&e===ns||(e===ns&&(!(2&es)&&(ds|=t),4===cs&&Fs(e,rs,ms,!1)),hc(e))}function Is(e,n,t){if(6&es)throw Error(o(327));for(var r=!t&&!(60&n)&&!(n&e.expiredLanes)||_e(e,n),l=r?function(e,n){var t=es;es|=2;var r=Hs(),l=Vs();ns!==e||rs!==n?(ws=null,ks=ue()+500,Us(e,n)):is=_e(e,n);e:for(;;)try{if(0!==ls&&null!==ts){n=ts;var a=as;n:switch(ls){case 1:ls=0,as=null,Xs(e,n,a,1);break;case 2:if(sl(a)){ls=0,as=null,Ks(n);break}n=function(){2===ls&&ns===e&&(ls=7),hc(e)},a.then(n,n);break e;case 3:ls=7;break e;case 4:ls=5;break e;case 7:sl(a)?(ls=0,as=null,Ks(n)):(ls=0,as=null,Xs(e,n,a,7));break;case 5:var i=null;switch(ts.tag){case 26:i=ts.memoizedState;case 5:case 27:var u=ts;if(!i||Nf(i)){ls=0,as=null;var s=u.sibling;if(null!==s)ts=s;else{var c=u.return;null!==c?(ts=c,Gs(c)):ts=null}break n}}ls=0,as=null,Xs(e,n,a,5);break;case 6:ls=0,as=null,Xs(e,n,a,6);break;case 8:Bs(),cs=6;break e;default:throw Error(o(462))}}qs();break}catch(n){js(e,n)}return yi=gi=null,N.H=r,N.A=l,es=t,null!==ts?0:(ns=null,rs=0,xr(),cs)}(e,n):Qs(e,n,!0),a=r;;){if(0===l){is&&!r&&Fs(e,n,0,!1);break}if(6===l)Fs(e,n,0,!os);else{if(t=e.current.alternate,a&&!Ds(t)){l=Qs(e,n,!1),a=!1;continue}if(2===l){if(a=n,e.errorRecoveryDisabledLanes&a)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){n=i;e:{var u=e;l=gs;var s=u.current.memoizedState.isDehydrated;if(s&&(Us(u,i).flags|=256),2!==(i=Qs(u,i,!1))){if(us&&!s){u.errorRecoveryDisabledLanes|=a,ds|=a,l=4;break e}a=ys,ys=l,null!==a&&Os(a)}l=i}if(a=!1,2!==l)continue}}if(1===l){Us(e,0),Fs(e,n,0,!0);break}e:{switch(r=e,l){case 0:case 1:throw Error(o(345));case 4:if((4194176&n)===n){Fs(r,n,ms,!os);break e}break;case 2:ys=null;break;case 3:case 5:break;default:throw Error(o(329))}if(r.finishedWork=t,r.finishedLanes=n,(62914560&n)===n&&10<(a=bs+300-ue())){if(Fs(r,n,ms,!os),0!==xe(r,0))break e;r.timeoutHandle=ef(Rs.bind(null,r,t,ys,ws,vs,n,ms,ds,hs,os,2,-0,0),a)}else Rs(r,t,ys,ws,vs,n,ms,ds,hs,os,0,-0,0)}}break}hc(e)}function Os(e){null===ys?ys=e:ys.push.apply(ys,e)}function Rs(e,n,t,r,l,a,i,u,s,c,f,d,p){var m=n.subtreeFlags;if((8192&m||!(16785408&~m))&&(Tf={stylesheets:null,count:0,unsuspend:Lf},Pu(n),null!==(n=function(){if(null===Tf)throw Error(o(475));var e=Tf;return e.stylesheets&&0===e.count&&Rf(e,e.stylesheets),0<e.count?function(n){var t=setTimeout((function(){if(e.stylesheets&&Rf(e,e.stylesheets),e.unsuspend){var n=e.unsuspend;e.unsuspend=null,n()}}),6e4);return e.unsuspend=n,function(){e.unsuspend=null,clearTimeout(t)}}:null}())))return e.cancelPendingCommit=n(Zs.bind(null,e,t,r,l,i,u,s,1,d,p)),void Fs(e,a,i,!c);Zs(e,t,r,l,i,u,s)}function Ds(e){for(var n=e;;){var t=n.tag;if((0===t||11===t||15===t)&&16384&n.flags&&null!==(t=n.updateQueue)&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var l=t[r],a=l.getSnapshot;l=l.value;try{if(!Yt(a(),l))return!1}catch(e){return!1}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}function Fs(e,n,t,r){n&=~ps,n&=~ds,e.suspendedLanes|=n,e.pingedLanes&=~n,r&&(e.warmLanes|=n),r=e.expirationTimes;for(var l=n;0<l;){var a=31-ke(l),o=1<<a;r[a]=-1,l&=~o}0!==t&&Ie(e,t,n)}function Ms(){return!!(6&es)||(gc(0,!1),!1)}function Bs(){if(null!==ts){if(0===ls)var e=ts.return;else yi=gi=null,ya(e=ts),ml=null,hl=0,e=ts;for(;null!==e;)Gu(e.alternate,e),e=e.return;ts=null}}function Us(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;-1!==t&&(e.timeoutHandle=-1,nf(t)),null!==(t=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,t()),Bs(),ns=e,ts=t=Fu(e.current,null),rs=n,ls=0,as=null,os=!1,is=_e(e,n),us=!1,hs=ms=ps=ds=fs=cs=0,ys=gs=null,vs=!1,8&n&&(n|=32&n);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=n;0<r;){var l=31-ke(r),a=1<<l;n|=e[l],r&=~a}return ss=n,xr(),t}function js(e,n){Zl=null,N.H=Eo,n===ol?(n=pl(),ls=3):n===il?(n=pl(),ls=4):ls=n===Vo?8:null!==n&&"object"==typeof n&&"function"==typeof n.then?6:1,as=n,null===ts&&(cs=1,Mo(e,Or(n,e.current)))}function Hs(){var e=N.H;return N.H=Eo,null===e?Eo:e}function Vs(){var e=N.A;return N.A=Ju,e}function $s(){cs=4,os||(4194176&rs)!==rs&&null!==Pl.current||(is=!0),!(134217727&fs)&&!(134217727&ds)||null===ns||Fs(ns,rs,ms,!1)}function Qs(e,n,t){var r=es;es|=2;var l=Hs(),a=Vs();ns===e&&rs===n||(ws=null,Us(e,n)),n=!1;var o=cs;e:for(;;)try{if(0!==ls&&null!==ts){var i=ts,u=as;switch(ls){case 8:Bs(),o=6;break e;case 3:case 2:case 6:null===Pl.current&&(n=!0);var s=ls;if(ls=0,as=null,Xs(e,i,u,s),t&&is){o=0;break e}break;default:s=ls,ls=0,as=null,Xs(e,i,u,s)}}Ws(),o=cs;break}catch(n){js(e,n)}return n&&e.shellSuspendCounter++,yi=gi=null,es=r,N.H=l,N.A=a,null===ts&&(ns=null,rs=0,xr()),o}function Ws(){for(;null!==ts;)Ys(ts)}function qs(){for(;null!==ts&&!oe();)Ys(ts)}function Ys(e){var n=mi(e.alternate,e,ss);e.memoizedProps=e.pendingProps,null===n?Gs(e):ts=n}function Ks(e){var n=e,t=n.alternate;switch(n.tag){case 15:case 0:n=Zo(t,n,n.pendingProps,n.type,void 0,rs);break;case 11:n=Zo(t,n,n.pendingProps,n.type.render,n.ref,rs);break;case 5:ya(n);default:Gu(t,n),n=mi(t,n=ts=Mu(n,ss),ss)}e.memoizedProps=e.pendingProps,null===n?Gs(e):ts=n}function Xs(e,n,t,r){yi=gi=null,ya(n),ml=null,hl=0;var l=n.return;try{if(function(e,n,t,r,l){if(t.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(n=t.alternate)&&Si(n,t,l,!0),null!==(t=Pl.current)){switch(t.tag){case 13:return null===zl?$s():null===t.alternate&&0===cs&&(cs=3),t.flags&=-257,t.flags|=65536,t.lanes=l,r===ul?t.flags|=16384:(null===(n=t.updateQueue)?t.updateQueue=new Set([r]):n.add(r),lc(e,r,l)),!1;case 22:return t.flags|=65536,r===ul?t.flags|=16384:(null===(n=t.updateQueue)?(n={transitions:null,markerInstances:null,retryQueue:new Set([r])},t.updateQueue=n):null===(t=n.retryQueue)?n.retryQueue=new Set([r]):t.add(r),lc(e,r,l)),!1}throw Error(o(435,t.tag))}return lc(e,r,l),$s(),!1}if(Xr)return null!==(n=Pl.current)?(!(65536&n.flags)&&(n.flags|=256),n.flags|=65536,n.lanes=l,r!==Zr&&al(Or(e=Error(o(422),{cause:r}),t))):(r!==Zr&&al(Or(n=Error(o(423),{cause:r}),t)),(e=e.current.alternate).flags|=65536,l&=-l,e.lanes|=l,r=Or(r,t),Oi(e,l=Uo(e.stateNode,r,l)),4!==cs&&(cs=2)),!1;var a=Error(o(520),{cause:r});if(a=Or(a,t),null===gs?gs=[a]:gs.push(a),4!==cs&&(cs=2),null===n)return!0;r=Or(r,t),t=n;do{switch(t.tag){case 3:return t.flags|=65536,e=l&-l,t.lanes|=e,Oi(t,e=Uo(t.stateNode,r,e)),!1;case 1:if(n=t.type,a=t.stateNode,!(128&t.flags||"function"!=typeof n.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Ss&&Ss.has(a))))return t.flags|=65536,l&=-l,t.lanes|=l,Ho(l=jo(l),e,t,r),Oi(t,l),!1}t=t.return}while(null!==t);return!1}(e,l,n,t,rs))return cs=1,Mo(e,Or(t,e.current)),void(ts=null)}catch(n){if(null!==l)throw ts=l,n;return cs=1,Mo(e,Or(t,e.current)),void(ts=null)}32768&n.flags?(Xr||1===r?e=!0:is||536870912&rs?e=!1:(os=e=!0,(2===r||3===r||6===r)&&null!==(r=Pl.current)&&13===r.tag&&(r.flags|=16384)),Js(n,e)):Gs(n)}function Gs(e){var n=e;do{if(32768&n.flags)return void Js(n,os);e=n.return;var t=Ku(n.alternate,n,ss);if(null!==t)return void(ts=t);if(null!==(n=n.sibling))return void(ts=n);ts=n=e}while(null!==n);0===cs&&(cs=5)}function Js(e,n){do{var t=Xu(e.alternate,e);if(null!==t)return t.flags&=32767,void(ts=t);if(null!==(t=e.return)&&(t.flags|=32768,t.subtreeFlags=0,t.deletions=null),!n&&null!==(e=e.sibling))return void(ts=e);ts=e=t}while(null!==e);cs=6,ts=null}function Zs(e,n,t,r,l,a,i,u,s,c){var f=N.T,d=H.p;try{H.p=2,N.T=null,function(e,n,t,r,l,a,i,u){do{nc()}while(null!==Cs);if(6&es)throw Error(o(327));var s=e.finishedWork;if(r=e.finishedLanes,null===s)return null;if(e.finishedWork=null,e.finishedLanes=0,s===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=s.lanes|s.childLanes;if(function(e,n,t,r,l,a){var o=e.pendingLanes;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=t,e.entangledLanes&=t,e.errorRecoveryDisabledLanes&=t,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(t=o&~t;0<t;){var c=31-ke(t),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-536870913)}t&=~f}0!==r&&Ie(e,r,0),0!==a&&0===l&&0!==e.tag&&(e.suspendedLanes|=a&~(o&~n))}(e,r,c|=Er,a,i,u),e===ns&&(ts=ns=null,rs=0),!(10256&s.subtreeFlags)&&!(10256&s.flags)||As||(As=!0,xs=c,_s=t,le(de,(function(){return nc(),null}))),t=!!(15990&s.flags),15990&s.subtreeFlags||t?(t=N.T,N.T=null,a=H.p,H.p=2,i=es,es|=4,function(e,n){if(e=e.containerInfo,qc=Qf,er(e=Zt(e))){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var l=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{t.nodeType,a.nodeType}catch(e){t=null;break e}var i=0,u=-1,s=-1,c=0,f=0,d=e,p=null;n:for(;;){for(var m;d!==t||0!==l&&3!==d.nodeType||(u=i+l),d!==a||0!==r&&3!==d.nodeType||(s=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(m=d.firstChild);)p=d,d=m;for(;;){if(d===e)break n;if(p===t&&++c===l&&(u=i),p===a&&++f===r&&(s=i),null!==(m=d.nextSibling))break;p=(d=p).parentNode}d=m}t=-1===u||-1===s?null:{start:u,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;for(Yc={focusedElem:e,selectionRange:t},Qf=!1,tu=n;null!==tu;)if(e=(n=tu).child,1028&n.subtreeFlags&&null!==e)e.return=n,tu=e;else for(;null!==tu;){switch(a=(n=tu).alternate,e=n.flags,n.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,t=n,l=a.memoizedProps,a=a.memoizedState,r=t.stateNode;try{var h=Io(t.type,l,(t.elementType,t.type));e=r.getSnapshotBeforeUpdate(h,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){rc(t,t.return,e)}}break;case 3:if(1024&e)if(9===(t=(e=n.stateNode.containerInfo).nodeType))of(e);else if(1===t)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":of(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=n.sibling)){e.return=n.return,tu=e;break}tu=n.return}h=ru,ru=!1}(e,s),mu(s,e),nr(Yc,e.containerInfo),Qf=!!qc,Yc=qc=null,e.current=s,lu(e,s.alternate,s),ie(),es=i,H.p=a,N.T=t):e.current=s,As?(As=!1,Cs=e,Es=r):ec(e,c),0===(c=e.pendingLanes)&&(Ss=null),function(e){if(ve&&"function"==typeof ve.onCommitFiberRoot)try{ve.onCommitFiberRoot(ye,e,void 0,!(128&~e.current.flags))}catch(e){}}(s.stateNode),hc(e),null!==n)for(l=e.onRecoverableError,s=0;s<n.length;s++)l((c=n[s]).value,{componentStack:c.stack});!!(3&Es)&&nc(),c=e.pendingLanes,4194218&r&&42&c?e===zs?Ps++:(Ps=0,zs=e):Ps=0,gc(0,!1)}(e,n,t,r,d,l,a,i)}finally{N.T=f,H.p=d}}function ec(e,n){0==(e.pooledCacheLanes&=n)&&null!=(n=e.pooledCache)&&(e.pooledCache=null,jl(n))}function nc(){if(null!==Cs){var e=Cs,n=xs;xs=0;var t=Re(Es),r=N.T,l=H.p;try{if(H.p=32>t?32:t,N.T=null,null===Cs)var a=!1;else{t=_s,_s=null;var i=Cs,u=Es;if(Cs=null,Es=0,6&es)throw Error(o(331));var s=es;if(es|=4,Tu(i.current),Au(i,i.current,u,t),es=s,gc(0,!1),ve&&"function"==typeof ve.onPostCommitFiberRoot)try{ve.onPostCommitFiberRoot(ye,i)}catch(e){}a=!0}return a}finally{H.p=l,N.T=r,ec(e,n)}}return!1}function tc(e,n,t){n=Or(t,n),null!==(e=Li(e,n=Uo(e.stateNode,n,2),2))&&(Le(e,2),hc(e))}function rc(e,n,t){if(3===e.tag)tc(e,e,t);else for(;null!==n;){if(3===n.tag){tc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ss||!Ss.has(r))){e=Or(t,e),null!==(r=Li(n,t=jo(2),2))&&(Ho(t,r,n,e),Le(r,2),hc(r));break}}n=n.return}}function lc(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new Zu;var l=new Set;r.set(n,l)}else void 0===(l=r.get(n))&&(l=new Set,r.set(n,l));l.has(t)||(us=!0,l.add(t),e=ac.bind(null,e,n,t),n.then(e,e))}function ac(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),e.pingedLanes|=e.suspendedLanes&t,e.warmLanes&=~t,ns===e&&(rs&t)===t&&(4===cs||3===cs&&(62914560&rs)===rs&&300>ue()-bs?!(2&es)&&Us(e,0):ps|=t,hs===rs&&(hs=0)),hc(e)}function oc(e,n){0===n&&(n=Ne()),null!==(e=zr(e,n))&&(Le(e,n),hc(e))}function ic(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),oc(e,t)}function uc(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(t=l.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(n),oc(e,t)}var sc=null,cc=null,fc=!1,dc=!1,pc=!1,mc=0;function hc(e){var n;e!==cc&&null===e.next&&(null===cc?sc=cc=e:cc=cc.next=e),dc=!0,fc||(fc=!0,n=yc,rf((function(){6&es?le(ce,n):n()})))}function gc(e,n){if(!pc&&dc){pc=!0;do{for(var t=!1,r=sc;null!==r;){if(!n)if(0!==e){var l=r.pendingLanes;if(0===l)var a=0;else{var o=r.suspendedLanes,i=r.pingedLanes;a=(1<<31-ke(42|e)+1)-1,a=201326677&(a&=l&~(o&~i))?201326677&a|1:a?2|a:0}0!==a&&(t=!0,kc(r,a))}else a=rs,!(3&(a=xe(r,r===ns?a:0)))||_e(r,a)||(t=!0,kc(r,a));r=r.next}}while(t);pc=!1}}function yc(){dc=fc=!1;var e,n=0;0!==mc&&(((e=window.event)&&"popstate"===e.type?e!==Zc&&(Zc=e,!0):(Zc=null,!1))&&(n=mc),mc=0);for(var t=ue(),r=null,l=sc;null!==l;){var a=l.next,o=vc(l,t);0===o?(l.next=null,null===r?sc=a:r.next=a,null===a&&(cc=r)):(r=l,(0!==n||3&o)&&(dc=!0)),l=a}gc(n,!1)}function vc(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var o=31-ke(a),i=1<<o,u=l[o];-1===u?i&t&&!(i&r)||(l[o]=Pe(i,n)):u<=n&&(e.expiredLanes|=i),a&=~i}if(t=rs,t=xe(e,e===(n=ns)?t:0),r=e.callbackNode,0===t||e===n&&2===ls||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&t)||_e(e,t)){if((n=t&-t)===e.callbackPriority)return n;switch(null!==r&&ae(r),Re(t)){case 2:case 8:t=fe;break;case 32:default:t=de;break;case 268435456:t=me}return r=bc.bind(null,e),t=le(t,r),e.callbackPriority=n,e.callbackNode=t,n}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function bc(e,n){var t=e.callbackNode;if(nc()&&e.callbackNode!==t)return null;var r=rs;return 0===(r=xe(e,e===ns?r:0))?null:(Is(e,r,n),vc(e,ue()),null!=e.callbackNode&&e.callbackNode===t?bc.bind(null,e):null)}function kc(e,n){if(nc())return null;Is(e,n,!0)}function wc(){return 0===mc&&(mc=ze()),mc}function Sc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Nn(""+e)}function Ac(e,n){var t=n.ownerDocument.createElement("input");return t.name=n.name,t.value=n.value,e.id&&t.setAttribute("form",e.id),n.parentNode.insertBefore(t,n),e=new FormData(e),t.parentNode.removeChild(t),e}for(var Cc=0;Cc<wr.length;Cc++){var Ec=wr[Cc];Sr(Ec.toLowerCase(),"on"+(Ec[0].toUpperCase()+Ec.slice(1)))}Sr(pr,"onAnimationEnd"),Sr(mr,"onAnimationIteration"),Sr(hr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(gr,"onTransitionRun"),Sr(yr,"onTransitionStart"),Sr(vr,"onTransitionCancel"),Sr(br,"onTransitionEnd"),nn("onMouseEnter",["mouseout","mouseover"]),nn("onMouseLeave",["mouseout","mouseover"]),nn("onPointerEnter",["pointerout","pointerover"]),nn("onPointerLeave",["pointerout","pointerover"]),en("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),en("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),en("onBeforeInput",["compositionend","keypress","textInput","paste"]),en("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),en("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),en("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_c=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(xc));function Pc(e,n){n=!!(4&n);for(var t=0;t<e.length;t++){var r=e[t],l=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){Oo(e)}l.currentTarget=null,a=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){Oo(e)}l.currentTarget=null,a=u}}}}function zc(e,n){var t=n[je];void 0===t&&(t=n[je]=new Set);var r=e+"__bubble";t.has(r)||(Ic(n,e,2,!1),t.add(r))}function Nc(e,n,t){var r=0;n&&(r|=4),Ic(t,e,r,n)}var Tc="_reactListening"+Math.random().toString(36).slice(2);function Lc(e){if(!e[Tc]){e[Tc]=!0,Je.forEach((function(n){"selectionchange"!==n&&(_c.has(n)||Nc(n,!1,e),Nc(n,!0,e))}));var n=9===e.nodeType?e:e.ownerDocument;null===n||n[Tc]||(n[Tc]=!0,Nc("selectionchange",!1,n))}}function Ic(e,n,t,r){switch(Jf(n)){case 2:var l=Wf;break;case 8:l=qf;break;default:l=Yf}t=l.bind(null,n,t,e),l=void 0,!Bn||"touchstart"!==n&&"touchmove"!==n&&"wheel"!==n||(l=!0),r?void 0!==l?e.addEventListener(n,t,{capture:!0,passive:l}):e.addEventListener(n,t,!0):void 0!==l?e.addEventListener(n,t,{passive:l}):e.addEventListener(n,t,!1)}function Oc(e,n,t,r,l){var a=r;if(!(1&n||2&n||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===l||8===i.nodeType&&i.parentNode===l)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===l||8===u.nodeType&&u.parentNode===l))return;o=o.return}for(;null!==i;){if(null===(o=qe(i)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=a=o;continue e}i=i.parentNode}}r=r.return}Fn((function(){var r=a,l=Ln(t),o=[];e:{var i=kr.get(e);if(void 0!==i){var u=Zn,s=e;switch(e){case"keypress":if(0===Qn(t))break e;case"keydown":case"keyup":u=mt;break;case"focusin":s="focus",u=at;break;case"focusout":s="blur",u=at;break;case"beforeblur":case"afterblur":u=at;break;case"click":if(2===t.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=rt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=lt;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=gt;break;case pr:case mr:case hr:u=ot;break;case br:u=yt;break;case"scroll":case"scrollend":u=nt;break;case"wheel":u=vt;break;case"copy":case"cut":case"paste":u=it;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=ht;break;case"toggle":case"beforetoggle":u=bt}var c=!!(4&n),f=!c&&("scroll"===e||"scrollend"===e),d=c?null!==i?i+"Capture":null:i;c=[];for(var p,m=r;null!==m;){var h=m;if(p=h.stateNode,5!==(h=h.tag)&&26!==h&&27!==h||null===p||null===d||null!=(h=Mn(m,d))&&c.push(Rc(m,h,p)),f)break;m=m.return}0<c.length&&(i=new u(i,s,null,t,l),o.push({event:i,listeners:c}))}}if(!(7&n)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||t===Tn||!(s=t.relatedTarget||t.fromElement)||!qe(s)&&!s[Ue])&&(u||i)&&(i=l.window===l?l:(i=l.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(s=(s=t.relatedTarget||t.toElement)?qe(s):null)&&(f=F(s),c=s.tag,s!==f||5!==c&&27!==c&&6!==c)&&(s=null)):(u=null,s=r),u!==s)){if(c=rt,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=ht,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?i:Ke(u),p=null==s?i:Ke(s),(i=new c(h,m+"leave",u,t,l)).target=f,i.relatedTarget=p,h=null,qe(l)===r&&((c=new c(d,m+"enter",s,t,l)).target=p,c.relatedTarget=f,h=c),f=h,u&&s)e:{for(d=s,m=0,p=c=u;p;p=Fc(p))m++;for(p=0,h=d;h;h=Fc(h))p++;for(;0<m-p;)c=Fc(c),m--;for(;0<p-m;)d=Fc(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break e;c=Fc(c),d=Fc(d)}c=null}else c=null;null!==u&&Mc(o,i,u,c,!1),null!==s&&null!==f&&Mc(o,f,s,c,!0)}if("select"===(u=(i=r?Ke(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var g=Ft;else if(Tt(i))if(Mt)g=qt;else{g=Qt;var y=$t}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&_n(r.elementType)&&(g=Ft):g=Wt;switch(g&&(g=g(e,r))?Lt(o,g,t,l):(y&&y(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&bn(i,"number",i.value)),y=r?Ke(r):window,e){case"focusin":(Tt(y)||"true"===y.contentEditable)&&(rr=y,lr=r,ar=null);break;case"focusout":ar=lr=rr=null;break;case"mousedown":or=!0;break;case"contextmenu":case"mouseup":case"dragend":or=!1,ir(o,t,l);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":ir(o,t,l)}var v;if(wt)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zt?_t(e,t)&&(b="onCompositionEnd"):"keydown"===e&&229===t.keyCode&&(b="onCompositionStart");b&&(Ct&&"ko"!==t.locale&&(zt||"onCompositionStart"!==b?"onCompositionEnd"===b&&zt&&(v=$n()):(Hn="value"in(jn=l)?jn.value:jn.textContent,zt=!0)),0<(y=Dc(r,b)).length&&(b=new ut(b,e,null,t,l),o.push({event:b,listeners:y}),(v||null!==(v=Pt(t)))&&(b.data=v))),(v=At?function(e,n){switch(e){case"compositionend":return Pt(n);case"keypress":return 32!==n.which?null:(xt=!0,Et);case"textInput":return(e=n.data)===Et&&xt?null:e;default:return null}}(e,t):function(e,n){if(zt)return"compositionend"===e||!wt&&_t(e,n)?(e=$n(),Vn=Hn=jn=null,zt=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case"compositionend":return Ct&&"ko"!==n.locale?null:n.data}}(e,t))&&0<(b=Dc(r,"onBeforeInput")).length&&(y=new ut("onBeforeInput","beforeinput",null,t,l),o.push({event:y,listeners:b}),y.data=v),function(e,n,t,r,l){if("submit"===n&&t&&t.stateNode===l){var a=Sc((l[Be]||null).action),o=r.submitter;o&&null!==(n=(n=o[Be]||null)?Sc(n.formAction):o.getAttribute("formAction"))&&(a=n,o=null);var i=new Zn("action","action",null,r,l);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==mc){var e=o?Ac(l,o):new FormData(l);co(t,{pending:!0,data:e,method:l.method,action:a},null,e)}}else"function"==typeof a&&(i.preventDefault(),e=o?Ac(l,o):new FormData(l),co(t,{pending:!0,data:e,method:l.method,action:a},a,e))},currentTarget:l}]})}}(o,e,r,t,l)}Pc(o,n)}))}function Rc(e,n,t){return{instance:e,listener:n,currentTarget:t}}function Dc(e,n){for(var t=n+"Capture",r=[];null!==e;){var l=e,a=l.stateNode;5!==(l=l.tag)&&26!==l&&27!==l||null===a||(null!=(l=Mn(e,t))&&r.unshift(Rc(e,l,a)),null!=(l=Mn(e,n))&&r.push(Rc(e,l,a))),e=e.return}return r}function Fc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Mc(e,n,t,r,l){for(var a=n._reactName,o=[];null!==t&&t!==r;){var i=t,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,l?null!=(s=Mn(t,a))&&o.unshift(Rc(t,s,u)):l||null!=(s=Mn(t,a))&&o.push(Rc(t,s,u))),t=t.return}0!==o.length&&e.push({event:n,listeners:o})}var Bc=/\r\n?/g,Uc=/\u0000|\uFFFD/g;function jc(e){return("string"==typeof e?e:""+e).replace(Bc,"\n").replace(Uc,"")}function Hc(e,n){return n=jc(n),jc(e)===n}function Vc(){}function $c(e,n,t,r,l,a){switch(t){case"children":"string"==typeof r?"body"===n||"textarea"===n&&""===r||An(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==n&&An(e,""+r);break;case"className":un(e,"class",r);break;case"tabIndex":un(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":un(e,t,r);break;case"style":xn(e,r,a);break;case"data":if("object"!==n){un(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==n||"href"!==t)){e.removeAttribute(t);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=Nn(""+r),e.setAttribute(t,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(t,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===t?("input"!==n&&$c(e,n,"name",l.name,l,null),$c(e,n,"formEncType",l.formEncType,l,null),$c(e,n,"formMethod",l.formMethod,l,null),$c(e,n,"formTarget",l.formTarget,l,null)):($c(e,n,"encType",l.encType,l,null),$c(e,n,"method",l.method,l,null),$c(e,n,"target",l.target,l,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(t);break}r=Nn(""+r),e.setAttribute(t,r);break;case"onClick":null!=r&&(e.onclick=Vc);break;case"onScroll":null!=r&&zc("scroll",e);break;case"onScrollEnd":null!=r&&zc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(t=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=t}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}t=Nn(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",t);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""+r):e.removeAttribute(t);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,""):e.removeAttribute(t);break;case"capture":case"download":!0===r?e.setAttribute(t,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(t,r):e.removeAttribute(t);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(t,r):e.removeAttribute(t);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(t):e.setAttribute(t,r);break;case"popover":zc("beforetoggle",e),zc("toggle",e),on(e,"popover",r);break;case"xlinkActuate":sn(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":sn(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":sn(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":sn(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":sn(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":sn(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":sn(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":sn(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":sn(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":on(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&on(e,t=Pn.get(t)||t,r)}}function Qc(e,n,t,r,l,a){switch(t){case"style":xn(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(t=r.__html)){if(null!=l.children)throw Error(o(60));e.innerHTML=t}}break;case"children":"string"==typeof r?An(e,r):("number"==typeof r||"bigint"==typeof r)&&An(e,""+r);break;case"onScroll":null!=r&&zc("scroll",e);break;case"onScrollEnd":null!=r&&zc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Vc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Ze.hasOwnProperty(t)||("o"!==t[0]||"n"!==t[1]||(l=t.endsWith("Capture"),n=t.slice(2,l?t.length-7:void 0),"function"==typeof(a=null!=(a=e[Be]||null)?a[t]:null)&&e.removeEventListener(n,a,l),"function"!=typeof r)?t in e?e[t]=r:!0===r?e.setAttribute(t,""):on(e,t,r):("function"!=typeof a&&null!==a&&(t in e?e[t]=null:e.hasAttribute(t)&&e.removeAttribute(t)),e.addEventListener(n,r,l)))}}function Wc(e,n,t){switch(n){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":zc("error",e),zc("load",e);var r,l=!1,a=!1;for(r in t)if(t.hasOwnProperty(r)){var i=t[r];if(null!=i)switch(r){case"src":l=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,n));default:$c(e,n,r,i,t,null)}}return a&&$c(e,n,"srcSet",t.srcSet,t,null),void(l&&$c(e,n,"src",t.src,t,null));case"input":zc("invalid",e);var u=r=i=a=null,s=null,c=null;for(l in t)if(t.hasOwnProperty(l)){var f=t[l];if(null!=f)switch(l){case"name":a=f;break;case"type":i=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,n));break;default:$c(e,n,l,f,t,null)}}return vn(e,r,u,s,c,i,a,!1),void dn(e);case"select":for(a in zc("invalid",e),l=i=r=null,t)if(t.hasOwnProperty(a)&&null!=(u=t[a]))switch(a){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":l=u;default:$c(e,n,a,u,t,null)}return n=r,t=i,e.multiple=!!l,void(null!=n?kn(e,!!l,n,!1):null!=t&&kn(e,!!l,t,!0));case"textarea":for(i in zc("invalid",e),r=a=l=null,t)if(t.hasOwnProperty(i)&&null!=(u=t[i]))switch(i){case"value":l=u;break;case"defaultValue":a=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:$c(e,n,i,u,t,null)}return Sn(e,l,a,r),void dn(e);case"option":for(s in t)t.hasOwnProperty(s)&&null!=(l=t[s])&&("selected"===s?e.selected=l&&"function"!=typeof l&&"symbol"!=typeof l:$c(e,n,s,l,t,null));return;case"dialog":zc("cancel",e),zc("close",e);break;case"iframe":case"object":zc("load",e);break;case"video":case"audio":for(l=0;l<xc.length;l++)zc(xc[l],e);break;case"image":zc("error",e),zc("load",e);break;case"details":zc("toggle",e);break;case"embed":case"source":case"link":zc("error",e),zc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in t)if(t.hasOwnProperty(c)&&null!=(l=t[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,n));default:$c(e,n,c,l,t,null)}return;default:if(_n(n)){for(f in t)t.hasOwnProperty(f)&&void 0!==(l=t[f])&&Qc(e,n,f,l,t,void 0);return}}for(u in t)t.hasOwnProperty(u)&&null!=(l=t[u])&&$c(e,n,u,l,t,null)}var qc=null,Yc=null;function Kc(e){return 9===e.nodeType?e:e.ownerDocument}function Xc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Gc(e,n){if(0===e)switch(n){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===n?0:e}function Jc(e,n){return"textarea"===e||"noscript"===e||"string"==typeof n.children||"number"==typeof n.children||"bigint"==typeof n.children||"object"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var Zc=null,ef="function"==typeof setTimeout?setTimeout:void 0,nf="function"==typeof clearTimeout?clearTimeout:void 0,tf="function"==typeof Promise?Promise:void 0,rf="function"==typeof queueMicrotask?queueMicrotask:void 0!==tf?function(e){return tf.resolve(null).then(e).catch(lf)}:ef;function lf(e){setTimeout((function(){throw e}))}function af(e,n){var t=n,r=0;do{var l=t.nextSibling;if(e.removeChild(t),l&&8===l.nodeType)if("/$"===(t=l.data)){if(0===r)return e.removeChild(l),void gd(n);r--}else"$"!==t&&"$?"!==t&&"$!"!==t||r++;t=l}while(t);gd(n)}function of(e){var n=e.firstChild;for(n&&10===n.nodeType&&(n=n.nextSibling);n;){var t=n;switch(n=n.nextSibling,t.nodeName){case"HTML":case"HEAD":case"BODY":of(t),We(t);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===t.rel.toLowerCase())continue}e.removeChild(t)}}function uf(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if("$"===(n=e.data)||"$!"===n||"$?"===n||"F!"===n||"F"===n)break;if("/$"===n)return null}}return e}function sf(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if("$"===t||"$!"===t||"$?"===t){if(0===n)return e;n--}else"/$"===t&&n++}e=e.previousSibling}return null}function cf(e,n,t){switch(n=Kc(t),e){case"html":if(!(e=n.documentElement))throw Error(o(452));return e;case"head":if(!(e=n.head))throw Error(o(453));return e;case"body":if(!(e=n.body))throw Error(o(454));return e;default:throw Error(o(451))}}var ff=new Map,df=new Set;function pf(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var mf=H.d;H.d={f:function(){var e=mf.f(),n=Ms();return e||n},r:function(e){var n=Ye(e);null!==n&&5===n.tag&&"form"===n.type?po(n):mf.r(e)},D:function(e){mf.D(e),gf("dns-prefetch",e,null)},C:function(e,n){mf.C(e,n),gf("preconnect",e,n)},L:function(e,n,t){mf.L(e,n,t);var r=hf;if(r&&e&&n){var l='link[rel="preload"][as="'+gn(n)+'"]';"image"===n&&t&&t.imageSrcSet?(l+='[imagesrcset="'+gn(t.imageSrcSet)+'"]',"string"==typeof t.imageSizes&&(l+='[imagesizes="'+gn(t.imageSizes)+'"]')):l+='[href="'+gn(e)+'"]';var a=l;switch(n){case"style":a=vf(e);break;case"script":a=wf(e)}ff.has(a)||(e=T({rel:"preload",href:"image"===n&&t&&t.imageSrcSet?void 0:e,as:n},t),ff.set(a,e),null!==r.querySelector(l)||"style"===n&&r.querySelector(bf(a))||"script"===n&&r.querySelector(Sf(a))||(Wc(n=r.createElement("link"),"link",e),Ge(n),r.head.appendChild(n)))}},m:function(e,n){mf.m(e,n);var t=hf;if(t&&e){var r=n&&"string"==typeof n.as?n.as:"script",l='link[rel="modulepreload"][as="'+gn(r)+'"][href="'+gn(e)+'"]',a=l;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=wf(e)}if(!ff.has(a)&&(e=T({rel:"modulepreload",href:e},n),ff.set(a,e),null===t.querySelector(l))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(t.querySelector(Sf(a)))return}Wc(r=t.createElement("link"),"link",e),Ge(r),t.head.appendChild(r)}}},X:function(e,n){mf.X(e,n);var t=hf;if(t&&e){var r=Xe(t).hoistableScripts,l=wf(e),a=r.get(l);a||((a=t.querySelector(Sf(l)))||(e=T({src:e,async:!0},n),(n=ff.get(l))&&xf(e,n),Ge(a=t.createElement("script")),Wc(a,"link",e),t.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}},S:function(e,n,t){mf.S(e,n,t);var r=hf;if(r&&e){var l=Xe(r).hoistableStyles,a=vf(e);n=n||"default";var o=l.get(a);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(bf(a)))i.loading=5;else{e=T({rel:"stylesheet",href:e,"data-precedence":n},t),(t=ff.get(a))&&Ef(e,t);var u=o=r.createElement("link");Ge(u),Wc(u,"link",e),u._p=new Promise((function(e,n){u.onload=e,u.onerror=n})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Cf(o,n,r)}o={type:"stylesheet",instance:o,count:1,state:i},l.set(a,o)}}},M:function(e,n){mf.M(e,n);var t=hf;if(t&&e){var r=Xe(t).hoistableScripts,l=wf(e),a=r.get(l);a||((a=t.querySelector(Sf(l)))||(e=T({src:e,async:!0,type:"module"},n),(n=ff.get(l))&&xf(e,n),Ge(a=t.createElement("script")),Wc(a,"link",e),t.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(l,a))}}};var hf="undefined"==typeof document?null:document;function gf(e,n,t){var r=hf;if(r&&"string"==typeof n&&n){var l=gn(n);l='link[rel="'+e+'"][href="'+l+'"]',"string"==typeof t&&(l+='[crossorigin="'+t+'"]'),df.has(l)||(df.add(l),e={rel:e,crossOrigin:t,href:n},null===r.querySelector(l)&&(Wc(n=r.createElement("link"),"link",e),Ge(n),r.head.appendChild(n)))}}function yf(e,n,t,r){var l,a,i,u,s=(s=G.current)?pf(s):null;if(!s)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof t.precedence&&"string"==typeof t.href?(n=vf(t.href),(r=(t=Xe(s).hoistableStyles).get(n))||(r={type:"style",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===t.rel&&"string"==typeof t.href&&"string"==typeof t.precedence){e=vf(t.href);var c=Xe(s).hoistableStyles,f=c.get(e);if(f||(s=s.ownerDocument||s,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=s.querySelector(bf(e)))&&!c._p&&(f.instance=c,f.state.loading=5),ff.has(e)||(t={rel:"preload",as:"style",href:t.href,crossOrigin:t.crossOrigin,integrity:t.integrity,media:t.media,hrefLang:t.hrefLang,referrerPolicy:t.referrerPolicy},ff.set(e,t),c||(l=s,a=e,i=t,u=f.state,l.querySelector('link[rel="preload"][as="style"]['+a+"]")?u.loading=1:(a=l.createElement("link"),u.preload=a,a.addEventListener("load",(function(){return u.loading|=1})),a.addEventListener("error",(function(){return u.loading|=2})),Wc(a,"link",i),Ge(a),l.head.appendChild(a))))),n&&null===r)throw Error(o(528,""));return f}if(n&&null!==r)throw Error(o(529,""));return null;case"script":return n=t.async,"string"==typeof(t=t.src)&&n&&"function"!=typeof n&&"symbol"!=typeof n?(n=wf(t),(r=(t=Xe(s).hoistableScripts).get(n))||(r={type:"script",instance:null,count:0,state:null},t.set(n,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function vf(e){return'href="'+gn(e)+'"'}function bf(e){return'link[rel="stylesheet"]['+e+"]"}function kf(e){return T({},e,{"data-precedence":e.precedence,precedence:null})}function wf(e){return'[src="'+gn(e)+'"]'}function Sf(e){return"script[async]"+e}function Af(e,n,t){if(n.count++,null===n.instance)switch(n.type){case"style":var r=e.querySelector('style[data-href~="'+gn(t.href)+'"]');if(r)return n.instance=r,Ge(r),r;var l=T({},t,{"data-href":t.href,"data-precedence":t.precedence,href:null,precedence:null});return Ge(r=(e.ownerDocument||e).createElement("style")),Wc(r,"style",l),Cf(r,t.precedence,e),n.instance=r;case"stylesheet":l=vf(t.href);var a=e.querySelector(bf(l));if(a)return n.state.loading|=4,n.instance=a,Ge(a),a;r=kf(t),(l=ff.get(l))&&Ef(r,l),Ge(a=(e.ownerDocument||e).createElement("link"));var i=a;return i._p=new Promise((function(e,n){i.onload=e,i.onerror=n})),Wc(a,"link",r),n.state.loading|=4,Cf(a,t.precedence,e),n.instance=a;case"script":return a=wf(t.src),(l=e.querySelector(Sf(a)))?(n.instance=l,Ge(l),l):(r=t,(l=ff.get(a))&&xf(r=T({},t),l),Ge(l=(e=e.ownerDocument||e).createElement("script")),Wc(l,"link",r),e.head.appendChild(l),n.instance=l);case"void":return null;default:throw Error(o(443,n.type))}else"stylesheet"===n.type&&!(4&n.state.loading)&&(r=n.instance,n.state.loading|=4,Cf(r,t.precedence,e));return n.instance}function Cf(e,n,t){for(var r=t.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),l=r.length?r[r.length-1]:null,a=l,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===n)a=i;else if(a!==l)break}a?a.parentNode.insertBefore(e,a.nextSibling):(n=9===t.nodeType?t.head:t).insertBefore(e,n.firstChild)}function Ef(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.title&&(e.title=n.title)}function xf(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.integrity&&(e.integrity=n.integrity)}var _f=null;function Pf(e,n,t){if(null===_f){var r=new Map,l=_f=new Map;l.set(t,r)}else(r=(l=_f).get(t))||(r=new Map,l.set(t,r));if(r.has(e))return r;for(r.set(e,null),t=t.getElementsByTagName(e),l=0;l<t.length;l++){var a=t[l];if(!(a[Qe]||a[Me]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var o=a.getAttribute(n)||"";o=e+o;var i=r.get(o);i?i.push(a):r.set(o,[a])}}return r}function zf(e,n,t){(e=e.ownerDocument||e).head.insertBefore(t,"title"===n?e.querySelector("head > title"):null)}function Nf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Tf=null;function Lf(){}function If(){if(this.count--,0===this.count)if(this.stylesheets)Rf(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Of=null;function Rf(e,n){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Of=new Map,n.forEach(Df,e),Of=null,If.call(e))}function Df(e,n){if(!(4&n.state.loading)){var t=Of.get(e);if(t)var r=t.get(null);else{t=new Map,Of.set(e,t);for(var l=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<l.length;a++){var o=l[a];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(t.set(o.dataset.precedence,o),r=o)}r&&t.set(null,r)}o=(l=n.instance).getAttribute("data-precedence"),(a=t.get(o)||r)===r&&t.set(null,l),t.set(o,l),this.count++,r=If.bind(this),l.addEventListener("load",r),l.addEventListener("error",r),a?a.parentNode.insertBefore(l,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(l,e.firstChild),n.state.loading|=4}}var Ff={$$typeof:g,Provider:null,Consumer:null,_currentValue:V,_currentValue2:V,_threadCount:0};function Mf(e,n,t,r,l,a,o,i){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Te(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Te(0),this.hiddenUpdates=Te(null),this.identifierPrefix=r,this.onUncaughtError=l,this.onCaughtError=a,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Bf(e,n,t,r,l,a,o,i,u,s,c,f){return e=new Mf(e,n,t,o,i,u,s,f),n=1,!0===a&&(n|=24),a=Ru(3,null,null,n),e.current=a,a.stateNode=e,(n=Ul()).refCount++,e.pooledCache=n,n.refCount++,a.memoizedState={element:r,isDehydrated:t,cache:n},zi(a),e}function Uf(e){return e?e=Lr:Lr}function jf(e,n,t,r,l,a){l=Uf(l),null===r.context?r.context=l:r.pendingContext=l,(r=Ti(n)).payload={element:t},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(t=Li(e,r,n))&&(Ls(t,0,n),Ii(t,e,n))}function Hf(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function Vf(e,n){Hf(e,n),(e=e.alternate)&&Hf(e,n)}function $f(e){if(13===e.tag){var n=zr(e,67108864);null!==n&&Ls(n,0,67108864),Vf(e,67108864)}}var Qf=!0;function Wf(e,n,t,r){var l=N.T;N.T=null;var a=H.p;try{H.p=2,Yf(e,n,t,r)}finally{H.p=a,N.T=l}}function qf(e,n,t,r){var l=N.T;N.T=null;var a=H.p;try{H.p=8,Yf(e,n,t,r)}finally{H.p=a,N.T=l}}function Yf(e,n,t,r){if(Qf){var l=Kf(r);if(null===l)Oc(e,n,r,Xf,t),id(e,r);else if(function(e,n,t,r,l){switch(n){case"focusin":return ed=ud(ed,e,n,t,r,l),!0;case"dragenter":return nd=ud(nd,e,n,t,r,l),!0;case"mouseover":return td=ud(td,e,n,t,r,l),!0;case"pointerover":var a=l.pointerId;return rd.set(a,ud(rd.get(a)||null,e,n,t,r,l)),!0;case"gotpointercapture":return a=l.pointerId,ld.set(a,ud(ld.get(a)||null,e,n,t,r,l)),!0}return!1}(l,e,n,t,r))r.stopPropagation();else if(id(e,r),4&n&&-1<od.indexOf(e)){for(;null!==l;){var a=Ye(l);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var o=Ee(a.pendingLanes);if(0!==o){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-ke(o);i.entanglements[1]|=u,o&=~u}hc(a),!(6&es)&&(ks=ue()+500,gc(0,!1))}}break;case 13:null!==(i=zr(a,2))&&Ls(i,0,2),Ms(),Vf(a,2)}if(null===(a=Kf(r))&&Oc(e,n,r,Xf,t),a===l)break;l=a}null!==l&&r.stopPropagation()}else Oc(e,n,r,null,t)}}function Kf(e){return Gf(e=Ln(e))}var Xf=null;function Gf(e){if(Xf=null,null!==(e=qe(e))){var n=F(e);if(null===n)e=null;else{var t=n.tag;if(13===t){if(null!==(e=M(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null)}}return Xf=e,null}function Jf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(se()){case ce:return 2;case fe:return 8;case de:case pe:return 32;case me:return 268435456;default:return 32}default:return 32}}var Zf=!1,ed=null,nd=null,td=null,rd=new Map,ld=new Map,ad=[],od="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function id(e,n){switch(e){case"focusin":case"focusout":ed=null;break;case"dragenter":case"dragleave":nd=null;break;case"mouseover":case"mouseout":td=null;break;case"pointerover":case"pointerout":rd.delete(n.pointerId);break;case"gotpointercapture":case"lostpointercapture":ld.delete(n.pointerId)}}function ud(e,n,t,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==n&&null!==(n=Ye(n))&&$f(n),e):(e.eventSystemFlags|=r,n=e.targetContainers,null!==l&&-1===n.indexOf(l)&&n.push(l),e)}function sd(e){var n=qe(e.target);if(null!==n){var t=F(n);if(null!==t)if(13===(n=t.tag)){if(null!==(n=M(t)))return e.blockedOn=n,void function(e){var n=H.p;try{return H.p=e,function(){if(13===t.tag){var e=Ns(),n=zr(t,e);null!==n&&Ls(n,0,e),Vf(t,e)}}()}finally{H.p=n}}(e.priority)}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===t.tag?t.stateNode.containerInfo:null)}e.blockedOn=null}function cd(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=Kf(e.nativeEvent);if(null!==t)return null!==(n=Ye(t))&&$f(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);Tn=r,t.target.dispatchEvent(r),Tn=null,n.shift()}return!0}function fd(e,n,t){cd(e)&&t.delete(n)}function dd(){Zf=!1,null!==ed&&cd(ed)&&(ed=null),null!==nd&&cd(nd)&&(nd=null),null!==td&&cd(td)&&(td=null),rd.forEach(fd),ld.forEach(fd)}function pd(e,n){e.blockedOn===n&&(e.blockedOn=null,Zf||(Zf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,dd)))}var md=null;function hd(e){md!==e&&(md=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){md===e&&(md=null);for(var n=0;n<e.length;n+=3){var t=e[n],r=e[n+1],l=e[n+2];if("function"!=typeof r){if(null===Gf(r||t))continue;break}var a=Ye(t);null!==a&&(e.splice(n,3),n-=3,co(a,{pending:!0,data:l,method:t.method,action:r},r,l))}})))}function gd(e){function n(n){return pd(n,e)}null!==ed&&pd(ed,e),null!==nd&&pd(nd,e),null!==td&&pd(td,e),rd.forEach(n),ld.forEach(n);for(var t=0;t<ad.length;t++){var r=ad[t];r.blockedOn===e&&(r.blockedOn=null)}for(;0<ad.length&&null===(t=ad[0]).blockedOn;)sd(t),null===t.blockedOn&&ad.shift();if(null!=(t=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<t.length;r+=3){var l=t[r],a=t[r+1],o=l[Be]||null;if("function"==typeof a)o||hd(t);else if(o){var i=null;if(a&&a.hasAttribute("formAction")){if(l=a,o=a[Be]||null)i=o.formAction;else if(null!==Gf(l))continue}else i=o.action;"function"==typeof i?t[r+1]=i:(t.splice(r,3),r-=3),hd(t)}}}function yd(e){this._internalRoot=e}function vd(e){this._internalRoot=e}vd.prototype.render=yd.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(o(409));jf(n.current,Ns(),e,n,null,null)},vd.prototype.unmount=yd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;0===e.tag&&nc(),jf(e.current,2,null,e,null,null),Ms(),n[Ue]=null}},vd.prototype.unstable_scheduleHydration=function(e){if(e){var n=De();e={blockedOn:null,target:e,priority:n};for(var t=0;t<ad.length&&0!==n&&n<ad[t].priority;t++);ad.splice(t,0,e),0===t&&sd(e)}};var bd=l.version;if("19.0.0"!==bd)throw Error(o(527,bd,"19.0.0"));H.findDOMNode=function(e){var n=e._reactInternals;if(void 0===n){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var n=e.alternate;if(!n){if(null===(n=F(e)))throw Error(o(188));return n!==e?null:e}for(var t=e,r=n;;){var l=t.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){t=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===t)return B(l),e;if(a===r)return B(l),n;a=a.sibling}throw Error(o(188))}if(t.return!==r.return)t=l,r=a;else{for(var i=!1,u=l.child;u;){if(u===t){i=!0,t=l,r=a;break}if(u===r){i=!0,r=l,t=a;break}u=u.sibling}if(!i){for(u=a.child;u;){if(u===t){i=!0,t=a,r=l;break}if(u===r){i=!0,r=a,t=l;break}u=u.sibling}if(!i)throw Error(o(189))}}if(t.alternate!==r)throw Error(o(190))}if(3!==t.tag)throw Error(o(188));return t.stateNode.current===t?e:n}(n),null===(e=null!==e?U(e):null)?null:e.stateNode};var kd={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:N,findFiberByHostInstance:qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wd.isDisabled&&wd.supportsFiber)try{ye=wd.inject(kd),ve=wd}catch(e){}}n.createRoot=function(e,n){if(!i(e))throw Error(o(299));var t=!1,r="",l=Ro,a=Do,u=Fo;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onUncaughtError&&(l=n.onUncaughtError),void 0!==n.onCaughtError&&(a=n.onCaughtError),void 0!==n.onRecoverableError&&(u=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&n.unstable_transitionCallbacks),n=Bf(e,1,!1,null,0,t,r,l,a,u,0,null),e[Ue]=n.current,Lc(8===e.nodeType?e.parentNode:e),new yd(n)},n.hydrateRoot=function(e,n,t){if(!i(e))throw Error(o(299));var r=!1,l="",a=Ro,u=Do,s=Fo,c=null;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(l=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(u=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks,void 0!==t.formState&&(c=t.formState)),(n=Bf(e,1,!0,n,0,r,l,a,u,s,0,c)).context=Uf(null),t=n.current,(l=Ti(r=Ns())).callback=null,Li(t,l,r),n.current.lanes=r,Le(n,r),hc(n),e[Ue]=n.current,Lc(e),new vd(n)},n.version="19.0.0"},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,l,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),l&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=l):c[4]="".concat(l)),n.push(c))}},n}},338:(e,n,t)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(247)},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(l," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},477:(e,n)=>{function t(e,n){var t=e.length;e.push(n);e:for(;0<t;){var r=t-1>>>1,l=e[r];if(!(0<a(l,n)))break e;e[r]=n,e[t]=l,t=r}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;e:for(var r=0,l=e.length,o=l>>>1;r<o;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>a(u,t))s<l&&0>a(c,u)?(e[r]=c,e[s]=t,r=s):(e[r]=u,e[i]=t,r=i);else{if(!(s<l&&0>a(c,t)))break e;e[r]=c,e[s]=t,r=s}}}return n}function a(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if(n.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;n.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();n.unstable_now=function(){return i.now()-u}}var s=[],c=[],f=1,d=null,p=3,m=!1,h=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function k(e){for(var n=r(c);null!==n;){if(null===n.callback)l(c);else{if(!(n.startTime<=e))break;l(c),n.sortIndex=n.expirationTime,t(s,n)}n=r(c)}}function w(e){if(g=!1,k(e),!h)if(null!==r(s))h=!0,T();else{var n=r(c);null!==n&&L(w,n.startTime-e)}}var S,A=!1,C=-1,E=5,x=-1;function _(){return!(n.unstable_now()-x<E)}function P(){if(A){var e=n.unstable_now();x=e;var t=!0;try{e:{h=!1,g&&(g=!1,v(C),C=-1),m=!0;var a=p;try{n:{for(k(e),d=r(s);null!==d&&!(d.expirationTime>e&&_());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=n.unstable_now(),"function"==typeof i){d.callback=i,k(e),t=!0;break n}d===r(s)&&l(s),k(e)}else l(s);d=r(s)}if(null!==d)t=!0;else{var u=r(c);null!==u&&L(w,u.startTime-e),t=!1}}break e}finally{d=null,p=a,m=!1}t=void 0}}finally{t?S():A=!1}}}if("function"==typeof b)S=function(){b(P)};else if("undefined"!=typeof MessageChannel){var z=new MessageChannel,N=z.port2;z.port1.onmessage=P,S=function(){N.postMessage(null)}}else S=function(){y(P,0)};function T(){A||(A=!0,S())}function L(e,t){C=y((function(){e(n.unstable_now())}),t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){h||m||(h=!0,T())},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return p},n.unstable_getFirstCallbackNode=function(){return r(s)},n.unstable_next=function(e){switch(p){case 1:case 2:case 3:var n=3;break;default:n=p}var t=p;p=n;try{return e()}finally{p=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=p;p=e;try{return n()}finally{p=t}},n.unstable_scheduleCallback=function(e,l,a){var o=n.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:l,priorityLevel:e,startTime:a,expirationTime:i=a+i,sortIndex:-1},a>o?(e.sortIndex=a,t(c,e),null===r(s)&&e===r(c)&&(g?(v(C),C=-1):g=!0,L(w,a-o))):(e.sortIndex=i,t(s,e),h||m||(h=!0,T())),e},n.unstable_shouldYield=_,n.unstable_wrapCallback=function(e){var n=p;return function(){var t=p;p=n;try{return e.apply(this,arguments)}finally{p=t}}}},540:(e,n,t)=>{e.exports=t(869)},602:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),l=t.n(r),a=t(314),o=t.n(a)()(l());o.push([e.id,'.Notifications {\n    border: 0.1rem dotted rgb(244, 19, 124);\n    position: absolute;\n    top: 0.5rem;\n    right: 2rem;\n    color: black;\n    height: 8rem;\n    width: 40%;\n    padding: 0.1rem;\n}\n\n/* Screens up to 1020px */\n@media only screen and (max-width: 1024px) {\n    .Notifications {\n        height: 7rem;\n    }\n}\n\n/* Screens up to 800px */\n@media only screen and (max-width: 800px) {\n    .Notifications {\n        right: -0.1rem;\n        left: -0.1rem;\n        width: 100%;\n        height: 6.5rem;\n        top: 0;\n    }\n}\n\n\np {\n    font-weight: bold;\n}\n\nli[data-priority="default"] {\n    color: blue;\n}\n\nli[data-priority="urgent"], li {\n    color: red;\n}\n\n\n',"",{version:3,sources:["webpack://./src/Notifications/Notifications.css"],names:[],mappings:"AAAA;IACI,uCAAuC;IACvC,kBAAkB;IAClB,WAAW;IACX,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,UAAU;IACV,eAAe;AACnB;;AAEA,yBAAyB;AACzB;IACI;QACI,YAAY;IAChB;AACJ;;AAEA,wBAAwB;AACxB;IACI;QACI,cAAc;QACd,aAAa;QACb,WAAW;QACX,cAAc;QACd,MAAM;IACV;AACJ;;;AAGA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,UAAU;AACd",sourcesContent:['.Notifications {\n    border: 0.1rem dotted rgb(244, 19, 124);\n    position: absolute;\n    top: 0.5rem;\n    right: 2rem;\n    color: black;\n    height: 8rem;\n    width: 40%;\n    padding: 0.1rem;\n}\n\n/* Screens up to 1020px */\n@media only screen and (max-width: 1024px) {\n    .Notifications {\n        height: 7rem;\n    }\n}\n\n/* Screens up to 800px */\n@media only screen and (max-width: 800px) {\n    .Notifications {\n        right: -0.1rem;\n        left: -0.1rem;\n        width: 100%;\n        height: 6.5rem;\n        top: 0;\n    }\n}\n\n\np {\n    font-weight: bold;\n}\n\nli[data-priority="default"] {\n    color: blue;\n}\n\nli[data-priority="urgent"], li {\n    color: red;\n}\n\n\n'],sourceRoot:""}]);const i=o},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var l=void 0!==t.layer;l&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,l&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},869:(e,n)=>{var t=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function y(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||m}function v(){}function b(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||m}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var k=b.prototype=new v;k.constructor=b,h(k,y.prototype),k.isPureReactComponent=!0;var w=Array.isArray,S={H:null,A:null,T:null,S:null},A=Object.prototype.hasOwnProperty;function C(e,n,r,l,a,o){return r=o.ref,{$$typeof:t,type:e,key:n,ref:void 0!==r?r:null,props:o}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===t}var x=/\/+/g;function _(e,n){return"object"==typeof e&&null!==e&&null!=e.key?(t=""+e.key,r={"=":"=0",":":"=2"},"$"+t.replace(/[=:]/g,(function(e){return r[e]}))):n.toString(36);var t,r}function P(){}function z(e,n,l,a,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,s,c=!1;if(null===e)c=!0;else switch(i){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case t:case r:c=!0;break;case d:return z((c=e._init)(e._payload),n,l,a,o)}}if(c)return o=o(e),c=""===a?"."+_(e,0):a,w(o)?(l="",null!=c&&(l=c.replace(x,"$&/")+"/"),z(o,n,l,"",(function(e){return e}))):null!=o&&(E(o)&&(u=o,s=l+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(x,"$&/")+"/")+c,o=C(u.type,s,void 0,0,0,u.props)),n.push(o)),1;c=0;var f,m=""===a?".":a+":";if(w(e))for(var h=0;h<e.length;h++)c+=z(a=e[h],n,l,i=m+_(a,h),o);else if("function"==typeof(h=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=h.call(e),h=0;!(a=e.next()).done;)c+=z(a=a.value,n,l,i=m+_(a,h++),o);else if("object"===i){if("function"==typeof e.then)return z(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(P,P):(e.status="pending",e.then((function(n){"pending"===e.status&&(e.status="fulfilled",e.value=n)}),(function(n){"pending"===e.status&&(e.status="rejected",e.reason=n)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),n,l,a,o);throw n=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.")}return c}function N(e,n,t){if(null==e)return e;var r=[],l=0;return z(e,r,"","",(function(e){return n.call(t,e,l++)})),r}function T(e){if(-1===e._status){var n=e._result;(n=n()).then((function(n){0!==e._status&&-1!==e._status||(e._status=1,e._result=n)}),(function(n){0!==e._status&&-1!==e._status||(e._status=2,e._result=n)})),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var L="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var n=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function I(){}n.Children={map:N,forEach:function(e,n,t){N(e,(function(){n.apply(this,arguments)}),t)},count:function(e){var n=0;return N(e,(function(){n++})),n},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},n.Component=y,n.Fragment=l,n.Profiler=o,n.PureComponent=b,n.StrictMode=a,n.Suspense=c,n.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,n.act=function(){throw Error("act(...) is not supported in production builds of React.")},n.cache=function(e){return function(){return e.apply(null,arguments)}},n.cloneElement=function(e,n,t){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=h({},e.props),l=e.key;if(null!=n)for(a in n.ref,void 0!==n.key&&(l=""+n.key),n)!A.call(n,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===n.ref||(r[a]=n[a]);var a=arguments.length-2;if(1===a)r.children=t;else if(1<a){for(var o=Array(a),i=0;i<a;i++)o[i]=arguments[i+2];r.children=o}return C(e.type,l,void 0,0,0,r)},n.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},n.createElement=function(e,n,t){var r,l={},a=null;if(null!=n)for(r in void 0!==n.key&&(a=""+n.key),n)A.call(n,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(l[r]=n[r]);var o=arguments.length-2;if(1===o)l.children=t;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];l.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===l[r]&&(l[r]=o[r]);return C(e,a,void 0,0,0,l)},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:s,render:e}},n.isValidElement=E,n.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},n.memo=function(e,n){return{$$typeof:f,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=S.T,t={};S.T=t;try{var r=e(),l=S.S;null!==l&&l(t,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(I,L)}catch(e){L(e)}finally{S.T=n}},n.unstable_useCacheRefresh=function(){return S.H.useCacheRefresh()},n.use=function(e){return S.H.use(e)},n.useActionState=function(e,n,t){return S.H.useActionState(e,n,t)},n.useCallback=function(e,n){return S.H.useCallback(e,n)},n.useContext=function(e){return S.H.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e,n){return S.H.useDeferredValue(e,n)},n.useEffect=function(e,n){return S.H.useEffect(e,n)},n.useId=function(){return S.H.useId()},n.useImperativeHandle=function(e,n,t){return S.H.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return S.H.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return S.H.useLayoutEffect(e,n)},n.useMemo=function(e,n){return S.H.useMemo(e,n)},n.useOptimistic=function(e,n){return S.H.useOptimistic(e,n)},n.useReducer=function(e,n,t){return S.H.useReducer(e,n,t)},n.useRef=function(e){return S.H.useRef(e)},n.useState=function(e){return S.H.useState(e)},n.useSyncExternalStore=function(e,n,t){return S.H.useSyncExternalStore(e,n,t)},n.useTransition=function(){return S.H.useTransition()},n.version="19.0.0"},961:(e,n,t)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(221)},982:(e,n,t)=>{e.exports=t(477)}},n={};function t(r){var l=n[r];if(void 0!==l)return l.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var l=r.length-1;l>-1&&(!e||!/^http(s?):/.test(e));)e=r[l--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0;var r=t(540),l=t(338);function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function o(e){var n=function(e){if("object"!=a(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var t=n.call(e,"string");if("object"!=a(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==a(n)?n:n+""}function i(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,o(r.key),r)}}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function s(e,n){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,n){return e.__proto__=n,e},s(e,n)}const c=t.p+"images/0d8d2e9fad650c65630c.jpg";var f=t(72),d=t.n(f),p=t(825),m=t.n(p),h=t(659),g=t.n(h),y=t(56),v=t.n(y),b=t(159),k=t.n(b),w=t(113),S=t.n(w),A=t(126),C={};function E(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(E=function(){return!!e})()}C.styleTagTransform=S(),C.setAttributes=v(),C.insert=g().bind(null,"head"),C.domAPI=m(),C.insertStyleElement=k(),d()(A.A,C),A.A&&A.A.locals&&A.A.locals;var x=function(e){function n(){return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),e=this,r=arguments,t=u(t=n),function(e,n){if(n&&("object"==a(n)||"function"==typeof n))return n;if(void 0!==n)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,E()?Reflect.construct(t,r||[],u(e).constructor):t.apply(e,r));var e,t,r}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),n&&s(e,n)}(n,e),t=n,(l=[{key:"render",value:function(){return r.createElement("div",{className:"container"},r.createElement("div",{className:"App-header"},r.createElement("header",null,r.createElement("img",{src:c,alt:"ALX-Logo"}),r.createElement("h1",null,"School dashboard"))),r.createElement("div",{className:"App-body"},r.createElement("p",null,"Login to access the full dashboard"),r.createElement("div",{className:"Input"},r.createElement("div",{className:"Email"},r.createElement("label",{htmlFor:"email"},"Email:"),r.createElement("input",{id:"email",name:"email",type:"email"})),r.createElement("div",{className:"Password"},r.createElement("label",{htmlFor:"password"},"Password:"),r.createElement("input",{id:"password",type:"password",name:"password"})),r.createElement("button",null,"OK"))),r.createElement("div",{className:"App-footer"},r.createElement("footer",null,r.createElement("p",null,"Copyright ",(new Date).getFullYear()," - ","ALX"))))}}])&&i(t.prototype,l),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,l}(r.Component),_=t(602),P={};P.styleTagTransform=S(),P.setAttributes=v(),P.insert=g().bind(null,"head"),P.domAPI=m(),P.insertStyleElement=k(),d()(_.A,P),_.A&&_.A.locals&&_.A.locals;const z=t.p+"images/efd4ee236dd3e13da61c.png";function N(){return r.createElement("div",{className:"Notifications"},r.createElement("p",null,"Here is the list of notifications"),r.createElement("ul",null,r.createElement("li",{"data-priority":"default"},"New course available"),r.createElement("li",{"data-priority":"urgent"},"New resume available"),r.createElement("li",{dangerouslySetInnerHTML:{__html:"<strong>Urgent requirement</strong> - complete by EOD"}})),r.createElement("button",{style:{ariaLabel:"Close",position:"absolute",top:"0.1rem",right:"0"},onClick:function(){return console.log("Close button has been clicked")}},r.createElement("img",{src:z,style:{width:"1rem",height:"1rem",objectFit:"contain",backgroundColor:"white",margin:"0.1rem"}})))}l.createRoot(document.getElementById("root")).render(r.createElement(r.StrictMode,null,r.createElement(x,null))),l.createRoot(document.getElementById("root-notifications")).render(r.createElement(r.StrictMode,null,r.createElement(N,null)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,